// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `bench_pb.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct Bar {
    // message fields
    time: ::std::option::Option<i32>,
    ratio: ::std::option::Option<f32>,
    size: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Bar {
    fn default() -> &'a Bar {
        <Bar as ::protobuf::Message>::default_instance()
    }
}

impl Bar {
    pub fn new() -> Bar {
        ::std::default::Default::default()
    }

    // required int32 time = 2;


    pub fn get_time(&self) -> i32 {
        self.time.unwrap_or(0)
    }
    pub fn clear_time(&mut self) {
        self.time = ::std::option::Option::None;
    }

    pub fn has_time(&self) -> bool {
        self.time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time(&mut self, v: i32) {
        self.time = ::std::option::Option::Some(v);
    }

    // required float ratio = 3;


    pub fn get_ratio(&self) -> f32 {
        self.ratio.unwrap_or(0.)
    }
    pub fn clear_ratio(&mut self) {
        self.ratio = ::std::option::Option::None;
    }

    pub fn has_ratio(&self) -> bool {
        self.ratio.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ratio(&mut self, v: f32) {
        self.ratio = ::std::option::Option::Some(v);
    }

    // required uint32 size = 4;


    pub fn get_size(&self) -> u32 {
        self.size.unwrap_or(0)
    }
    pub fn clear_size(&mut self) {
        self.size = ::std::option::Option::None;
    }

    pub fn has_size(&self) -> bool {
        self.size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_size(&mut self, v: u32) {
        self.size = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for Bar {
    fn is_initialized(&self) -> bool {
        if self.time.is_none() {
            return false;
        }
        if self.ratio.is_none() {
            return false;
        }
        if self.size.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.time = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.ratio = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.size = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.time {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.ratio {
            my_size += 5;
        }
        if let Some(v) = self.size {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.time {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.ratio {
            os.write_float(3, v)?;
        }
        if let Some(v) = self.size {
            os.write_uint32(4, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Bar {
        Bar::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "time",
                |m: &Bar| { &m.time },
                |m: &mut Bar| { &mut m.time },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "ratio",
                |m: &Bar| { &m.ratio },
                |m: &mut Bar| { &mut m.ratio },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "size",
                |m: &Bar| { &m.size },
                |m: &mut Bar| { &mut m.size },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Bar>(
                "Bar",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Bar {
        static instance: ::protobuf::rt::LazyV2<Bar> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Bar::new)
    }
}

impl ::protobuf::Clear for Bar {
    fn clear(&mut self) {
        self.time = ::std::option::Option::None;
        self.ratio = ::std::option::Option::None;
        self.size = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Bar {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Bar {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FooBar {
    // message fields
    pub sibling: ::protobuf::SingularPtrField<Bar>,
    name: ::protobuf::SingularField<::std::string::String>,
    rating: ::std::option::Option<f64>,
    postfix: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FooBar {
    fn default() -> &'a FooBar {
        <FooBar as ::protobuf::Message>::default_instance()
    }
}

impl FooBar {
    pub fn new() -> FooBar {
        ::std::default::Default::default()
    }

    // optional .benchpb.Bar sibling = 1;


    pub fn get_sibling(&self) -> &Bar {
        self.sibling.as_ref().unwrap_or_else(|| <Bar as ::protobuf::Message>::default_instance())
    }
    pub fn clear_sibling(&mut self) {
        self.sibling.clear();
    }

    pub fn has_sibling(&self) -> bool {
        self.sibling.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sibling(&mut self, v: Bar) {
        self.sibling = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sibling(&mut self) -> &mut Bar {
        if self.sibling.is_none() {
            self.sibling.set_default();
        }
        self.sibling.as_mut().unwrap()
    }

    // Take field
    pub fn take_sibling(&mut self) -> Bar {
        self.sibling.take().unwrap_or_else(|| Bar::new())
    }

    // optional string name = 2;


    pub fn get_name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name.set_default();
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional double rating = 3;


    pub fn get_rating(&self) -> f64 {
        self.rating.unwrap_or(0.)
    }
    pub fn clear_rating(&mut self) {
        self.rating = ::std::option::Option::None;
    }

    pub fn has_rating(&self) -> bool {
        self.rating.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rating(&mut self, v: f64) {
        self.rating = ::std::option::Option::Some(v);
    }

    // optional uint32 postfix = 4;


    pub fn get_postfix(&self) -> u32 {
        self.postfix.unwrap_or(0)
    }
    pub fn clear_postfix(&mut self) {
        self.postfix = ::std::option::Option::None;
    }

    pub fn has_postfix(&self) -> bool {
        self.postfix.is_some()
    }

    // Param is passed by value, moved
    pub fn set_postfix(&mut self, v: u32) {
        self.postfix = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for FooBar {
    fn is_initialized(&self) -> bool {
        for v in &self.sibling {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.sibling)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.rating = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.postfix = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.sibling.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.rating {
            my_size += 9;
        }
        if let Some(v) = self.postfix {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.sibling.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.name.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(v) = self.rating {
            os.write_double(3, v)?;
        }
        if let Some(v) = self.postfix {
            os.write_uint32(4, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FooBar {
        FooBar::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Bar>>(
                "sibling",
                |m: &FooBar| { &m.sibling },
                |m: &mut FooBar| { &mut m.sibling },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &FooBar| { &m.name },
                |m: &mut FooBar| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "rating",
                |m: &FooBar| { &m.rating },
                |m: &mut FooBar| { &mut m.rating },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "postfix",
                |m: &FooBar| { &m.postfix },
                |m: &mut FooBar| { &mut m.postfix },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FooBar>(
                "FooBar",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FooBar {
        static instance: ::protobuf::rt::LazyV2<FooBar> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FooBar::new)
    }
}

impl ::protobuf::Clear for FooBar {
    fn clear(&mut self) {
        self.sibling.clear();
        self.name.clear();
        self.rating = ::std::option::Option::None;
        self.postfix = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FooBar {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FooBar {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FooBarContainer {
    // message fields
    pub list: ::protobuf::RepeatedField<FooBar>,
    initialized: ::std::option::Option<bool>,
    fruit: ::std::option::Option<Enum>,
    location: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FooBarContainer {
    fn default() -> &'a FooBarContainer {
        <FooBarContainer as ::protobuf::Message>::default_instance()
    }
}

impl FooBarContainer {
    pub fn new() -> FooBarContainer {
        ::std::default::Default::default()
    }

    // repeated .benchpb.FooBar list = 1;


    pub fn get_list(&self) -> &[FooBar] {
        &self.list
    }
    pub fn clear_list(&mut self) {
        self.list.clear();
    }

    // Param is passed by value, moved
    pub fn set_list(&mut self, v: ::protobuf::RepeatedField<FooBar>) {
        self.list = v;
    }

    // Mutable pointer to the field.
    pub fn mut_list(&mut self) -> &mut ::protobuf::RepeatedField<FooBar> {
        &mut self.list
    }

    // Take field
    pub fn take_list(&mut self) -> ::protobuf::RepeatedField<FooBar> {
        ::std::mem::replace(&mut self.list, ::protobuf::RepeatedField::new())
    }

    // optional bool initialized = 2;


    pub fn get_initialized(&self) -> bool {
        self.initialized.unwrap_or(false)
    }
    pub fn clear_initialized(&mut self) {
        self.initialized = ::std::option::Option::None;
    }

    pub fn has_initialized(&self) -> bool {
        self.initialized.is_some()
    }

    // Param is passed by value, moved
    pub fn set_initialized(&mut self, v: bool) {
        self.initialized = ::std::option::Option::Some(v);
    }

    // optional .benchpb.Enum fruit = 3;


    pub fn get_fruit(&self) -> Enum {
        self.fruit.unwrap_or(Enum::Apples)
    }
    pub fn clear_fruit(&mut self) {
        self.fruit = ::std::option::Option::None;
    }

    pub fn has_fruit(&self) -> bool {
        self.fruit.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fruit(&mut self, v: Enum) {
        self.fruit = ::std::option::Option::Some(v);
    }

    // optional string location = 4;


    pub fn get_location(&self) -> &str {
        match self.location.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_location(&mut self) {
        self.location.clear();
    }

    pub fn has_location(&self) -> bool {
        self.location.is_some()
    }

    // Param is passed by value, moved
    pub fn set_location(&mut self, v: ::std::string::String) {
        self.location = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_location(&mut self) -> &mut ::std::string::String {
        if self.location.is_none() {
            self.location.set_default();
        }
        self.location.as_mut().unwrap()
    }

    // Take field
    pub fn take_location(&mut self) -> ::std::string::String {
        self.location.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for FooBarContainer {
    fn is_initialized(&self) -> bool {
        for v in &self.list {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.list)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.initialized = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.fruit, 3, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.location)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.initialized {
            my_size += 2;
        }
        if let Some(v) = self.fruit {
            my_size += ::protobuf::rt::enum_size(3, v);
        }
        if let Some(ref v) = self.location.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.list {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.initialized {
            os.write_bool(2, v)?;
        }
        if let Some(v) = self.fruit {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(ref v) = self.location.as_ref() {
            os.write_string(4, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FooBarContainer {
        FooBarContainer::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FooBar>>(
                "list",
                |m: &FooBarContainer| { &m.list },
                |m: &mut FooBarContainer| { &mut m.list },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "initialized",
                |m: &FooBarContainer| { &m.initialized },
                |m: &mut FooBarContainer| { &mut m.initialized },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Enum>>(
                "fruit",
                |m: &FooBarContainer| { &m.fruit },
                |m: &mut FooBarContainer| { &mut m.fruit },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "location",
                |m: &FooBarContainer| { &m.location },
                |m: &mut FooBarContainer| { &mut m.location },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FooBarContainer>(
                "FooBarContainer",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FooBarContainer {
        static instance: ::protobuf::rt::LazyV2<FooBarContainer> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FooBarContainer::new)
    }
}

impl ::protobuf::Clear for FooBarContainer {
    fn clear(&mut self) {
        self.list.clear();
        self.initialized = ::std::option::Option::None;
        self.fruit = ::std::option::Option::None;
        self.location.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FooBarContainer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FooBarContainer {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Enum {
    Apples = 0,
    Pears = 1,
    Bananas = 2,
}

impl ::protobuf::ProtobufEnum for Enum {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Enum> {
        match value {
            0 => ::std::option::Option::Some(Enum::Apples),
            1 => ::std::option::Option::Some(Enum::Pears),
            2 => ::std::option::Option::Some(Enum::Bananas),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Enum] = &[
            Enum::Apples,
            Enum::Pears,
            Enum::Bananas,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Enum>("Enum", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Enum {
}

impl ::std::default::Default for Enum {
    fn default() -> Self {
        Enum::Apples
    }
}

impl ::protobuf::reflect::ProtobufValue for Enum {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0ebench_pb.proto\x12\x07benchpb\"C\n\x03Bar\x12\x12\n\x04time\x18\
    \x02\x20\x02(\x05R\x04time\x12\x14\n\x05ratio\x18\x03\x20\x02(\x02R\x05r\
    atio\x12\x12\n\x04size\x18\x04\x20\x02(\rR\x04size\"v\n\x06FooBar\x12&\n\
    \x07sibling\x18\x01\x20\x01(\x0b2\x0c.benchpb.BarR\x07sibling\x12\x12\n\
    \x04name\x18\x02\x20\x01(\tR\x04name\x12\x16\n\x06rating\x18\x03\x20\x01\
    (\x01R\x06rating\x12\x18\n\x07postfix\x18\x04\x20\x01(\rR\x07postfix\"\
    \x99\x01\n\x0fFooBarContainer\x12#\n\x04list\x18\x01\x20\x03(\x0b2\x0f.b\
    enchpb.FooBarR\x04list\x12\x20\n\x0binitialized\x18\x02\x20\x01(\x08R\
    \x0binitialized\x12#\n\x05fruit\x18\x03\x20\x01(\x0e2\r.benchpb.EnumR\
    \x05fruit\x12\x1a\n\x08location\x18\x04\x20\x01(\tR\x08location**\n\x04E\
    num\x12\n\n\x06Apples\x10\0\x12\t\n\x05Pears\x10\x01\x12\x0b\n\x07Banana\
    s\x10\x02J\x8c\x0e\n\x06\x12\x04\x13\0+\x01\n\x8d\x06\n\x01\x0c\x12\x03\
    \x13\0\x122\xc7\x04\x20Copyright\x202015\x20Google\x20Inc.\x20All\x20rig\
    hts\x20reserved.\n\n\x20Licensed\x20under\x20the\x20Apache\x20License,\
    \x20Version\x202.0\x20(the\x20\"License\");\n\x20you\x20may\x20not\x20us\
    e\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20Licens\
    e.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\
    \n\n\x20\x20\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\n\n\
    \x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\
    \x20in\x20writing,\x20software\n\x20distributed\x20under\x20the\x20Licen\
    se\x20is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHO\
    UT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20\
    express\x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20sp\
    ecific\x20language\x20governing\x20permissions\x20and\n\x20limitations\
    \x20under\x20the\x20License.\n2\xb8\x01\x20trying\x20to\x20represent\x20\
    a\x20typical\x20mix\x20of\x20datatypes:\n\x201\x20array\x20of\x203\x20el\
    ements,\x20each\x20element:\x201\x20string,\x203\x20nested\x20objects,\
    \x209\x20scalars\n\x20root\x20element\x20has\x20the\x20array,\x20additio\
    nal\x20string\x20and\x20an\x20enum\n\n\x08\n\x01\x02\x12\x03\x15\0\x10\n\
    \t\n\x02\x05\0\x12\x03\x17\01\n\n\n\x03\x05\0\x01\x12\x03\x17\x05\t\n\
    \x0b\n\x04\x05\0\x02\0\x12\x03\x17\x0c\x17\n\x0c\n\x05\x05\0\x02\0\x01\
    \x12\x03\x17\x0c\x12\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x17\x15\x16\n\
    \x0b\n\x04\x05\0\x02\x01\x12\x03\x17\x18\"\n\x0c\n\x05\x05\0\x02\x01\x01\
    \x12\x03\x17\x18\x1d\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\x17\x20!\n\
    \x0b\n\x04\x05\0\x02\x02\x12\x03\x17#/\n\x0c\n\x05\x05\0\x02\x02\x01\x12\
    \x03\x17#*\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03\x17-.\n\n\n\x02\x04\0\
    \x12\x04\x19\0\x1d\x01\n\n\n\x03\x04\0\x01\x12\x03\x19\x08\x0b\n\x0b\n\
    \x04\x04\0\x02\0\x12\x03\x1a\x02\x1a\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\
    \x1a\x02\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x1a\x0b\x10\n\x0c\n\x05\
    \x04\0\x02\0\x01\x12\x03\x1a\x11\x15\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\
    \x1a\x18\x19\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x1b\x02\x1b\n\x0c\n\x05\
    \x04\0\x02\x01\x04\x12\x03\x1b\x02\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\
    \x03\x1b\x0b\x10\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x1b\x11\x16\n\x0c\
    \n\x05\x04\0\x02\x01\x03\x12\x03\x1b\x19\x1a\n\x0b\n\x04\x04\0\x02\x02\
    \x12\x03\x1c\x02\x1b\n\x0c\n\x05\x04\0\x02\x02\x04\x12\x03\x1c\x02\n\n\
    \x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x1c\x0b\x11\n\x0c\n\x05\x04\0\x02\
    \x02\x01\x12\x03\x1c\x12\x16\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x1c\
    \x19\x1a\n\n\n\x02\x04\x01\x12\x04\x1f\0$\x01\n\n\n\x03\x04\x01\x01\x12\
    \x03\x1f\x08\x0e\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x20\x02\x1b\n\x0c\n\
    \x05\x04\x01\x02\0\x04\x12\x03\x20\x02\n\n\x0c\n\x05\x04\x01\x02\0\x06\
    \x12\x03\x20\x0b\x0e\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x20\x0f\x16\n\
    \x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x20\x19\x1a\n\x0b\n\x04\x04\x01\x02\
    \x01\x12\x03!\x02\x1b\n\x0c\n\x05\x04\x01\x02\x01\x04\x12\x03!\x02\n\n\
    \x0c\n\x05\x04\x01\x02\x01\x05\x12\x03!\x0b\x11\n\x0c\n\x05\x04\x01\x02\
    \x01\x01\x12\x03!\x12\x16\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03!\x19\
    \x1a\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\"\x02\x1d\n\x0c\n\x05\x04\x01\
    \x02\x02\x04\x12\x03\"\x02\n\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\"\
    \x0b\x11\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\"\x12\x18\n\x0c\n\x05\
    \x04\x01\x02\x02\x03\x12\x03\"\x1b\x1c\n\x0b\n\x04\x04\x01\x02\x03\x12\
    \x03#\x02\x1e\n\x0c\n\x05\x04\x01\x02\x03\x04\x12\x03#\x02\n\n\x0c\n\x05\
    \x04\x01\x02\x03\x05\x12\x03#\x0b\x11\n\x0c\n\x05\x04\x01\x02\x03\x01\
    \x12\x03#\x12\x19\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03#\x1c\x1d\n\n\n\
    \x02\x04\x02\x12\x04&\0+\x01\n\n\n\x03\x04\x02\x01\x12\x03&\x08\x17\n$\n\
    \x04\x04\x02\x02\0\x12\x03'\x02\x1b\"\x17\x203\x20copies\x20of\x20the\
    \x20above\n\n\x0c\n\x05\x04\x02\x02\0\x04\x12\x03'\x02\n\n\x0c\n\x05\x04\
    \x02\x02\0\x06\x12\x03'\x0b\x11\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03'\
    \x12\x16\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03'\x19\x1a\n\x0b\n\x04\x04\
    \x02\x02\x01\x12\x03(\x02\x20\n\x0c\n\x05\x04\x02\x02\x01\x04\x12\x03(\
    \x02\n\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03(\x0b\x0f\n\x0c\n\x05\x04\
    \x02\x02\x01\x01\x12\x03(\x10\x1b\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\
    \x03(\x1e\x1f\n\x0b\n\x04\x04\x02\x02\x02\x12\x03)\x02\x1a\n\x0c\n\x05\
    \x04\x02\x02\x02\x04\x12\x03)\x02\n\n\x0c\n\x05\x04\x02\x02\x02\x06\x12\
    \x03)\x0b\x0f\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03)\x10\x15\n\x0c\n\
    \x05\x04\x02\x02\x02\x03\x12\x03)\x18\x19\n\x0b\n\x04\x04\x02\x02\x03\
    \x12\x03*\x02\x1f\n\x0c\n\x05\x04\x02\x02\x03\x04\x12\x03*\x02\n\n\x0c\n\
    \x05\x04\x02\x02\x03\x05\x12\x03*\x0b\x11\n\x0c\n\x05\x04\x02\x02\x03\
    \x01\x12\x03*\x12\x1a\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x03*\x1d\x1e\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
