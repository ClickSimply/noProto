{"message":"unresolved import `crate::JS_Schema`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018, paths in `use` statements are relative to the current module\nunless they begin with the name of a crate or a literal `crate::`, in which\ncase they start from the crate root. As in Rust 2015 code, the `self::` and\n`super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nIn Rust 2018 the `extern crate` declaration is not required and you can instead\njust `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/numbers.rs","byte_start":1508,"byte_end":1524,"line_start":38,"line_end":38,"column_start":5,"column_end":21,"is_primary":true,"text":[{"text":"use crate::JS_Schema;","highlight_start":5,"highlight_end":21}],"label":"no `JS_Schema` in the root","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"src/pointer/numbers.rs","byte_start":1515,"byte_end":1524,"line_start":38,"line_end":38,"column_start":12,"column_end":21,"is_primary":true,"text":[{"text":"use crate::JS_Schema;","highlight_start":12,"highlight_end":21}],"label":null,"suggested_replacement":"NP_Schema","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `crate::JS_Schema`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/numbers.rs:38:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse crate::JS_Schema;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `NP_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `JS_Schema` in the root\u001b[0m\n\n"}
{"message":"unresolved import `crate::JS_Schema`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018, paths in `use` statements are relative to the current module\nunless they begin with the name of a crate or a literal `crate::`, in which\ncase they start from the crate root. As in Rust 2015 code, the `self::` and\n`super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nIn Rust 2018 the `extern crate` declaration is not required and you can instead\njust `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/uuid.rs","byte_start":715,"byte_end":724,"line_start":26,"line_end":26,"column_start":13,"column_end":22,"is_primary":true,"text":[{"text":"use crate::{JS_Schema, idl::JS_AST, schema::{NP_Value_Kind, NULL}};","highlight_start":13,"highlight_end":22}],"label":"no `JS_Schema` in the root","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"src/pointer/uuid.rs","byte_start":715,"byte_end":724,"line_start":26,"line_end":26,"column_start":13,"column_end":22,"is_primary":true,"text":[{"text":"use crate::{JS_Schema, idl::JS_AST, schema::{NP_Value_Kind, NULL}};","highlight_start":13,"highlight_end":22}],"label":null,"suggested_replacement":"NP_Schema","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `crate::JS_Schema`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/uuid.rs:26:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse crate::{JS_Schema, idl::JS_AST, schema::{NP_Value_Kind, NULL}};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `JS_Schema` in the root\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a similar name exists in the module: `NP_Schema`\u001b[0m\n\n"}
{"message":"unresolved import `crate::JS_Schema`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018, paths in `use` statements are relative to the current module\nunless they begin with the name of a crate or a literal `crate::`, in which\ncase they start from the crate root. As in Rust 2015 code, the `self::` and\n`super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nIn Rust 2018 the `extern crate` declaration is not required and you can instead\njust `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/option.rs","byte_start":530,"byte_end":539,"line_start":19,"line_end":19,"column_start":13,"column_end":22,"is_primary":true,"text":[{"text":"use crate::{JS_Schema, idl::JS_AST, schema::{NP_Enum_Data, NP_Value_Kind}};","highlight_start":13,"highlight_end":22}],"label":"no `JS_Schema` in the root","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"src/pointer/option.rs","byte_start":530,"byte_end":539,"line_start":19,"line_end":19,"column_start":13,"column_end":22,"is_primary":true,"text":[{"text":"use crate::{JS_Schema, idl::JS_AST, schema::{NP_Enum_Data, NP_Value_Kind}};","highlight_start":13,"highlight_end":22}],"label":null,"suggested_replacement":"NP_Schema","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `crate::JS_Schema`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/option.rs:19:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse crate::{JS_Schema, idl::JS_AST, schema::{NP_Enum_Data, NP_Value_Kind}};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `JS_Schema` in the root\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a similar name exists in the module: `NP_Schema`\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type `JS_Schema`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/schema.rs","byte_start":48073,"byte_end":48093,"line_start":1279,"line_end":1279,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"pub struct NP_Schema {","highlight_start":1,"highlight_end":21}],"label":"similarly named struct `NP_Schema` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/lib.rs","byte_start":26662,"byte_end":26671,"line_start":493,"line_end":493,"column_start":19,"column_end":28,"is_primary":true,"text":[{"text":"        let idl = JS_Schema::new(es6_schema.into())?;","highlight_start":19,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":26662,"byte_end":26671,"line_start":493,"line_end":493,"column_start":19,"column_end":28,"is_primary":true,"text":[{"text":"        let idl = JS_Schema::new(es6_schema.into())?;","highlight_start":19,"highlight_end":28}],"label":null,"suggested_replacement":"NP_Schema","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"consider importing this struct","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":22146,"byte_end":22146,"line_start":346,"line_end":346,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use core::ops::{Deref, DerefMut};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::idl::JS_Schema;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `JS_Schema`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:493:19\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m493\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let idl = JS_Schema::new(es6_schema.into())?;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/schema.rs:1279:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1279\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct NP_Schema {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `NP_Schema` defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: a struct with a similar name exists\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m493\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let idl = NP_Schema::new(es6_schema.into())?;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this struct\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m346\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse crate::idl::JS_Schema;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"unused imports: `NP_Cursor`, `np_path`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/schema.rs","byte_start":34448,"byte_end":34455,"line_start":815,"line_end":815,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"use crate::{np_path, pointer::{NP_Cursor}};","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/schema.rs","byte_start":34467,"byte_end":34476,"line_start":815,"line_end":815,"column_start":32,"column_end":41,"is_primary":true,"text":[{"text":"use crate::{np_path, pointer::{NP_Cursor}};","highlight_start":32,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/schema.rs","byte_start":34436,"byte_end":34479,"line_start":815,"line_end":815,"column_start":1,"column_end":44,"is_primary":true,"text":[{"text":"use crate::{np_path, pointer::{NP_Cursor}};","highlight_start":1,"highlight_end":44}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `NP_Cursor`, `np_path`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/schema.rs:815:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m815\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse crate::{np_path, pointer::{NP_Cursor}};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"unused imports: `buffer::DEFAULT_ROOT_PTR_ADDR`, `memory::NP_Memory`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/schema.rs","byte_start":34556,"byte_end":34585,"line_start":818,"line_end":818,"column_start":13,"column_end":42,"is_primary":true,"text":[{"text":"use crate::{buffer::DEFAULT_ROOT_PTR_ADDR, json_flex::NP_JSON, memory::NP_Memory, pointer::{portal::{NP_Portal}, ulid::NP_ULID, uuid::NP_UUID}};","highlight_start":13,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/schema.rs","byte_start":34607,"byte_end":34624,"line_start":818,"line_end":818,"column_start":64,"column_end":81,"is_primary":true,"text":[{"text":"use crate::{buffer::DEFAULT_ROOT_PTR_ADDR, json_flex::NP_JSON, memory::NP_Memory, pointer::{portal::{NP_Portal}, ulid::NP_ULID, uuid::NP_UUID}};","highlight_start":64,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src/schema.rs","byte_start":34556,"byte_end":34587,"line_start":818,"line_end":818,"column_start":13,"column_end":44,"is_primary":true,"text":[{"text":"use crate::{buffer::DEFAULT_ROOT_PTR_ADDR, json_flex::NP_JSON, memory::NP_Memory, pointer::{portal::{NP_Portal}, ulid::NP_ULID, uuid::NP_UUID}};","highlight_start":13,"highlight_end":44}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/schema.rs","byte_start":34605,"byte_end":34624,"line_start":818,"line_end":818,"column_start":62,"column_end":81,"is_primary":true,"text":[{"text":"use crate::{buffer::DEFAULT_ROOT_PTR_ADDR, json_flex::NP_JSON, memory::NP_Memory, pointer::{portal::{NP_Portal}, ulid::NP_ULID, uuid::NP_UUID}};","highlight_start":62,"highlight_end":81}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `buffer::DEFAULT_ROOT_PTR_ADDR`, `memory::NP_Memory`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/schema.rs:818:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m818\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse crate::{buffer::DEFAULT_ROOT_PTR_ADDR, json_flex::NP_JSON, memory::NP_Memory, pointer::{portal::{NP_Portal}, ulid::NP_ULID, uuid::NP_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `alloc::string::String`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/hashmap.rs","byte_start":4,"byte_end":25,"line_start":1,"line_end":1,"column_start":5,"column_end":26,"is_primary":true,"text":[{"text":"use alloc::string::String;","highlight_start":5,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/hashmap.rs","byte_start":0,"byte_end":26,"line_start":1,"line_end":1,"column_start":1,"column_end":27,"is_primary":true,"text":[{"text":"use alloc::string::String;","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `alloc::string::String`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hashmap.rs:1:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse alloc::string::String;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused imports: `DerefMut`, `Deref`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":22162,"byte_end":22167,"line_start":346,"line_end":346,"column_start":17,"column_end":22,"is_primary":true,"text":[{"text":"use core::ops::{Deref, DerefMut};","highlight_start":17,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/lib.rs","byte_start":22169,"byte_end":22177,"line_start":346,"line_end":346,"column_start":24,"column_end":32,"is_primary":true,"text":[{"text":"use core::ops::{Deref, DerefMut};","highlight_start":24,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":22146,"byte_end":22179,"line_start":346,"line_end":346,"column_start":1,"column_end":34,"is_primary":true,"text":[{"text":"use core::ops::{Deref, DerefMut};","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `DerefMut`, `Deref`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:346:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m346\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse core::ops::{Deref, DerefMut};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `crate::json_flex::NP_JSON`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":22253,"byte_end":22278,"line_start":349,"line_end":349,"column_start":5,"column_end":30,"is_primary":true,"text":[{"text":"use crate::json_flex::NP_JSON;","highlight_start":5,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":22249,"byte_end":22279,"line_start":349,"line_end":349,"column_start":1,"column_end":31,"is_primary":true,"text":[{"text":"use crate::json_flex::NP_JSON;","highlight_start":1,"highlight_end":31}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::json_flex::NP_JSON`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:349:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m349\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse crate::json_flex::NP_JSON;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/any.rs","byte_start":2793,"byte_end":2809,"line_start":61,"line_end":61,"column_start":21,"column_end":37,"is_primary":true,"text":[{"text":"        schema.push(NP_Parsed_Schema {","highlight_start":21,"highlight_end":37}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/any.rs:61:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m61\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        schema.push(NP_Parsed_Schema {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/any.rs","byte_start":3288,"byte_end":3304,"line_start":76,"line_end":76,"column_start":21,"column_end":37,"is_primary":true,"text":[{"text":"        schema.push(NP_Parsed_Schema {","highlight_start":21,"highlight_end":37}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/any.rs:76:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m76\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        schema.push(NP_Parsed_Schema {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/string.rs","byte_start":8587,"byte_end":8603,"line_start":274,"line_end":274,"column_start":21,"column_end":37,"is_primary":true,"text":[{"text":"        schema.push(NP_Parsed_Schema {","highlight_start":21,"highlight_end":37}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/string.rs:274:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m274\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        schema.push(NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/string.rs","byte_start":10090,"byte_end":10106,"line_start":317,"line_end":317,"column_start":25,"column_end":41,"is_primary":true,"text":[{"text":"            schema.push(NP_Parsed_Schema {","highlight_start":25,"highlight_end":41}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/string.rs:317:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m317\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            schema.push(NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/string.rs","byte_start":10713,"byte_end":10729,"line_start":330,"line_end":330,"column_start":25,"column_end":41,"is_primary":true,"text":[{"text":"            schema.push(NP_Parsed_Schema {","highlight_start":25,"highlight_end":41}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/string.rs:330:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m330\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            schema.push(NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/string.rs","byte_start":15513,"byte_end":15529,"line_start":471,"line_end":471,"column_start":21,"column_end":37,"is_primary":true,"text":[{"text":"        schema.push(NP_Parsed_Schema {","highlight_start":21,"highlight_end":37}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/string.rs:471:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m471\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        schema.push(NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/bytes.rs","byte_start":8337,"byte_end":8353,"line_start":244,"line_end":244,"column_start":21,"column_end":37,"is_primary":true,"text":[{"text":"        schema.push(NP_Parsed_Schema {","highlight_start":21,"highlight_end":37}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/bytes.rs:244:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m244\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        schema.push(NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/bytes.rs","byte_start":14031,"byte_end":14047,"line_start":410,"line_end":410,"column_start":21,"column_end":37,"is_primary":true,"text":[{"text":"        schema.push(NP_Parsed_Schema {","highlight_start":21,"highlight_end":37}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/bytes.rs:410:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m410\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        schema.push(NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/bytes.rs","byte_start":15009,"byte_end":15025,"line_start":440,"line_end":440,"column_start":25,"column_end":41,"is_primary":true,"text":[{"text":"            schema.push(NP_Parsed_Schema {","highlight_start":25,"highlight_end":41}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/bytes.rs:440:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m440\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            schema.push(NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/bytes.rs","byte_start":15566,"byte_end":15582,"line_start":453,"line_end":453,"column_start":25,"column_end":41,"is_primary":true,"text":[{"text":"            schema.push(NP_Parsed_Schema {","highlight_start":25,"highlight_end":41}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/bytes.rs:453:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m453\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            schema.push(NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/numbers.rs","byte_start":7371,"byte_end":7387,"line_start":184,"line_end":184,"column_start":34,"column_end":50,"is_primary":true,"text":[{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":34,"highlight_end":50}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/pointer/numbers.rs","byte_start":20795,"byte_end":20874,"line_start":464,"line_end":464,"column_start":1,"column_end":80,"is_primary":false,"text":[{"text":"noproto_number!(i8,    \"int8\",  \"i8\", NP_TypeKeys::Int8  , NP_NumType::signed);","highlight_start":1,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"noproto_number!","def_site_span":{"file_name":"src/pointer/numbers.rs","byte_start":2213,"byte_end":20774,"line_start":67,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! noproto_number {","highlight_start":1,"highlight_end":30},{"text":"    ($t:ty, $str1: tt, $str2: tt, $tkey: expr, $numType: expr) => {","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> super::NP_Scalar<'value> for $t {","highlight_start":1,"highlight_end":55},{"text":"            fn schema_default(_schema: &NP_Parsed_Schema) -> Option<Self> where Self: Sized {","highlight_start":1,"highlight_end":94},{"text":"                Some(Self::default())","highlight_start":1,"highlight_end":38},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn np_max_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MAX)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn np_min_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MIN)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> NP_Value<'value> for $t {","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn type_idx() -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":75},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn self_type_idx(&self) -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":85},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn set_from_json<'set>(_depth: usize, _apply_null: bool, cursor: NP_Cursor, memory: &'set NP_Memory, value: &Box<NP_JSON>) -> Result<(), NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":186},{"text":"                match **value {","highlight_start":1,"highlight_end":32},{"text":"                    NP_JSON::Integer(int) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, int as $t)?;","highlight_start":1,"highlight_end":69},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Float(float) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, float as $t)?;","highlight_start":1,"highlight_end":71},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_json(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<NP_JSON, NP_Error> {","highlight_start":1,"highlight_end":108},{"text":"                let mut schema_json = JSMAP::new();","highlight_start":1,"highlight_end":52},{"text":"                schema_json.insert(\"type\".to_owned(), NP_JSON::String(Self::type_idx().0.to_string()));","highlight_start":1,"highlight_end":104},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    let default_val = default;","highlight_start":1,"highlight_end":47},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::unsigned => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::floating => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Float(default_val as f64));","highlight_start":1,"highlight_end":106},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                    ","highlight_start":1,"highlight_end":21},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                Ok(NP_JSON::Dictionary(schema_json))","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_idl(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<String, NP_Error> {","highlight_start":1,"highlight_end":106},{"text":"                let mut result = String::from($str2);","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    result.push_str(\"({default: \");","highlight_start":1,"highlight_end":52},{"text":"                    result.push_str(default.to_string().as_str());","highlight_start":1,"highlight_end":67},{"text":"                    result.push_str(\"})\");","highlight_start":1,"highlight_end":43},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    result.push_str(\"()\");","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(result)","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn from_idl_to_schema(mut schema: Vec<NP_Parsed_Schema>, _name: &str, idl: &JS_Schema, args: &Vec<JS_AST>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":181},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                let mut default: Option<$t> = None;","highlight_start":1,"highlight_end":52},{"text":"                let mut default_str: Option<String> = None;","highlight_start":1,"highlight_end":60},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if args.len() > 0 {","highlight_start":1,"highlight_end":36},{"text":"                    match &args[0] {","highlight_start":1,"highlight_end":37},{"text":"                        JS_AST::object { properties } => {","highlight_start":1,"highlight_end":59},{"text":"                            for (key, value) in properties.iter() {","highlight_start":1,"highlight_end":68},{"text":"                                match idl.get_str(key).trim() {","highlight_start":1,"highlight_end":64},{"text":"                                    \"default\" => {","highlight_start":1,"highlight_end":51},{"text":"                                        match value {","highlight_start":1,"highlight_end":54},{"text":"                                            JS_AST::number { addr } => {","highlight_start":1,"highlight_end":73},{"text":"                                                let trimmed = idl.get_str(addr).trim();","highlight_start":1,"highlight_end":88},{"text":"                                                match trimmed.parse::<$t>() {","highlight_start":1,"highlight_end":78},{"text":"                                                    Ok(x) => {","highlight_start":1,"highlight_end":63},{"text":"                                                        default_str = Some(String::from(trimmed));","highlight_start":1,"highlight_end":99},{"text":"                                                        default = Some(x);","highlight_start":1,"highlight_end":75},{"text":"                                                    },","highlight_start":1,"highlight_end":55},{"text":"                                                    Err(_e) => {  }","highlight_start":1,"highlight_end":68},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            },","highlight_start":1,"highlight_end":47},{"text":"                                            _ => { }","highlight_start":1,"highlight_end":53},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    _ => { }","highlight_start":1,"highlight_end":45},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { }","highlight_start":1,"highlight_end":33},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(x) = default {","highlight_start":1,"highlight_end":43},{"text":"                    schema_data.push(1);","highlight_start":1,"highlight_end":41},{"text":"                    schema_data.extend_from_slice(&(x as $t).to_be_bytes());","highlight_start":1,"highlight_end":77},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    schema_data.push(0);","highlight_start":1,"highlight_end":41},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn default_value<'default>(_depth: usize, addr: usize, schema: &'default Vec<NP_Parsed_Schema>) -> Option<Self> {","highlight_start":1,"highlight_end":126},{"text":"                <$t>::np_get_default(addr, &schema)","highlight_start":1,"highlight_end":52},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"            fn set_value<'set>(cursor: NP_Cursor, memory: &'set NP_Memory, value: Self) -> Result<NP_Cursor, NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":146},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut value_address = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if value_address != 0 { // existing value, replace","highlight_start":1,"highlight_end":67},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let write_bytes = memory.write_bytes();","highlight_start":1,"highlight_end":60},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    // overwrite existing values in buffer","highlight_start":1,"highlight_end":59},{"text":"                    for x in 0..bytes.len() {","highlight_start":1,"highlight_end":46},{"text":"                        write_bytes[value_address + x] = bytes[x];","highlight_start":1,"highlight_end":67},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                } else { // new value","highlight_start":1,"highlight_end":38},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    value_address = memory.malloc_borrow(&bytes)?;","highlight_start":1,"highlight_end":67},{"text":"                    cursor.get_value_mut(memory).set_addr_value(value_address as u32);","highlight_start":1,"highlight_end":87},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn into_value(cursor: &NP_Cursor, memory: &'value NP_Memory) -> Result<Option<Self>, NP_Error> where Self: Sized {","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let value_addr = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":70},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                // empty value","highlight_start":1,"highlight_end":31},{"text":"                if value_addr == 0 {","highlight_start":1,"highlight_end":37},{"text":"                    return Ok(None);","highlight_start":1,"highlight_end":37},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let read_memory = memory.read_bytes();","highlight_start":1,"highlight_end":55},{"text":"                let mut be_bytes = <$t>::default().to_be_bytes();","highlight_start":1,"highlight_end":66},{"text":"                for x in 0..be_bytes.len() {","highlight_start":1,"highlight_end":45},{"text":"                    be_bytes[x] = read_memory[value_addr + x];","highlight_start":1,"highlight_end":63},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match $numType {","highlight_start":1,"highlight_end":33},{"text":"                    NP_NumType::signed => {","highlight_start":1,"highlight_end":44},{"text":"                        be_bytes[0] = to_signed(be_bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(Some(<$t>::from_be_bytes(be_bytes)))","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn to_json(_depth:usize, cursor: &NP_Cursor, memory: &'value NP_Memory) -> NP_JSON {","highlight_start":1,"highlight_end":97},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match Self::into_value(cursor, memory) {","highlight_start":1,"highlight_end":57},{"text":"                    Ok(x) => {","highlight_start":1,"highlight_end":31},{"text":"                        match x {","highlight_start":1,"highlight_end":34},{"text":"                            Some(y) => {","highlight_start":1,"highlight_end":41},{"text":"                                match $numType {","highlight_start":1,"highlight_end":49},{"text":"                                    NP_NumType::floating => NP_JSON::Float(y as f64),","highlight_start":1,"highlight_end":86},{"text":"                                    _ => NP_JSON::Integer(y as i64)","highlight_start":1,"highlight_end":68},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            },","highlight_start":1,"highlight_end":31},{"text":"                            None => {","highlight_start":1,"highlight_end":38},{"text":"                                match <$t>::default_value(0, cursor.schema_addr, &memory.get_schemas()) {","highlight_start":1,"highlight_end":106},{"text":"                                    Some(v) => {","highlight_start":1,"highlight_end":49},{"text":"                                        match $numType {","highlight_start":1,"highlight_end":57},{"text":"                                            NP_NumType::floating => { NP_JSON::Float(v as f64) },","highlight_start":1,"highlight_end":98},{"text":"                                            _ => { NP_JSON::Integer(v as i64) }","highlight_start":1,"highlight_end":80},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    None => NP_JSON::Null","highlight_start":1,"highlight_end":58},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    Err(_e) => {","highlight_start":1,"highlight_end":33},{"text":"                        NP_JSON::Null","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn get_size(_depth:usize, cursor: &NP_Cursor, memory: &NP_Memory) -> Result<usize, NP_Error> {","highlight_start":1,"highlight_end":107},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if c_value().get_addr_value() == 0 {","highlight_start":1,"highlight_end":53},{"text":"                    Ok(0) ","highlight_start":1,"highlight_end":27},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Ok(core::mem::size_of::<Self>())","highlight_start":1,"highlight_end":53},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_json_to_schema(mut schema: Vec<NP_Parsed_Schema>, json_schema: &Box<NP_JSON>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":160},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"                match json_schema[\"default\"] {","highlight_start":1,"highlight_end":47},{"text":"                    NP_JSON::Float(x) => {","highlight_start":1,"highlight_end":43},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Integer(x) => {","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {","highlight_start":1,"highlight_end":27},{"text":"                        schema_data.push(0);","highlight_start":1,"highlight_end":45},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_bytes_to_schema(mut schema: Vec<NP_Parsed_Schema>, address: usize, bytes: &[u8]) -> (bool, Vec<NP_Parsed_Schema>) {","highlight_start":1,"highlight_end":136},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"                (schema[schema.len() - 1].sortable, schema)","highlight_start":1,"highlight_end":60},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/numbers.rs:184:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m184\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                let use_schema = NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m464\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mnoproto_number!(i8,    \"int8\",  \"i8\", NP_TypeKeys::Int8  , NP_NumType::signed);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/numbers.rs","byte_start":7371,"byte_end":7387,"line_start":184,"line_end":184,"column_start":34,"column_end":50,"is_primary":true,"text":[{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":34,"highlight_end":50}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/pointer/numbers.rs","byte_start":20875,"byte_end":20954,"line_start":465,"line_end":465,"column_start":1,"column_end":80,"is_primary":false,"text":[{"text":"noproto_number!(i16,  \"int16\", \"i16\", NP_TypeKeys::Int16 , NP_NumType::signed);","highlight_start":1,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"noproto_number!","def_site_span":{"file_name":"src/pointer/numbers.rs","byte_start":2213,"byte_end":20774,"line_start":67,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! noproto_number {","highlight_start":1,"highlight_end":30},{"text":"    ($t:ty, $str1: tt, $str2: tt, $tkey: expr, $numType: expr) => {","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> super::NP_Scalar<'value> for $t {","highlight_start":1,"highlight_end":55},{"text":"            fn schema_default(_schema: &NP_Parsed_Schema) -> Option<Self> where Self: Sized {","highlight_start":1,"highlight_end":94},{"text":"                Some(Self::default())","highlight_start":1,"highlight_end":38},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn np_max_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MAX)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn np_min_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MIN)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> NP_Value<'value> for $t {","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn type_idx() -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":75},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn self_type_idx(&self) -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":85},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn set_from_json<'set>(_depth: usize, _apply_null: bool, cursor: NP_Cursor, memory: &'set NP_Memory, value: &Box<NP_JSON>) -> Result<(), NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":186},{"text":"                match **value {","highlight_start":1,"highlight_end":32},{"text":"                    NP_JSON::Integer(int) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, int as $t)?;","highlight_start":1,"highlight_end":69},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Float(float) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, float as $t)?;","highlight_start":1,"highlight_end":71},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_json(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<NP_JSON, NP_Error> {","highlight_start":1,"highlight_end":108},{"text":"                let mut schema_json = JSMAP::new();","highlight_start":1,"highlight_end":52},{"text":"                schema_json.insert(\"type\".to_owned(), NP_JSON::String(Self::type_idx().0.to_string()));","highlight_start":1,"highlight_end":104},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    let default_val = default;","highlight_start":1,"highlight_end":47},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::unsigned => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::floating => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Float(default_val as f64));","highlight_start":1,"highlight_end":106},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                    ","highlight_start":1,"highlight_end":21},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                Ok(NP_JSON::Dictionary(schema_json))","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_idl(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<String, NP_Error> {","highlight_start":1,"highlight_end":106},{"text":"                let mut result = String::from($str2);","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    result.push_str(\"({default: \");","highlight_start":1,"highlight_end":52},{"text":"                    result.push_str(default.to_string().as_str());","highlight_start":1,"highlight_end":67},{"text":"                    result.push_str(\"})\");","highlight_start":1,"highlight_end":43},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    result.push_str(\"()\");","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(result)","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn from_idl_to_schema(mut schema: Vec<NP_Parsed_Schema>, _name: &str, idl: &JS_Schema, args: &Vec<JS_AST>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":181},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                let mut default: Option<$t> = None;","highlight_start":1,"highlight_end":52},{"text":"                let mut default_str: Option<String> = None;","highlight_start":1,"highlight_end":60},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if args.len() > 0 {","highlight_start":1,"highlight_end":36},{"text":"                    match &args[0] {","highlight_start":1,"highlight_end":37},{"text":"                        JS_AST::object { properties } => {","highlight_start":1,"highlight_end":59},{"text":"                            for (key, value) in properties.iter() {","highlight_start":1,"highlight_end":68},{"text":"                                match idl.get_str(key).trim() {","highlight_start":1,"highlight_end":64},{"text":"                                    \"default\" => {","highlight_start":1,"highlight_end":51},{"text":"                                        match value {","highlight_start":1,"highlight_end":54},{"text":"                                            JS_AST::number { addr } => {","highlight_start":1,"highlight_end":73},{"text":"                                                let trimmed = idl.get_str(addr).trim();","highlight_start":1,"highlight_end":88},{"text":"                                                match trimmed.parse::<$t>() {","highlight_start":1,"highlight_end":78},{"text":"                                                    Ok(x) => {","highlight_start":1,"highlight_end":63},{"text":"                                                        default_str = Some(String::from(trimmed));","highlight_start":1,"highlight_end":99},{"text":"                                                        default = Some(x);","highlight_start":1,"highlight_end":75},{"text":"                                                    },","highlight_start":1,"highlight_end":55},{"text":"                                                    Err(_e) => {  }","highlight_start":1,"highlight_end":68},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            },","highlight_start":1,"highlight_end":47},{"text":"                                            _ => { }","highlight_start":1,"highlight_end":53},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    _ => { }","highlight_start":1,"highlight_end":45},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { }","highlight_start":1,"highlight_end":33},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(x) = default {","highlight_start":1,"highlight_end":43},{"text":"                    schema_data.push(1);","highlight_start":1,"highlight_end":41},{"text":"                    schema_data.extend_from_slice(&(x as $t).to_be_bytes());","highlight_start":1,"highlight_end":77},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    schema_data.push(0);","highlight_start":1,"highlight_end":41},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn default_value<'default>(_depth: usize, addr: usize, schema: &'default Vec<NP_Parsed_Schema>) -> Option<Self> {","highlight_start":1,"highlight_end":126},{"text":"                <$t>::np_get_default(addr, &schema)","highlight_start":1,"highlight_end":52},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"            fn set_value<'set>(cursor: NP_Cursor, memory: &'set NP_Memory, value: Self) -> Result<NP_Cursor, NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":146},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut value_address = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if value_address != 0 { // existing value, replace","highlight_start":1,"highlight_end":67},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let write_bytes = memory.write_bytes();","highlight_start":1,"highlight_end":60},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    // overwrite existing values in buffer","highlight_start":1,"highlight_end":59},{"text":"                    for x in 0..bytes.len() {","highlight_start":1,"highlight_end":46},{"text":"                        write_bytes[value_address + x] = bytes[x];","highlight_start":1,"highlight_end":67},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                } else { // new value","highlight_start":1,"highlight_end":38},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    value_address = memory.malloc_borrow(&bytes)?;","highlight_start":1,"highlight_end":67},{"text":"                    cursor.get_value_mut(memory).set_addr_value(value_address as u32);","highlight_start":1,"highlight_end":87},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn into_value(cursor: &NP_Cursor, memory: &'value NP_Memory) -> Result<Option<Self>, NP_Error> where Self: Sized {","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let value_addr = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":70},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                // empty value","highlight_start":1,"highlight_end":31},{"text":"                if value_addr == 0 {","highlight_start":1,"highlight_end":37},{"text":"                    return Ok(None);","highlight_start":1,"highlight_end":37},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let read_memory = memory.read_bytes();","highlight_start":1,"highlight_end":55},{"text":"                let mut be_bytes = <$t>::default().to_be_bytes();","highlight_start":1,"highlight_end":66},{"text":"                for x in 0..be_bytes.len() {","highlight_start":1,"highlight_end":45},{"text":"                    be_bytes[x] = read_memory[value_addr + x];","highlight_start":1,"highlight_end":63},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match $numType {","highlight_start":1,"highlight_end":33},{"text":"                    NP_NumType::signed => {","highlight_start":1,"highlight_end":44},{"text":"                        be_bytes[0] = to_signed(be_bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(Some(<$t>::from_be_bytes(be_bytes)))","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn to_json(_depth:usize, cursor: &NP_Cursor, memory: &'value NP_Memory) -> NP_JSON {","highlight_start":1,"highlight_end":97},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match Self::into_value(cursor, memory) {","highlight_start":1,"highlight_end":57},{"text":"                    Ok(x) => {","highlight_start":1,"highlight_end":31},{"text":"                        match x {","highlight_start":1,"highlight_end":34},{"text":"                            Some(y) => {","highlight_start":1,"highlight_end":41},{"text":"                                match $numType {","highlight_start":1,"highlight_end":49},{"text":"                                    NP_NumType::floating => NP_JSON::Float(y as f64),","highlight_start":1,"highlight_end":86},{"text":"                                    _ => NP_JSON::Integer(y as i64)","highlight_start":1,"highlight_end":68},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            },","highlight_start":1,"highlight_end":31},{"text":"                            None => {","highlight_start":1,"highlight_end":38},{"text":"                                match <$t>::default_value(0, cursor.schema_addr, &memory.get_schemas()) {","highlight_start":1,"highlight_end":106},{"text":"                                    Some(v) => {","highlight_start":1,"highlight_end":49},{"text":"                                        match $numType {","highlight_start":1,"highlight_end":57},{"text":"                                            NP_NumType::floating => { NP_JSON::Float(v as f64) },","highlight_start":1,"highlight_end":98},{"text":"                                            _ => { NP_JSON::Integer(v as i64) }","highlight_start":1,"highlight_end":80},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    None => NP_JSON::Null","highlight_start":1,"highlight_end":58},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    Err(_e) => {","highlight_start":1,"highlight_end":33},{"text":"                        NP_JSON::Null","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn get_size(_depth:usize, cursor: &NP_Cursor, memory: &NP_Memory) -> Result<usize, NP_Error> {","highlight_start":1,"highlight_end":107},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if c_value().get_addr_value() == 0 {","highlight_start":1,"highlight_end":53},{"text":"                    Ok(0) ","highlight_start":1,"highlight_end":27},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Ok(core::mem::size_of::<Self>())","highlight_start":1,"highlight_end":53},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_json_to_schema(mut schema: Vec<NP_Parsed_Schema>, json_schema: &Box<NP_JSON>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":160},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"                match json_schema[\"default\"] {","highlight_start":1,"highlight_end":47},{"text":"                    NP_JSON::Float(x) => {","highlight_start":1,"highlight_end":43},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Integer(x) => {","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {","highlight_start":1,"highlight_end":27},{"text":"                        schema_data.push(0);","highlight_start":1,"highlight_end":45},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_bytes_to_schema(mut schema: Vec<NP_Parsed_Schema>, address: usize, bytes: &[u8]) -> (bool, Vec<NP_Parsed_Schema>) {","highlight_start":1,"highlight_end":136},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"                (schema[schema.len() - 1].sortable, schema)","highlight_start":1,"highlight_end":60},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/numbers.rs:184:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m184\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                let use_schema = NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m465\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mnoproto_number!(i16,  \"int16\", \"i16\", NP_TypeKeys::Int16 , NP_NumType::signed);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/numbers.rs","byte_start":7371,"byte_end":7387,"line_start":184,"line_end":184,"column_start":34,"column_end":50,"is_primary":true,"text":[{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":34,"highlight_end":50}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/pointer/numbers.rs","byte_start":20955,"byte_end":21034,"line_start":466,"line_end":466,"column_start":1,"column_end":80,"is_primary":false,"text":[{"text":"noproto_number!(i32,  \"int32\", \"i32\", NP_TypeKeys::Int32 , NP_NumType::signed);","highlight_start":1,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"noproto_number!","def_site_span":{"file_name":"src/pointer/numbers.rs","byte_start":2213,"byte_end":20774,"line_start":67,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! noproto_number {","highlight_start":1,"highlight_end":30},{"text":"    ($t:ty, $str1: tt, $str2: tt, $tkey: expr, $numType: expr) => {","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> super::NP_Scalar<'value> for $t {","highlight_start":1,"highlight_end":55},{"text":"            fn schema_default(_schema: &NP_Parsed_Schema) -> Option<Self> where Self: Sized {","highlight_start":1,"highlight_end":94},{"text":"                Some(Self::default())","highlight_start":1,"highlight_end":38},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn np_max_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MAX)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn np_min_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MIN)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> NP_Value<'value> for $t {","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn type_idx() -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":75},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn self_type_idx(&self) -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":85},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn set_from_json<'set>(_depth: usize, _apply_null: bool, cursor: NP_Cursor, memory: &'set NP_Memory, value: &Box<NP_JSON>) -> Result<(), NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":186},{"text":"                match **value {","highlight_start":1,"highlight_end":32},{"text":"                    NP_JSON::Integer(int) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, int as $t)?;","highlight_start":1,"highlight_end":69},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Float(float) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, float as $t)?;","highlight_start":1,"highlight_end":71},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_json(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<NP_JSON, NP_Error> {","highlight_start":1,"highlight_end":108},{"text":"                let mut schema_json = JSMAP::new();","highlight_start":1,"highlight_end":52},{"text":"                schema_json.insert(\"type\".to_owned(), NP_JSON::String(Self::type_idx().0.to_string()));","highlight_start":1,"highlight_end":104},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    let default_val = default;","highlight_start":1,"highlight_end":47},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::unsigned => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::floating => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Float(default_val as f64));","highlight_start":1,"highlight_end":106},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                    ","highlight_start":1,"highlight_end":21},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                Ok(NP_JSON::Dictionary(schema_json))","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_idl(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<String, NP_Error> {","highlight_start":1,"highlight_end":106},{"text":"                let mut result = String::from($str2);","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    result.push_str(\"({default: \");","highlight_start":1,"highlight_end":52},{"text":"                    result.push_str(default.to_string().as_str());","highlight_start":1,"highlight_end":67},{"text":"                    result.push_str(\"})\");","highlight_start":1,"highlight_end":43},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    result.push_str(\"()\");","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(result)","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn from_idl_to_schema(mut schema: Vec<NP_Parsed_Schema>, _name: &str, idl: &JS_Schema, args: &Vec<JS_AST>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":181},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                let mut default: Option<$t> = None;","highlight_start":1,"highlight_end":52},{"text":"                let mut default_str: Option<String> = None;","highlight_start":1,"highlight_end":60},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if args.len() > 0 {","highlight_start":1,"highlight_end":36},{"text":"                    match &args[0] {","highlight_start":1,"highlight_end":37},{"text":"                        JS_AST::object { properties } => {","highlight_start":1,"highlight_end":59},{"text":"                            for (key, value) in properties.iter() {","highlight_start":1,"highlight_end":68},{"text":"                                match idl.get_str(key).trim() {","highlight_start":1,"highlight_end":64},{"text":"                                    \"default\" => {","highlight_start":1,"highlight_end":51},{"text":"                                        match value {","highlight_start":1,"highlight_end":54},{"text":"                                            JS_AST::number { addr } => {","highlight_start":1,"highlight_end":73},{"text":"                                                let trimmed = idl.get_str(addr).trim();","highlight_start":1,"highlight_end":88},{"text":"                                                match trimmed.parse::<$t>() {","highlight_start":1,"highlight_end":78},{"text":"                                                    Ok(x) => {","highlight_start":1,"highlight_end":63},{"text":"                                                        default_str = Some(String::from(trimmed));","highlight_start":1,"highlight_end":99},{"text":"                                                        default = Some(x);","highlight_start":1,"highlight_end":75},{"text":"                                                    },","highlight_start":1,"highlight_end":55},{"text":"                                                    Err(_e) => {  }","highlight_start":1,"highlight_end":68},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            },","highlight_start":1,"highlight_end":47},{"text":"                                            _ => { }","highlight_start":1,"highlight_end":53},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    _ => { }","highlight_start":1,"highlight_end":45},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { }","highlight_start":1,"highlight_end":33},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(x) = default {","highlight_start":1,"highlight_end":43},{"text":"                    schema_data.push(1);","highlight_start":1,"highlight_end":41},{"text":"                    schema_data.extend_from_slice(&(x as $t).to_be_bytes());","highlight_start":1,"highlight_end":77},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    schema_data.push(0);","highlight_start":1,"highlight_end":41},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn default_value<'default>(_depth: usize, addr: usize, schema: &'default Vec<NP_Parsed_Schema>) -> Option<Self> {","highlight_start":1,"highlight_end":126},{"text":"                <$t>::np_get_default(addr, &schema)","highlight_start":1,"highlight_end":52},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"            fn set_value<'set>(cursor: NP_Cursor, memory: &'set NP_Memory, value: Self) -> Result<NP_Cursor, NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":146},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut value_address = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if value_address != 0 { // existing value, replace","highlight_start":1,"highlight_end":67},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let write_bytes = memory.write_bytes();","highlight_start":1,"highlight_end":60},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    // overwrite existing values in buffer","highlight_start":1,"highlight_end":59},{"text":"                    for x in 0..bytes.len() {","highlight_start":1,"highlight_end":46},{"text":"                        write_bytes[value_address + x] = bytes[x];","highlight_start":1,"highlight_end":67},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                } else { // new value","highlight_start":1,"highlight_end":38},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    value_address = memory.malloc_borrow(&bytes)?;","highlight_start":1,"highlight_end":67},{"text":"                    cursor.get_value_mut(memory).set_addr_value(value_address as u32);","highlight_start":1,"highlight_end":87},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn into_value(cursor: &NP_Cursor, memory: &'value NP_Memory) -> Result<Option<Self>, NP_Error> where Self: Sized {","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let value_addr = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":70},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                // empty value","highlight_start":1,"highlight_end":31},{"text":"                if value_addr == 0 {","highlight_start":1,"highlight_end":37},{"text":"                    return Ok(None);","highlight_start":1,"highlight_end":37},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let read_memory = memory.read_bytes();","highlight_start":1,"highlight_end":55},{"text":"                let mut be_bytes = <$t>::default().to_be_bytes();","highlight_start":1,"highlight_end":66},{"text":"                for x in 0..be_bytes.len() {","highlight_start":1,"highlight_end":45},{"text":"                    be_bytes[x] = read_memory[value_addr + x];","highlight_start":1,"highlight_end":63},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match $numType {","highlight_start":1,"highlight_end":33},{"text":"                    NP_NumType::signed => {","highlight_start":1,"highlight_end":44},{"text":"                        be_bytes[0] = to_signed(be_bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(Some(<$t>::from_be_bytes(be_bytes)))","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn to_json(_depth:usize, cursor: &NP_Cursor, memory: &'value NP_Memory) -> NP_JSON {","highlight_start":1,"highlight_end":97},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match Self::into_value(cursor, memory) {","highlight_start":1,"highlight_end":57},{"text":"                    Ok(x) => {","highlight_start":1,"highlight_end":31},{"text":"                        match x {","highlight_start":1,"highlight_end":34},{"text":"                            Some(y) => {","highlight_start":1,"highlight_end":41},{"text":"                                match $numType {","highlight_start":1,"highlight_end":49},{"text":"                                    NP_NumType::floating => NP_JSON::Float(y as f64),","highlight_start":1,"highlight_end":86},{"text":"                                    _ => NP_JSON::Integer(y as i64)","highlight_start":1,"highlight_end":68},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            },","highlight_start":1,"highlight_end":31},{"text":"                            None => {","highlight_start":1,"highlight_end":38},{"text":"                                match <$t>::default_value(0, cursor.schema_addr, &memory.get_schemas()) {","highlight_start":1,"highlight_end":106},{"text":"                                    Some(v) => {","highlight_start":1,"highlight_end":49},{"text":"                                        match $numType {","highlight_start":1,"highlight_end":57},{"text":"                                            NP_NumType::floating => { NP_JSON::Float(v as f64) },","highlight_start":1,"highlight_end":98},{"text":"                                            _ => { NP_JSON::Integer(v as i64) }","highlight_start":1,"highlight_end":80},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    None => NP_JSON::Null","highlight_start":1,"highlight_end":58},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    Err(_e) => {","highlight_start":1,"highlight_end":33},{"text":"                        NP_JSON::Null","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn get_size(_depth:usize, cursor: &NP_Cursor, memory: &NP_Memory) -> Result<usize, NP_Error> {","highlight_start":1,"highlight_end":107},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if c_value().get_addr_value() == 0 {","highlight_start":1,"highlight_end":53},{"text":"                    Ok(0) ","highlight_start":1,"highlight_end":27},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Ok(core::mem::size_of::<Self>())","highlight_start":1,"highlight_end":53},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_json_to_schema(mut schema: Vec<NP_Parsed_Schema>, json_schema: &Box<NP_JSON>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":160},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"                match json_schema[\"default\"] {","highlight_start":1,"highlight_end":47},{"text":"                    NP_JSON::Float(x) => {","highlight_start":1,"highlight_end":43},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Integer(x) => {","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {","highlight_start":1,"highlight_end":27},{"text":"                        schema_data.push(0);","highlight_start":1,"highlight_end":45},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_bytes_to_schema(mut schema: Vec<NP_Parsed_Schema>, address: usize, bytes: &[u8]) -> (bool, Vec<NP_Parsed_Schema>) {","highlight_start":1,"highlight_end":136},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"                (schema[schema.len() - 1].sortable, schema)","highlight_start":1,"highlight_end":60},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/numbers.rs:184:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m184\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                let use_schema = NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m466\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mnoproto_number!(i32,  \"int32\", \"i32\", NP_TypeKeys::Int32 , NP_NumType::signed);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/numbers.rs","byte_start":7371,"byte_end":7387,"line_start":184,"line_end":184,"column_start":34,"column_end":50,"is_primary":true,"text":[{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":34,"highlight_end":50}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/pointer/numbers.rs","byte_start":21035,"byte_end":21114,"line_start":467,"line_end":467,"column_start":1,"column_end":80,"is_primary":false,"text":[{"text":"noproto_number!(i64,  \"int64\", \"i64\", NP_TypeKeys::Int64 , NP_NumType::signed);","highlight_start":1,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"noproto_number!","def_site_span":{"file_name":"src/pointer/numbers.rs","byte_start":2213,"byte_end":20774,"line_start":67,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! noproto_number {","highlight_start":1,"highlight_end":30},{"text":"    ($t:ty, $str1: tt, $str2: tt, $tkey: expr, $numType: expr) => {","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> super::NP_Scalar<'value> for $t {","highlight_start":1,"highlight_end":55},{"text":"            fn schema_default(_schema: &NP_Parsed_Schema) -> Option<Self> where Self: Sized {","highlight_start":1,"highlight_end":94},{"text":"                Some(Self::default())","highlight_start":1,"highlight_end":38},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn np_max_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MAX)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn np_min_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MIN)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> NP_Value<'value> for $t {","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn type_idx() -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":75},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn self_type_idx(&self) -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":85},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn set_from_json<'set>(_depth: usize, _apply_null: bool, cursor: NP_Cursor, memory: &'set NP_Memory, value: &Box<NP_JSON>) -> Result<(), NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":186},{"text":"                match **value {","highlight_start":1,"highlight_end":32},{"text":"                    NP_JSON::Integer(int) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, int as $t)?;","highlight_start":1,"highlight_end":69},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Float(float) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, float as $t)?;","highlight_start":1,"highlight_end":71},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_json(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<NP_JSON, NP_Error> {","highlight_start":1,"highlight_end":108},{"text":"                let mut schema_json = JSMAP::new();","highlight_start":1,"highlight_end":52},{"text":"                schema_json.insert(\"type\".to_owned(), NP_JSON::String(Self::type_idx().0.to_string()));","highlight_start":1,"highlight_end":104},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    let default_val = default;","highlight_start":1,"highlight_end":47},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::unsigned => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::floating => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Float(default_val as f64));","highlight_start":1,"highlight_end":106},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                    ","highlight_start":1,"highlight_end":21},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                Ok(NP_JSON::Dictionary(schema_json))","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_idl(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<String, NP_Error> {","highlight_start":1,"highlight_end":106},{"text":"                let mut result = String::from($str2);","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    result.push_str(\"({default: \");","highlight_start":1,"highlight_end":52},{"text":"                    result.push_str(default.to_string().as_str());","highlight_start":1,"highlight_end":67},{"text":"                    result.push_str(\"})\");","highlight_start":1,"highlight_end":43},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    result.push_str(\"()\");","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(result)","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn from_idl_to_schema(mut schema: Vec<NP_Parsed_Schema>, _name: &str, idl: &JS_Schema, args: &Vec<JS_AST>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":181},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                let mut default: Option<$t> = None;","highlight_start":1,"highlight_end":52},{"text":"                let mut default_str: Option<String> = None;","highlight_start":1,"highlight_end":60},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if args.len() > 0 {","highlight_start":1,"highlight_end":36},{"text":"                    match &args[0] {","highlight_start":1,"highlight_end":37},{"text":"                        JS_AST::object { properties } => {","highlight_start":1,"highlight_end":59},{"text":"                            for (key, value) in properties.iter() {","highlight_start":1,"highlight_end":68},{"text":"                                match idl.get_str(key).trim() {","highlight_start":1,"highlight_end":64},{"text":"                                    \"default\" => {","highlight_start":1,"highlight_end":51},{"text":"                                        match value {","highlight_start":1,"highlight_end":54},{"text":"                                            JS_AST::number { addr } => {","highlight_start":1,"highlight_end":73},{"text":"                                                let trimmed = idl.get_str(addr).trim();","highlight_start":1,"highlight_end":88},{"text":"                                                match trimmed.parse::<$t>() {","highlight_start":1,"highlight_end":78},{"text":"                                                    Ok(x) => {","highlight_start":1,"highlight_end":63},{"text":"                                                        default_str = Some(String::from(trimmed));","highlight_start":1,"highlight_end":99},{"text":"                                                        default = Some(x);","highlight_start":1,"highlight_end":75},{"text":"                                                    },","highlight_start":1,"highlight_end":55},{"text":"                                                    Err(_e) => {  }","highlight_start":1,"highlight_end":68},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            },","highlight_start":1,"highlight_end":47},{"text":"                                            _ => { }","highlight_start":1,"highlight_end":53},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    _ => { }","highlight_start":1,"highlight_end":45},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { }","highlight_start":1,"highlight_end":33},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(x) = default {","highlight_start":1,"highlight_end":43},{"text":"                    schema_data.push(1);","highlight_start":1,"highlight_end":41},{"text":"                    schema_data.extend_from_slice(&(x as $t).to_be_bytes());","highlight_start":1,"highlight_end":77},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    schema_data.push(0);","highlight_start":1,"highlight_end":41},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn default_value<'default>(_depth: usize, addr: usize, schema: &'default Vec<NP_Parsed_Schema>) -> Option<Self> {","highlight_start":1,"highlight_end":126},{"text":"                <$t>::np_get_default(addr, &schema)","highlight_start":1,"highlight_end":52},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"            fn set_value<'set>(cursor: NP_Cursor, memory: &'set NP_Memory, value: Self) -> Result<NP_Cursor, NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":146},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut value_address = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if value_address != 0 { // existing value, replace","highlight_start":1,"highlight_end":67},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let write_bytes = memory.write_bytes();","highlight_start":1,"highlight_end":60},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    // overwrite existing values in buffer","highlight_start":1,"highlight_end":59},{"text":"                    for x in 0..bytes.len() {","highlight_start":1,"highlight_end":46},{"text":"                        write_bytes[value_address + x] = bytes[x];","highlight_start":1,"highlight_end":67},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                } else { // new value","highlight_start":1,"highlight_end":38},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    value_address = memory.malloc_borrow(&bytes)?;","highlight_start":1,"highlight_end":67},{"text":"                    cursor.get_value_mut(memory).set_addr_value(value_address as u32);","highlight_start":1,"highlight_end":87},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn into_value(cursor: &NP_Cursor, memory: &'value NP_Memory) -> Result<Option<Self>, NP_Error> where Self: Sized {","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let value_addr = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":70},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                // empty value","highlight_start":1,"highlight_end":31},{"text":"                if value_addr == 0 {","highlight_start":1,"highlight_end":37},{"text":"                    return Ok(None);","highlight_start":1,"highlight_end":37},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let read_memory = memory.read_bytes();","highlight_start":1,"highlight_end":55},{"text":"                let mut be_bytes = <$t>::default().to_be_bytes();","highlight_start":1,"highlight_end":66},{"text":"                for x in 0..be_bytes.len() {","highlight_start":1,"highlight_end":45},{"text":"                    be_bytes[x] = read_memory[value_addr + x];","highlight_start":1,"highlight_end":63},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match $numType {","highlight_start":1,"highlight_end":33},{"text":"                    NP_NumType::signed => {","highlight_start":1,"highlight_end":44},{"text":"                        be_bytes[0] = to_signed(be_bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(Some(<$t>::from_be_bytes(be_bytes)))","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn to_json(_depth:usize, cursor: &NP_Cursor, memory: &'value NP_Memory) -> NP_JSON {","highlight_start":1,"highlight_end":97},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match Self::into_value(cursor, memory) {","highlight_start":1,"highlight_end":57},{"text":"                    Ok(x) => {","highlight_start":1,"highlight_end":31},{"text":"                        match x {","highlight_start":1,"highlight_end":34},{"text":"                            Some(y) => {","highlight_start":1,"highlight_end":41},{"text":"                                match $numType {","highlight_start":1,"highlight_end":49},{"text":"                                    NP_NumType::floating => NP_JSON::Float(y as f64),","highlight_start":1,"highlight_end":86},{"text":"                                    _ => NP_JSON::Integer(y as i64)","highlight_start":1,"highlight_end":68},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            },","highlight_start":1,"highlight_end":31},{"text":"                            None => {","highlight_start":1,"highlight_end":38},{"text":"                                match <$t>::default_value(0, cursor.schema_addr, &memory.get_schemas()) {","highlight_start":1,"highlight_end":106},{"text":"                                    Some(v) => {","highlight_start":1,"highlight_end":49},{"text":"                                        match $numType {","highlight_start":1,"highlight_end":57},{"text":"                                            NP_NumType::floating => { NP_JSON::Float(v as f64) },","highlight_start":1,"highlight_end":98},{"text":"                                            _ => { NP_JSON::Integer(v as i64) }","highlight_start":1,"highlight_end":80},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    None => NP_JSON::Null","highlight_start":1,"highlight_end":58},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    Err(_e) => {","highlight_start":1,"highlight_end":33},{"text":"                        NP_JSON::Null","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn get_size(_depth:usize, cursor: &NP_Cursor, memory: &NP_Memory) -> Result<usize, NP_Error> {","highlight_start":1,"highlight_end":107},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if c_value().get_addr_value() == 0 {","highlight_start":1,"highlight_end":53},{"text":"                    Ok(0) ","highlight_start":1,"highlight_end":27},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Ok(core::mem::size_of::<Self>())","highlight_start":1,"highlight_end":53},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_json_to_schema(mut schema: Vec<NP_Parsed_Schema>, json_schema: &Box<NP_JSON>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":160},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"                match json_schema[\"default\"] {","highlight_start":1,"highlight_end":47},{"text":"                    NP_JSON::Float(x) => {","highlight_start":1,"highlight_end":43},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Integer(x) => {","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {","highlight_start":1,"highlight_end":27},{"text":"                        schema_data.push(0);","highlight_start":1,"highlight_end":45},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_bytes_to_schema(mut schema: Vec<NP_Parsed_Schema>, address: usize, bytes: &[u8]) -> (bool, Vec<NP_Parsed_Schema>) {","highlight_start":1,"highlight_end":136},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"                (schema[schema.len() - 1].sortable, schema)","highlight_start":1,"highlight_end":60},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/numbers.rs:184:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m184\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                let use_schema = NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m467\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mnoproto_number!(i64,  \"int64\", \"i64\", NP_TypeKeys::Int64 , NP_NumType::signed);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/numbers.rs","byte_start":7371,"byte_end":7387,"line_start":184,"line_end":184,"column_start":34,"column_end":50,"is_primary":true,"text":[{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":34,"highlight_end":50}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/pointer/numbers.rs","byte_start":21137,"byte_end":21218,"line_start":470,"line_end":470,"column_start":1,"column_end":82,"is_primary":false,"text":[{"text":"noproto_number!(u8,   \"uint8\",  \"u8\", NP_TypeKeys::Uint8 , NP_NumType::unsigned);","highlight_start":1,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"noproto_number!","def_site_span":{"file_name":"src/pointer/numbers.rs","byte_start":2213,"byte_end":20774,"line_start":67,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! noproto_number {","highlight_start":1,"highlight_end":30},{"text":"    ($t:ty, $str1: tt, $str2: tt, $tkey: expr, $numType: expr) => {","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> super::NP_Scalar<'value> for $t {","highlight_start":1,"highlight_end":55},{"text":"            fn schema_default(_schema: &NP_Parsed_Schema) -> Option<Self> where Self: Sized {","highlight_start":1,"highlight_end":94},{"text":"                Some(Self::default())","highlight_start":1,"highlight_end":38},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn np_max_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MAX)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn np_min_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MIN)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> NP_Value<'value> for $t {","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn type_idx() -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":75},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn self_type_idx(&self) -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":85},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn set_from_json<'set>(_depth: usize, _apply_null: bool, cursor: NP_Cursor, memory: &'set NP_Memory, value: &Box<NP_JSON>) -> Result<(), NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":186},{"text":"                match **value {","highlight_start":1,"highlight_end":32},{"text":"                    NP_JSON::Integer(int) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, int as $t)?;","highlight_start":1,"highlight_end":69},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Float(float) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, float as $t)?;","highlight_start":1,"highlight_end":71},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_json(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<NP_JSON, NP_Error> {","highlight_start":1,"highlight_end":108},{"text":"                let mut schema_json = JSMAP::new();","highlight_start":1,"highlight_end":52},{"text":"                schema_json.insert(\"type\".to_owned(), NP_JSON::String(Self::type_idx().0.to_string()));","highlight_start":1,"highlight_end":104},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    let default_val = default;","highlight_start":1,"highlight_end":47},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::unsigned => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::floating => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Float(default_val as f64));","highlight_start":1,"highlight_end":106},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                    ","highlight_start":1,"highlight_end":21},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                Ok(NP_JSON::Dictionary(schema_json))","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_idl(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<String, NP_Error> {","highlight_start":1,"highlight_end":106},{"text":"                let mut result = String::from($str2);","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    result.push_str(\"({default: \");","highlight_start":1,"highlight_end":52},{"text":"                    result.push_str(default.to_string().as_str());","highlight_start":1,"highlight_end":67},{"text":"                    result.push_str(\"})\");","highlight_start":1,"highlight_end":43},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    result.push_str(\"()\");","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(result)","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn from_idl_to_schema(mut schema: Vec<NP_Parsed_Schema>, _name: &str, idl: &JS_Schema, args: &Vec<JS_AST>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":181},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                let mut default: Option<$t> = None;","highlight_start":1,"highlight_end":52},{"text":"                let mut default_str: Option<String> = None;","highlight_start":1,"highlight_end":60},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if args.len() > 0 {","highlight_start":1,"highlight_end":36},{"text":"                    match &args[0] {","highlight_start":1,"highlight_end":37},{"text":"                        JS_AST::object { properties } => {","highlight_start":1,"highlight_end":59},{"text":"                            for (key, value) in properties.iter() {","highlight_start":1,"highlight_end":68},{"text":"                                match idl.get_str(key).trim() {","highlight_start":1,"highlight_end":64},{"text":"                                    \"default\" => {","highlight_start":1,"highlight_end":51},{"text":"                                        match value {","highlight_start":1,"highlight_end":54},{"text":"                                            JS_AST::number { addr } => {","highlight_start":1,"highlight_end":73},{"text":"                                                let trimmed = idl.get_str(addr).trim();","highlight_start":1,"highlight_end":88},{"text":"                                                match trimmed.parse::<$t>() {","highlight_start":1,"highlight_end":78},{"text":"                                                    Ok(x) => {","highlight_start":1,"highlight_end":63},{"text":"                                                        default_str = Some(String::from(trimmed));","highlight_start":1,"highlight_end":99},{"text":"                                                        default = Some(x);","highlight_start":1,"highlight_end":75},{"text":"                                                    },","highlight_start":1,"highlight_end":55},{"text":"                                                    Err(_e) => {  }","highlight_start":1,"highlight_end":68},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            },","highlight_start":1,"highlight_end":47},{"text":"                                            _ => { }","highlight_start":1,"highlight_end":53},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    _ => { }","highlight_start":1,"highlight_end":45},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { }","highlight_start":1,"highlight_end":33},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(x) = default {","highlight_start":1,"highlight_end":43},{"text":"                    schema_data.push(1);","highlight_start":1,"highlight_end":41},{"text":"                    schema_data.extend_from_slice(&(x as $t).to_be_bytes());","highlight_start":1,"highlight_end":77},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    schema_data.push(0);","highlight_start":1,"highlight_end":41},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn default_value<'default>(_depth: usize, addr: usize, schema: &'default Vec<NP_Parsed_Schema>) -> Option<Self> {","highlight_start":1,"highlight_end":126},{"text":"                <$t>::np_get_default(addr, &schema)","highlight_start":1,"highlight_end":52},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"            fn set_value<'set>(cursor: NP_Cursor, memory: &'set NP_Memory, value: Self) -> Result<NP_Cursor, NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":146},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut value_address = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if value_address != 0 { // existing value, replace","highlight_start":1,"highlight_end":67},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let write_bytes = memory.write_bytes();","highlight_start":1,"highlight_end":60},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    // overwrite existing values in buffer","highlight_start":1,"highlight_end":59},{"text":"                    for x in 0..bytes.len() {","highlight_start":1,"highlight_end":46},{"text":"                        write_bytes[value_address + x] = bytes[x];","highlight_start":1,"highlight_end":67},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                } else { // new value","highlight_start":1,"highlight_end":38},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    value_address = memory.malloc_borrow(&bytes)?;","highlight_start":1,"highlight_end":67},{"text":"                    cursor.get_value_mut(memory).set_addr_value(value_address as u32);","highlight_start":1,"highlight_end":87},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn into_value(cursor: &NP_Cursor, memory: &'value NP_Memory) -> Result<Option<Self>, NP_Error> where Self: Sized {","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let value_addr = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":70},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                // empty value","highlight_start":1,"highlight_end":31},{"text":"                if value_addr == 0 {","highlight_start":1,"highlight_end":37},{"text":"                    return Ok(None);","highlight_start":1,"highlight_end":37},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let read_memory = memory.read_bytes();","highlight_start":1,"highlight_end":55},{"text":"                let mut be_bytes = <$t>::default().to_be_bytes();","highlight_start":1,"highlight_end":66},{"text":"                for x in 0..be_bytes.len() {","highlight_start":1,"highlight_end":45},{"text":"                    be_bytes[x] = read_memory[value_addr + x];","highlight_start":1,"highlight_end":63},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match $numType {","highlight_start":1,"highlight_end":33},{"text":"                    NP_NumType::signed => {","highlight_start":1,"highlight_end":44},{"text":"                        be_bytes[0] = to_signed(be_bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(Some(<$t>::from_be_bytes(be_bytes)))","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn to_json(_depth:usize, cursor: &NP_Cursor, memory: &'value NP_Memory) -> NP_JSON {","highlight_start":1,"highlight_end":97},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match Self::into_value(cursor, memory) {","highlight_start":1,"highlight_end":57},{"text":"                    Ok(x) => {","highlight_start":1,"highlight_end":31},{"text":"                        match x {","highlight_start":1,"highlight_end":34},{"text":"                            Some(y) => {","highlight_start":1,"highlight_end":41},{"text":"                                match $numType {","highlight_start":1,"highlight_end":49},{"text":"                                    NP_NumType::floating => NP_JSON::Float(y as f64),","highlight_start":1,"highlight_end":86},{"text":"                                    _ => NP_JSON::Integer(y as i64)","highlight_start":1,"highlight_end":68},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            },","highlight_start":1,"highlight_end":31},{"text":"                            None => {","highlight_start":1,"highlight_end":38},{"text":"                                match <$t>::default_value(0, cursor.schema_addr, &memory.get_schemas()) {","highlight_start":1,"highlight_end":106},{"text":"                                    Some(v) => {","highlight_start":1,"highlight_end":49},{"text":"                                        match $numType {","highlight_start":1,"highlight_end":57},{"text":"                                            NP_NumType::floating => { NP_JSON::Float(v as f64) },","highlight_start":1,"highlight_end":98},{"text":"                                            _ => { NP_JSON::Integer(v as i64) }","highlight_start":1,"highlight_end":80},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    None => NP_JSON::Null","highlight_start":1,"highlight_end":58},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    Err(_e) => {","highlight_start":1,"highlight_end":33},{"text":"                        NP_JSON::Null","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn get_size(_depth:usize, cursor: &NP_Cursor, memory: &NP_Memory) -> Result<usize, NP_Error> {","highlight_start":1,"highlight_end":107},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if c_value().get_addr_value() == 0 {","highlight_start":1,"highlight_end":53},{"text":"                    Ok(0) ","highlight_start":1,"highlight_end":27},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Ok(core::mem::size_of::<Self>())","highlight_start":1,"highlight_end":53},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_json_to_schema(mut schema: Vec<NP_Parsed_Schema>, json_schema: &Box<NP_JSON>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":160},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"                match json_schema[\"default\"] {","highlight_start":1,"highlight_end":47},{"text":"                    NP_JSON::Float(x) => {","highlight_start":1,"highlight_end":43},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Integer(x) => {","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {","highlight_start":1,"highlight_end":27},{"text":"                        schema_data.push(0);","highlight_start":1,"highlight_end":45},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_bytes_to_schema(mut schema: Vec<NP_Parsed_Schema>, address: usize, bytes: &[u8]) -> (bool, Vec<NP_Parsed_Schema>) {","highlight_start":1,"highlight_end":136},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"                (schema[schema.len() - 1].sortable, schema)","highlight_start":1,"highlight_end":60},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/numbers.rs:184:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m184\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                let use_schema = NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m470\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mnoproto_number!(u8,   \"uint8\",  \"u8\", NP_TypeKeys::Uint8 , NP_NumType::unsigned);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/numbers.rs","byte_start":7371,"byte_end":7387,"line_start":184,"line_end":184,"column_start":34,"column_end":50,"is_primary":true,"text":[{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":34,"highlight_end":50}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/pointer/numbers.rs","byte_start":21219,"byte_end":21300,"line_start":471,"line_end":471,"column_start":1,"column_end":82,"is_primary":false,"text":[{"text":"noproto_number!(u16, \"uint16\", \"u16\", NP_TypeKeys::Uint16, NP_NumType::unsigned);","highlight_start":1,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"noproto_number!","def_site_span":{"file_name":"src/pointer/numbers.rs","byte_start":2213,"byte_end":20774,"line_start":67,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! noproto_number {","highlight_start":1,"highlight_end":30},{"text":"    ($t:ty, $str1: tt, $str2: tt, $tkey: expr, $numType: expr) => {","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> super::NP_Scalar<'value> for $t {","highlight_start":1,"highlight_end":55},{"text":"            fn schema_default(_schema: &NP_Parsed_Schema) -> Option<Self> where Self: Sized {","highlight_start":1,"highlight_end":94},{"text":"                Some(Self::default())","highlight_start":1,"highlight_end":38},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn np_max_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MAX)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn np_min_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MIN)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> NP_Value<'value> for $t {","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn type_idx() -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":75},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn self_type_idx(&self) -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":85},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn set_from_json<'set>(_depth: usize, _apply_null: bool, cursor: NP_Cursor, memory: &'set NP_Memory, value: &Box<NP_JSON>) -> Result<(), NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":186},{"text":"                match **value {","highlight_start":1,"highlight_end":32},{"text":"                    NP_JSON::Integer(int) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, int as $t)?;","highlight_start":1,"highlight_end":69},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Float(float) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, float as $t)?;","highlight_start":1,"highlight_end":71},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_json(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<NP_JSON, NP_Error> {","highlight_start":1,"highlight_end":108},{"text":"                let mut schema_json = JSMAP::new();","highlight_start":1,"highlight_end":52},{"text":"                schema_json.insert(\"type\".to_owned(), NP_JSON::String(Self::type_idx().0.to_string()));","highlight_start":1,"highlight_end":104},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    let default_val = default;","highlight_start":1,"highlight_end":47},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::unsigned => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::floating => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Float(default_val as f64));","highlight_start":1,"highlight_end":106},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                    ","highlight_start":1,"highlight_end":21},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                Ok(NP_JSON::Dictionary(schema_json))","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_idl(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<String, NP_Error> {","highlight_start":1,"highlight_end":106},{"text":"                let mut result = String::from($str2);","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    result.push_str(\"({default: \");","highlight_start":1,"highlight_end":52},{"text":"                    result.push_str(default.to_string().as_str());","highlight_start":1,"highlight_end":67},{"text":"                    result.push_str(\"})\");","highlight_start":1,"highlight_end":43},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    result.push_str(\"()\");","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(result)","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn from_idl_to_schema(mut schema: Vec<NP_Parsed_Schema>, _name: &str, idl: &JS_Schema, args: &Vec<JS_AST>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":181},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                let mut default: Option<$t> = None;","highlight_start":1,"highlight_end":52},{"text":"                let mut default_str: Option<String> = None;","highlight_start":1,"highlight_end":60},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if args.len() > 0 {","highlight_start":1,"highlight_end":36},{"text":"                    match &args[0] {","highlight_start":1,"highlight_end":37},{"text":"                        JS_AST::object { properties } => {","highlight_start":1,"highlight_end":59},{"text":"                            for (key, value) in properties.iter() {","highlight_start":1,"highlight_end":68},{"text":"                                match idl.get_str(key).trim() {","highlight_start":1,"highlight_end":64},{"text":"                                    \"default\" => {","highlight_start":1,"highlight_end":51},{"text":"                                        match value {","highlight_start":1,"highlight_end":54},{"text":"                                            JS_AST::number { addr } => {","highlight_start":1,"highlight_end":73},{"text":"                                                let trimmed = idl.get_str(addr).trim();","highlight_start":1,"highlight_end":88},{"text":"                                                match trimmed.parse::<$t>() {","highlight_start":1,"highlight_end":78},{"text":"                                                    Ok(x) => {","highlight_start":1,"highlight_end":63},{"text":"                                                        default_str = Some(String::from(trimmed));","highlight_start":1,"highlight_end":99},{"text":"                                                        default = Some(x);","highlight_start":1,"highlight_end":75},{"text":"                                                    },","highlight_start":1,"highlight_end":55},{"text":"                                                    Err(_e) => {  }","highlight_start":1,"highlight_end":68},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            },","highlight_start":1,"highlight_end":47},{"text":"                                            _ => { }","highlight_start":1,"highlight_end":53},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    _ => { }","highlight_start":1,"highlight_end":45},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { }","highlight_start":1,"highlight_end":33},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(x) = default {","highlight_start":1,"highlight_end":43},{"text":"                    schema_data.push(1);","highlight_start":1,"highlight_end":41},{"text":"                    schema_data.extend_from_slice(&(x as $t).to_be_bytes());","highlight_start":1,"highlight_end":77},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    schema_data.push(0);","highlight_start":1,"highlight_end":41},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn default_value<'default>(_depth: usize, addr: usize, schema: &'default Vec<NP_Parsed_Schema>) -> Option<Self> {","highlight_start":1,"highlight_end":126},{"text":"                <$t>::np_get_default(addr, &schema)","highlight_start":1,"highlight_end":52},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"            fn set_value<'set>(cursor: NP_Cursor, memory: &'set NP_Memory, value: Self) -> Result<NP_Cursor, NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":146},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut value_address = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if value_address != 0 { // existing value, replace","highlight_start":1,"highlight_end":67},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let write_bytes = memory.write_bytes();","highlight_start":1,"highlight_end":60},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    // overwrite existing values in buffer","highlight_start":1,"highlight_end":59},{"text":"                    for x in 0..bytes.len() {","highlight_start":1,"highlight_end":46},{"text":"                        write_bytes[value_address + x] = bytes[x];","highlight_start":1,"highlight_end":67},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                } else { // new value","highlight_start":1,"highlight_end":38},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    value_address = memory.malloc_borrow(&bytes)?;","highlight_start":1,"highlight_end":67},{"text":"                    cursor.get_value_mut(memory).set_addr_value(value_address as u32);","highlight_start":1,"highlight_end":87},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn into_value(cursor: &NP_Cursor, memory: &'value NP_Memory) -> Result<Option<Self>, NP_Error> where Self: Sized {","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let value_addr = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":70},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                // empty value","highlight_start":1,"highlight_end":31},{"text":"                if value_addr == 0 {","highlight_start":1,"highlight_end":37},{"text":"                    return Ok(None);","highlight_start":1,"highlight_end":37},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let read_memory = memory.read_bytes();","highlight_start":1,"highlight_end":55},{"text":"                let mut be_bytes = <$t>::default().to_be_bytes();","highlight_start":1,"highlight_end":66},{"text":"                for x in 0..be_bytes.len() {","highlight_start":1,"highlight_end":45},{"text":"                    be_bytes[x] = read_memory[value_addr + x];","highlight_start":1,"highlight_end":63},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match $numType {","highlight_start":1,"highlight_end":33},{"text":"                    NP_NumType::signed => {","highlight_start":1,"highlight_end":44},{"text":"                        be_bytes[0] = to_signed(be_bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(Some(<$t>::from_be_bytes(be_bytes)))","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn to_json(_depth:usize, cursor: &NP_Cursor, memory: &'value NP_Memory) -> NP_JSON {","highlight_start":1,"highlight_end":97},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match Self::into_value(cursor, memory) {","highlight_start":1,"highlight_end":57},{"text":"                    Ok(x) => {","highlight_start":1,"highlight_end":31},{"text":"                        match x {","highlight_start":1,"highlight_end":34},{"text":"                            Some(y) => {","highlight_start":1,"highlight_end":41},{"text":"                                match $numType {","highlight_start":1,"highlight_end":49},{"text":"                                    NP_NumType::floating => NP_JSON::Float(y as f64),","highlight_start":1,"highlight_end":86},{"text":"                                    _ => NP_JSON::Integer(y as i64)","highlight_start":1,"highlight_end":68},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            },","highlight_start":1,"highlight_end":31},{"text":"                            None => {","highlight_start":1,"highlight_end":38},{"text":"                                match <$t>::default_value(0, cursor.schema_addr, &memory.get_schemas()) {","highlight_start":1,"highlight_end":106},{"text":"                                    Some(v) => {","highlight_start":1,"highlight_end":49},{"text":"                                        match $numType {","highlight_start":1,"highlight_end":57},{"text":"                                            NP_NumType::floating => { NP_JSON::Float(v as f64) },","highlight_start":1,"highlight_end":98},{"text":"                                            _ => { NP_JSON::Integer(v as i64) }","highlight_start":1,"highlight_end":80},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    None => NP_JSON::Null","highlight_start":1,"highlight_end":58},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    Err(_e) => {","highlight_start":1,"highlight_end":33},{"text":"                        NP_JSON::Null","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn get_size(_depth:usize, cursor: &NP_Cursor, memory: &NP_Memory) -> Result<usize, NP_Error> {","highlight_start":1,"highlight_end":107},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if c_value().get_addr_value() == 0 {","highlight_start":1,"highlight_end":53},{"text":"                    Ok(0) ","highlight_start":1,"highlight_end":27},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Ok(core::mem::size_of::<Self>())","highlight_start":1,"highlight_end":53},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_json_to_schema(mut schema: Vec<NP_Parsed_Schema>, json_schema: &Box<NP_JSON>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":160},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"                match json_schema[\"default\"] {","highlight_start":1,"highlight_end":47},{"text":"                    NP_JSON::Float(x) => {","highlight_start":1,"highlight_end":43},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Integer(x) => {","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {","highlight_start":1,"highlight_end":27},{"text":"                        schema_data.push(0);","highlight_start":1,"highlight_end":45},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_bytes_to_schema(mut schema: Vec<NP_Parsed_Schema>, address: usize, bytes: &[u8]) -> (bool, Vec<NP_Parsed_Schema>) {","highlight_start":1,"highlight_end":136},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"                (schema[schema.len() - 1].sortable, schema)","highlight_start":1,"highlight_end":60},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/numbers.rs:184:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m184\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                let use_schema = NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m471\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mnoproto_number!(u16, \"uint16\", \"u16\", NP_TypeKeys::Uint16, NP_NumType::unsigned);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/numbers.rs","byte_start":7371,"byte_end":7387,"line_start":184,"line_end":184,"column_start":34,"column_end":50,"is_primary":true,"text":[{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":34,"highlight_end":50}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/pointer/numbers.rs","byte_start":21301,"byte_end":21382,"line_start":472,"line_end":472,"column_start":1,"column_end":82,"is_primary":false,"text":[{"text":"noproto_number!(u32, \"uint32\", \"u32\", NP_TypeKeys::Uint32, NP_NumType::unsigned);","highlight_start":1,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"noproto_number!","def_site_span":{"file_name":"src/pointer/numbers.rs","byte_start":2213,"byte_end":20774,"line_start":67,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! noproto_number {","highlight_start":1,"highlight_end":30},{"text":"    ($t:ty, $str1: tt, $str2: tt, $tkey: expr, $numType: expr) => {","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> super::NP_Scalar<'value> for $t {","highlight_start":1,"highlight_end":55},{"text":"            fn schema_default(_schema: &NP_Parsed_Schema) -> Option<Self> where Self: Sized {","highlight_start":1,"highlight_end":94},{"text":"                Some(Self::default())","highlight_start":1,"highlight_end":38},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn np_max_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MAX)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn np_min_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MIN)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> NP_Value<'value> for $t {","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn type_idx() -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":75},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn self_type_idx(&self) -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":85},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn set_from_json<'set>(_depth: usize, _apply_null: bool, cursor: NP_Cursor, memory: &'set NP_Memory, value: &Box<NP_JSON>) -> Result<(), NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":186},{"text":"                match **value {","highlight_start":1,"highlight_end":32},{"text":"                    NP_JSON::Integer(int) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, int as $t)?;","highlight_start":1,"highlight_end":69},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Float(float) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, float as $t)?;","highlight_start":1,"highlight_end":71},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_json(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<NP_JSON, NP_Error> {","highlight_start":1,"highlight_end":108},{"text":"                let mut schema_json = JSMAP::new();","highlight_start":1,"highlight_end":52},{"text":"                schema_json.insert(\"type\".to_owned(), NP_JSON::String(Self::type_idx().0.to_string()));","highlight_start":1,"highlight_end":104},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    let default_val = default;","highlight_start":1,"highlight_end":47},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::unsigned => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::floating => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Float(default_val as f64));","highlight_start":1,"highlight_end":106},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                    ","highlight_start":1,"highlight_end":21},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                Ok(NP_JSON::Dictionary(schema_json))","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_idl(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<String, NP_Error> {","highlight_start":1,"highlight_end":106},{"text":"                let mut result = String::from($str2);","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    result.push_str(\"({default: \");","highlight_start":1,"highlight_end":52},{"text":"                    result.push_str(default.to_string().as_str());","highlight_start":1,"highlight_end":67},{"text":"                    result.push_str(\"})\");","highlight_start":1,"highlight_end":43},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    result.push_str(\"()\");","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(result)","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn from_idl_to_schema(mut schema: Vec<NP_Parsed_Schema>, _name: &str, idl: &JS_Schema, args: &Vec<JS_AST>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":181},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                let mut default: Option<$t> = None;","highlight_start":1,"highlight_end":52},{"text":"                let mut default_str: Option<String> = None;","highlight_start":1,"highlight_end":60},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if args.len() > 0 {","highlight_start":1,"highlight_end":36},{"text":"                    match &args[0] {","highlight_start":1,"highlight_end":37},{"text":"                        JS_AST::object { properties } => {","highlight_start":1,"highlight_end":59},{"text":"                            for (key, value) in properties.iter() {","highlight_start":1,"highlight_end":68},{"text":"                                match idl.get_str(key).trim() {","highlight_start":1,"highlight_end":64},{"text":"                                    \"default\" => {","highlight_start":1,"highlight_end":51},{"text":"                                        match value {","highlight_start":1,"highlight_end":54},{"text":"                                            JS_AST::number { addr } => {","highlight_start":1,"highlight_end":73},{"text":"                                                let trimmed = idl.get_str(addr).trim();","highlight_start":1,"highlight_end":88},{"text":"                                                match trimmed.parse::<$t>() {","highlight_start":1,"highlight_end":78},{"text":"                                                    Ok(x) => {","highlight_start":1,"highlight_end":63},{"text":"                                                        default_str = Some(String::from(trimmed));","highlight_start":1,"highlight_end":99},{"text":"                                                        default = Some(x);","highlight_start":1,"highlight_end":75},{"text":"                                                    },","highlight_start":1,"highlight_end":55},{"text":"                                                    Err(_e) => {  }","highlight_start":1,"highlight_end":68},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            },","highlight_start":1,"highlight_end":47},{"text":"                                            _ => { }","highlight_start":1,"highlight_end":53},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    _ => { }","highlight_start":1,"highlight_end":45},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { }","highlight_start":1,"highlight_end":33},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(x) = default {","highlight_start":1,"highlight_end":43},{"text":"                    schema_data.push(1);","highlight_start":1,"highlight_end":41},{"text":"                    schema_data.extend_from_slice(&(x as $t).to_be_bytes());","highlight_start":1,"highlight_end":77},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    schema_data.push(0);","highlight_start":1,"highlight_end":41},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn default_value<'default>(_depth: usize, addr: usize, schema: &'default Vec<NP_Parsed_Schema>) -> Option<Self> {","highlight_start":1,"highlight_end":126},{"text":"                <$t>::np_get_default(addr, &schema)","highlight_start":1,"highlight_end":52},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"            fn set_value<'set>(cursor: NP_Cursor, memory: &'set NP_Memory, value: Self) -> Result<NP_Cursor, NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":146},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut value_address = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if value_address != 0 { // existing value, replace","highlight_start":1,"highlight_end":67},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let write_bytes = memory.write_bytes();","highlight_start":1,"highlight_end":60},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    // overwrite existing values in buffer","highlight_start":1,"highlight_end":59},{"text":"                    for x in 0..bytes.len() {","highlight_start":1,"highlight_end":46},{"text":"                        write_bytes[value_address + x] = bytes[x];","highlight_start":1,"highlight_end":67},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                } else { // new value","highlight_start":1,"highlight_end":38},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    value_address = memory.malloc_borrow(&bytes)?;","highlight_start":1,"highlight_end":67},{"text":"                    cursor.get_value_mut(memory).set_addr_value(value_address as u32);","highlight_start":1,"highlight_end":87},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn into_value(cursor: &NP_Cursor, memory: &'value NP_Memory) -> Result<Option<Self>, NP_Error> where Self: Sized {","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let value_addr = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":70},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                // empty value","highlight_start":1,"highlight_end":31},{"text":"                if value_addr == 0 {","highlight_start":1,"highlight_end":37},{"text":"                    return Ok(None);","highlight_start":1,"highlight_end":37},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let read_memory = memory.read_bytes();","highlight_start":1,"highlight_end":55},{"text":"                let mut be_bytes = <$t>::default().to_be_bytes();","highlight_start":1,"highlight_end":66},{"text":"                for x in 0..be_bytes.len() {","highlight_start":1,"highlight_end":45},{"text":"                    be_bytes[x] = read_memory[value_addr + x];","highlight_start":1,"highlight_end":63},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match $numType {","highlight_start":1,"highlight_end":33},{"text":"                    NP_NumType::signed => {","highlight_start":1,"highlight_end":44},{"text":"                        be_bytes[0] = to_signed(be_bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(Some(<$t>::from_be_bytes(be_bytes)))","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn to_json(_depth:usize, cursor: &NP_Cursor, memory: &'value NP_Memory) -> NP_JSON {","highlight_start":1,"highlight_end":97},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match Self::into_value(cursor, memory) {","highlight_start":1,"highlight_end":57},{"text":"                    Ok(x) => {","highlight_start":1,"highlight_end":31},{"text":"                        match x {","highlight_start":1,"highlight_end":34},{"text":"                            Some(y) => {","highlight_start":1,"highlight_end":41},{"text":"                                match $numType {","highlight_start":1,"highlight_end":49},{"text":"                                    NP_NumType::floating => NP_JSON::Float(y as f64),","highlight_start":1,"highlight_end":86},{"text":"                                    _ => NP_JSON::Integer(y as i64)","highlight_start":1,"highlight_end":68},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            },","highlight_start":1,"highlight_end":31},{"text":"                            None => {","highlight_start":1,"highlight_end":38},{"text":"                                match <$t>::default_value(0, cursor.schema_addr, &memory.get_schemas()) {","highlight_start":1,"highlight_end":106},{"text":"                                    Some(v) => {","highlight_start":1,"highlight_end":49},{"text":"                                        match $numType {","highlight_start":1,"highlight_end":57},{"text":"                                            NP_NumType::floating => { NP_JSON::Float(v as f64) },","highlight_start":1,"highlight_end":98},{"text":"                                            _ => { NP_JSON::Integer(v as i64) }","highlight_start":1,"highlight_end":80},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    None => NP_JSON::Null","highlight_start":1,"highlight_end":58},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    Err(_e) => {","highlight_start":1,"highlight_end":33},{"text":"                        NP_JSON::Null","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn get_size(_depth:usize, cursor: &NP_Cursor, memory: &NP_Memory) -> Result<usize, NP_Error> {","highlight_start":1,"highlight_end":107},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if c_value().get_addr_value() == 0 {","highlight_start":1,"highlight_end":53},{"text":"                    Ok(0) ","highlight_start":1,"highlight_end":27},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Ok(core::mem::size_of::<Self>())","highlight_start":1,"highlight_end":53},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_json_to_schema(mut schema: Vec<NP_Parsed_Schema>, json_schema: &Box<NP_JSON>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":160},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"                match json_schema[\"default\"] {","highlight_start":1,"highlight_end":47},{"text":"                    NP_JSON::Float(x) => {","highlight_start":1,"highlight_end":43},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Integer(x) => {","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {","highlight_start":1,"highlight_end":27},{"text":"                        schema_data.push(0);","highlight_start":1,"highlight_end":45},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_bytes_to_schema(mut schema: Vec<NP_Parsed_Schema>, address: usize, bytes: &[u8]) -> (bool, Vec<NP_Parsed_Schema>) {","highlight_start":1,"highlight_end":136},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"                (schema[schema.len() - 1].sortable, schema)","highlight_start":1,"highlight_end":60},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/numbers.rs:184:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m184\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                let use_schema = NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m472\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mnoproto_number!(u32, \"uint32\", \"u32\", NP_TypeKeys::Uint32, NP_NumType::unsigned);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/numbers.rs","byte_start":7371,"byte_end":7387,"line_start":184,"line_end":184,"column_start":34,"column_end":50,"is_primary":true,"text":[{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":34,"highlight_end":50}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/pointer/numbers.rs","byte_start":21383,"byte_end":21464,"line_start":473,"line_end":473,"column_start":1,"column_end":82,"is_primary":false,"text":[{"text":"noproto_number!(u64, \"uint64\", \"u64\", NP_TypeKeys::Uint64, NP_NumType::unsigned);","highlight_start":1,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"noproto_number!","def_site_span":{"file_name":"src/pointer/numbers.rs","byte_start":2213,"byte_end":20774,"line_start":67,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! noproto_number {","highlight_start":1,"highlight_end":30},{"text":"    ($t:ty, $str1: tt, $str2: tt, $tkey: expr, $numType: expr) => {","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> super::NP_Scalar<'value> for $t {","highlight_start":1,"highlight_end":55},{"text":"            fn schema_default(_schema: &NP_Parsed_Schema) -> Option<Self> where Self: Sized {","highlight_start":1,"highlight_end":94},{"text":"                Some(Self::default())","highlight_start":1,"highlight_end":38},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn np_max_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MAX)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn np_min_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MIN)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> NP_Value<'value> for $t {","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn type_idx() -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":75},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn self_type_idx(&self) -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":85},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn set_from_json<'set>(_depth: usize, _apply_null: bool, cursor: NP_Cursor, memory: &'set NP_Memory, value: &Box<NP_JSON>) -> Result<(), NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":186},{"text":"                match **value {","highlight_start":1,"highlight_end":32},{"text":"                    NP_JSON::Integer(int) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, int as $t)?;","highlight_start":1,"highlight_end":69},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Float(float) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, float as $t)?;","highlight_start":1,"highlight_end":71},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_json(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<NP_JSON, NP_Error> {","highlight_start":1,"highlight_end":108},{"text":"                let mut schema_json = JSMAP::new();","highlight_start":1,"highlight_end":52},{"text":"                schema_json.insert(\"type\".to_owned(), NP_JSON::String(Self::type_idx().0.to_string()));","highlight_start":1,"highlight_end":104},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    let default_val = default;","highlight_start":1,"highlight_end":47},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::unsigned => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::floating => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Float(default_val as f64));","highlight_start":1,"highlight_end":106},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                    ","highlight_start":1,"highlight_end":21},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                Ok(NP_JSON::Dictionary(schema_json))","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_idl(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<String, NP_Error> {","highlight_start":1,"highlight_end":106},{"text":"                let mut result = String::from($str2);","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    result.push_str(\"({default: \");","highlight_start":1,"highlight_end":52},{"text":"                    result.push_str(default.to_string().as_str());","highlight_start":1,"highlight_end":67},{"text":"                    result.push_str(\"})\");","highlight_start":1,"highlight_end":43},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    result.push_str(\"()\");","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(result)","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn from_idl_to_schema(mut schema: Vec<NP_Parsed_Schema>, _name: &str, idl: &JS_Schema, args: &Vec<JS_AST>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":181},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                let mut default: Option<$t> = None;","highlight_start":1,"highlight_end":52},{"text":"                let mut default_str: Option<String> = None;","highlight_start":1,"highlight_end":60},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if args.len() > 0 {","highlight_start":1,"highlight_end":36},{"text":"                    match &args[0] {","highlight_start":1,"highlight_end":37},{"text":"                        JS_AST::object { properties } => {","highlight_start":1,"highlight_end":59},{"text":"                            for (key, value) in properties.iter() {","highlight_start":1,"highlight_end":68},{"text":"                                match idl.get_str(key).trim() {","highlight_start":1,"highlight_end":64},{"text":"                                    \"default\" => {","highlight_start":1,"highlight_end":51},{"text":"                                        match value {","highlight_start":1,"highlight_end":54},{"text":"                                            JS_AST::number { addr } => {","highlight_start":1,"highlight_end":73},{"text":"                                                let trimmed = idl.get_str(addr).trim();","highlight_start":1,"highlight_end":88},{"text":"                                                match trimmed.parse::<$t>() {","highlight_start":1,"highlight_end":78},{"text":"                                                    Ok(x) => {","highlight_start":1,"highlight_end":63},{"text":"                                                        default_str = Some(String::from(trimmed));","highlight_start":1,"highlight_end":99},{"text":"                                                        default = Some(x);","highlight_start":1,"highlight_end":75},{"text":"                                                    },","highlight_start":1,"highlight_end":55},{"text":"                                                    Err(_e) => {  }","highlight_start":1,"highlight_end":68},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            },","highlight_start":1,"highlight_end":47},{"text":"                                            _ => { }","highlight_start":1,"highlight_end":53},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    _ => { }","highlight_start":1,"highlight_end":45},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { }","highlight_start":1,"highlight_end":33},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(x) = default {","highlight_start":1,"highlight_end":43},{"text":"                    schema_data.push(1);","highlight_start":1,"highlight_end":41},{"text":"                    schema_data.extend_from_slice(&(x as $t).to_be_bytes());","highlight_start":1,"highlight_end":77},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    schema_data.push(0);","highlight_start":1,"highlight_end":41},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn default_value<'default>(_depth: usize, addr: usize, schema: &'default Vec<NP_Parsed_Schema>) -> Option<Self> {","highlight_start":1,"highlight_end":126},{"text":"                <$t>::np_get_default(addr, &schema)","highlight_start":1,"highlight_end":52},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"            fn set_value<'set>(cursor: NP_Cursor, memory: &'set NP_Memory, value: Self) -> Result<NP_Cursor, NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":146},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut value_address = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if value_address != 0 { // existing value, replace","highlight_start":1,"highlight_end":67},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let write_bytes = memory.write_bytes();","highlight_start":1,"highlight_end":60},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    // overwrite existing values in buffer","highlight_start":1,"highlight_end":59},{"text":"                    for x in 0..bytes.len() {","highlight_start":1,"highlight_end":46},{"text":"                        write_bytes[value_address + x] = bytes[x];","highlight_start":1,"highlight_end":67},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                } else { // new value","highlight_start":1,"highlight_end":38},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    value_address = memory.malloc_borrow(&bytes)?;","highlight_start":1,"highlight_end":67},{"text":"                    cursor.get_value_mut(memory).set_addr_value(value_address as u32);","highlight_start":1,"highlight_end":87},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn into_value(cursor: &NP_Cursor, memory: &'value NP_Memory) -> Result<Option<Self>, NP_Error> where Self: Sized {","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let value_addr = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":70},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                // empty value","highlight_start":1,"highlight_end":31},{"text":"                if value_addr == 0 {","highlight_start":1,"highlight_end":37},{"text":"                    return Ok(None);","highlight_start":1,"highlight_end":37},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let read_memory = memory.read_bytes();","highlight_start":1,"highlight_end":55},{"text":"                let mut be_bytes = <$t>::default().to_be_bytes();","highlight_start":1,"highlight_end":66},{"text":"                for x in 0..be_bytes.len() {","highlight_start":1,"highlight_end":45},{"text":"                    be_bytes[x] = read_memory[value_addr + x];","highlight_start":1,"highlight_end":63},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match $numType {","highlight_start":1,"highlight_end":33},{"text":"                    NP_NumType::signed => {","highlight_start":1,"highlight_end":44},{"text":"                        be_bytes[0] = to_signed(be_bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(Some(<$t>::from_be_bytes(be_bytes)))","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn to_json(_depth:usize, cursor: &NP_Cursor, memory: &'value NP_Memory) -> NP_JSON {","highlight_start":1,"highlight_end":97},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match Self::into_value(cursor, memory) {","highlight_start":1,"highlight_end":57},{"text":"                    Ok(x) => {","highlight_start":1,"highlight_end":31},{"text":"                        match x {","highlight_start":1,"highlight_end":34},{"text":"                            Some(y) => {","highlight_start":1,"highlight_end":41},{"text":"                                match $numType {","highlight_start":1,"highlight_end":49},{"text":"                                    NP_NumType::floating => NP_JSON::Float(y as f64),","highlight_start":1,"highlight_end":86},{"text":"                                    _ => NP_JSON::Integer(y as i64)","highlight_start":1,"highlight_end":68},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            },","highlight_start":1,"highlight_end":31},{"text":"                            None => {","highlight_start":1,"highlight_end":38},{"text":"                                match <$t>::default_value(0, cursor.schema_addr, &memory.get_schemas()) {","highlight_start":1,"highlight_end":106},{"text":"                                    Some(v) => {","highlight_start":1,"highlight_end":49},{"text":"                                        match $numType {","highlight_start":1,"highlight_end":57},{"text":"                                            NP_NumType::floating => { NP_JSON::Float(v as f64) },","highlight_start":1,"highlight_end":98},{"text":"                                            _ => { NP_JSON::Integer(v as i64) }","highlight_start":1,"highlight_end":80},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    None => NP_JSON::Null","highlight_start":1,"highlight_end":58},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    Err(_e) => {","highlight_start":1,"highlight_end":33},{"text":"                        NP_JSON::Null","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn get_size(_depth:usize, cursor: &NP_Cursor, memory: &NP_Memory) -> Result<usize, NP_Error> {","highlight_start":1,"highlight_end":107},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if c_value().get_addr_value() == 0 {","highlight_start":1,"highlight_end":53},{"text":"                    Ok(0) ","highlight_start":1,"highlight_end":27},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Ok(core::mem::size_of::<Self>())","highlight_start":1,"highlight_end":53},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_json_to_schema(mut schema: Vec<NP_Parsed_Schema>, json_schema: &Box<NP_JSON>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":160},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"                match json_schema[\"default\"] {","highlight_start":1,"highlight_end":47},{"text":"                    NP_JSON::Float(x) => {","highlight_start":1,"highlight_end":43},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Integer(x) => {","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {","highlight_start":1,"highlight_end":27},{"text":"                        schema_data.push(0);","highlight_start":1,"highlight_end":45},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_bytes_to_schema(mut schema: Vec<NP_Parsed_Schema>, address: usize, bytes: &[u8]) -> (bool, Vec<NP_Parsed_Schema>) {","highlight_start":1,"highlight_end":136},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"                (schema[schema.len() - 1].sortable, schema)","highlight_start":1,"highlight_end":60},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/numbers.rs:184:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m184\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                let use_schema = NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m473\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mnoproto_number!(u64, \"uint64\", \"u64\", NP_TypeKeys::Uint64, NP_NumType::unsigned);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/numbers.rs","byte_start":7371,"byte_end":7387,"line_start":184,"line_end":184,"column_start":34,"column_end":50,"is_primary":true,"text":[{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":34,"highlight_end":50}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/pointer/numbers.rs","byte_start":21484,"byte_end":21565,"line_start":476,"line_end":476,"column_start":1,"column_end":82,"is_primary":false,"text":[{"text":"noproto_number!(f32,  \"float\", \"f32\", NP_TypeKeys::Float , NP_NumType::floating);","highlight_start":1,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"noproto_number!","def_site_span":{"file_name":"src/pointer/numbers.rs","byte_start":2213,"byte_end":20774,"line_start":67,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! noproto_number {","highlight_start":1,"highlight_end":30},{"text":"    ($t:ty, $str1: tt, $str2: tt, $tkey: expr, $numType: expr) => {","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> super::NP_Scalar<'value> for $t {","highlight_start":1,"highlight_end":55},{"text":"            fn schema_default(_schema: &NP_Parsed_Schema) -> Option<Self> where Self: Sized {","highlight_start":1,"highlight_end":94},{"text":"                Some(Self::default())","highlight_start":1,"highlight_end":38},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn np_max_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MAX)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn np_min_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MIN)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> NP_Value<'value> for $t {","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn type_idx() -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":75},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn self_type_idx(&self) -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":85},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn set_from_json<'set>(_depth: usize, _apply_null: bool, cursor: NP_Cursor, memory: &'set NP_Memory, value: &Box<NP_JSON>) -> Result<(), NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":186},{"text":"                match **value {","highlight_start":1,"highlight_end":32},{"text":"                    NP_JSON::Integer(int) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, int as $t)?;","highlight_start":1,"highlight_end":69},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Float(float) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, float as $t)?;","highlight_start":1,"highlight_end":71},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_json(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<NP_JSON, NP_Error> {","highlight_start":1,"highlight_end":108},{"text":"                let mut schema_json = JSMAP::new();","highlight_start":1,"highlight_end":52},{"text":"                schema_json.insert(\"type\".to_owned(), NP_JSON::String(Self::type_idx().0.to_string()));","highlight_start":1,"highlight_end":104},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    let default_val = default;","highlight_start":1,"highlight_end":47},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::unsigned => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::floating => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Float(default_val as f64));","highlight_start":1,"highlight_end":106},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                    ","highlight_start":1,"highlight_end":21},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                Ok(NP_JSON::Dictionary(schema_json))","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_idl(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<String, NP_Error> {","highlight_start":1,"highlight_end":106},{"text":"                let mut result = String::from($str2);","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    result.push_str(\"({default: \");","highlight_start":1,"highlight_end":52},{"text":"                    result.push_str(default.to_string().as_str());","highlight_start":1,"highlight_end":67},{"text":"                    result.push_str(\"})\");","highlight_start":1,"highlight_end":43},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    result.push_str(\"()\");","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(result)","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn from_idl_to_schema(mut schema: Vec<NP_Parsed_Schema>, _name: &str, idl: &JS_Schema, args: &Vec<JS_AST>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":181},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                let mut default: Option<$t> = None;","highlight_start":1,"highlight_end":52},{"text":"                let mut default_str: Option<String> = None;","highlight_start":1,"highlight_end":60},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if args.len() > 0 {","highlight_start":1,"highlight_end":36},{"text":"                    match &args[0] {","highlight_start":1,"highlight_end":37},{"text":"                        JS_AST::object { properties } => {","highlight_start":1,"highlight_end":59},{"text":"                            for (key, value) in properties.iter() {","highlight_start":1,"highlight_end":68},{"text":"                                match idl.get_str(key).trim() {","highlight_start":1,"highlight_end":64},{"text":"                                    \"default\" => {","highlight_start":1,"highlight_end":51},{"text":"                                        match value {","highlight_start":1,"highlight_end":54},{"text":"                                            JS_AST::number { addr } => {","highlight_start":1,"highlight_end":73},{"text":"                                                let trimmed = idl.get_str(addr).trim();","highlight_start":1,"highlight_end":88},{"text":"                                                match trimmed.parse::<$t>() {","highlight_start":1,"highlight_end":78},{"text":"                                                    Ok(x) => {","highlight_start":1,"highlight_end":63},{"text":"                                                        default_str = Some(String::from(trimmed));","highlight_start":1,"highlight_end":99},{"text":"                                                        default = Some(x);","highlight_start":1,"highlight_end":75},{"text":"                                                    },","highlight_start":1,"highlight_end":55},{"text":"                                                    Err(_e) => {  }","highlight_start":1,"highlight_end":68},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            },","highlight_start":1,"highlight_end":47},{"text":"                                            _ => { }","highlight_start":1,"highlight_end":53},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    _ => { }","highlight_start":1,"highlight_end":45},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { }","highlight_start":1,"highlight_end":33},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(x) = default {","highlight_start":1,"highlight_end":43},{"text":"                    schema_data.push(1);","highlight_start":1,"highlight_end":41},{"text":"                    schema_data.extend_from_slice(&(x as $t).to_be_bytes());","highlight_start":1,"highlight_end":77},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    schema_data.push(0);","highlight_start":1,"highlight_end":41},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn default_value<'default>(_depth: usize, addr: usize, schema: &'default Vec<NP_Parsed_Schema>) -> Option<Self> {","highlight_start":1,"highlight_end":126},{"text":"                <$t>::np_get_default(addr, &schema)","highlight_start":1,"highlight_end":52},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"            fn set_value<'set>(cursor: NP_Cursor, memory: &'set NP_Memory, value: Self) -> Result<NP_Cursor, NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":146},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut value_address = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if value_address != 0 { // existing value, replace","highlight_start":1,"highlight_end":67},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let write_bytes = memory.write_bytes();","highlight_start":1,"highlight_end":60},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    // overwrite existing values in buffer","highlight_start":1,"highlight_end":59},{"text":"                    for x in 0..bytes.len() {","highlight_start":1,"highlight_end":46},{"text":"                        write_bytes[value_address + x] = bytes[x];","highlight_start":1,"highlight_end":67},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                } else { // new value","highlight_start":1,"highlight_end":38},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    value_address = memory.malloc_borrow(&bytes)?;","highlight_start":1,"highlight_end":67},{"text":"                    cursor.get_value_mut(memory).set_addr_value(value_address as u32);","highlight_start":1,"highlight_end":87},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn into_value(cursor: &NP_Cursor, memory: &'value NP_Memory) -> Result<Option<Self>, NP_Error> where Self: Sized {","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let value_addr = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":70},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                // empty value","highlight_start":1,"highlight_end":31},{"text":"                if value_addr == 0 {","highlight_start":1,"highlight_end":37},{"text":"                    return Ok(None);","highlight_start":1,"highlight_end":37},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let read_memory = memory.read_bytes();","highlight_start":1,"highlight_end":55},{"text":"                let mut be_bytes = <$t>::default().to_be_bytes();","highlight_start":1,"highlight_end":66},{"text":"                for x in 0..be_bytes.len() {","highlight_start":1,"highlight_end":45},{"text":"                    be_bytes[x] = read_memory[value_addr + x];","highlight_start":1,"highlight_end":63},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match $numType {","highlight_start":1,"highlight_end":33},{"text":"                    NP_NumType::signed => {","highlight_start":1,"highlight_end":44},{"text":"                        be_bytes[0] = to_signed(be_bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(Some(<$t>::from_be_bytes(be_bytes)))","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn to_json(_depth:usize, cursor: &NP_Cursor, memory: &'value NP_Memory) -> NP_JSON {","highlight_start":1,"highlight_end":97},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match Self::into_value(cursor, memory) {","highlight_start":1,"highlight_end":57},{"text":"                    Ok(x) => {","highlight_start":1,"highlight_end":31},{"text":"                        match x {","highlight_start":1,"highlight_end":34},{"text":"                            Some(y) => {","highlight_start":1,"highlight_end":41},{"text":"                                match $numType {","highlight_start":1,"highlight_end":49},{"text":"                                    NP_NumType::floating => NP_JSON::Float(y as f64),","highlight_start":1,"highlight_end":86},{"text":"                                    _ => NP_JSON::Integer(y as i64)","highlight_start":1,"highlight_end":68},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            },","highlight_start":1,"highlight_end":31},{"text":"                            None => {","highlight_start":1,"highlight_end":38},{"text":"                                match <$t>::default_value(0, cursor.schema_addr, &memory.get_schemas()) {","highlight_start":1,"highlight_end":106},{"text":"                                    Some(v) => {","highlight_start":1,"highlight_end":49},{"text":"                                        match $numType {","highlight_start":1,"highlight_end":57},{"text":"                                            NP_NumType::floating => { NP_JSON::Float(v as f64) },","highlight_start":1,"highlight_end":98},{"text":"                                            _ => { NP_JSON::Integer(v as i64) }","highlight_start":1,"highlight_end":80},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    None => NP_JSON::Null","highlight_start":1,"highlight_end":58},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    Err(_e) => {","highlight_start":1,"highlight_end":33},{"text":"                        NP_JSON::Null","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn get_size(_depth:usize, cursor: &NP_Cursor, memory: &NP_Memory) -> Result<usize, NP_Error> {","highlight_start":1,"highlight_end":107},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if c_value().get_addr_value() == 0 {","highlight_start":1,"highlight_end":53},{"text":"                    Ok(0) ","highlight_start":1,"highlight_end":27},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Ok(core::mem::size_of::<Self>())","highlight_start":1,"highlight_end":53},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_json_to_schema(mut schema: Vec<NP_Parsed_Schema>, json_schema: &Box<NP_JSON>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":160},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"                match json_schema[\"default\"] {","highlight_start":1,"highlight_end":47},{"text":"                    NP_JSON::Float(x) => {","highlight_start":1,"highlight_end":43},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Integer(x) => {","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {","highlight_start":1,"highlight_end":27},{"text":"                        schema_data.push(0);","highlight_start":1,"highlight_end":45},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_bytes_to_schema(mut schema: Vec<NP_Parsed_Schema>, address: usize, bytes: &[u8]) -> (bool, Vec<NP_Parsed_Schema>) {","highlight_start":1,"highlight_end":136},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"                (schema[schema.len() - 1].sortable, schema)","highlight_start":1,"highlight_end":60},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/numbers.rs:184:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m184\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                let use_schema = NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m476\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mnoproto_number!(f32,  \"float\", \"f32\", NP_TypeKeys::Float , NP_NumType::floating);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/numbers.rs","byte_start":7371,"byte_end":7387,"line_start":184,"line_end":184,"column_start":34,"column_end":50,"is_primary":true,"text":[{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":34,"highlight_end":50}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/pointer/numbers.rs","byte_start":21566,"byte_end":21647,"line_start":477,"line_end":477,"column_start":1,"column_end":82,"is_primary":false,"text":[{"text":"noproto_number!(f64, \"double\", \"f64\", NP_TypeKeys::Double, NP_NumType::floating);","highlight_start":1,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"noproto_number!","def_site_span":{"file_name":"src/pointer/numbers.rs","byte_start":2213,"byte_end":20774,"line_start":67,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! noproto_number {","highlight_start":1,"highlight_end":30},{"text":"    ($t:ty, $str1: tt, $str2: tt, $tkey: expr, $numType: expr) => {","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> super::NP_Scalar<'value> for $t {","highlight_start":1,"highlight_end":55},{"text":"            fn schema_default(_schema: &NP_Parsed_Schema) -> Option<Self> where Self: Sized {","highlight_start":1,"highlight_end":94},{"text":"                Some(Self::default())","highlight_start":1,"highlight_end":38},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn np_max_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MAX)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn np_min_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MIN)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> NP_Value<'value> for $t {","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn type_idx() -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":75},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn self_type_idx(&self) -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":85},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn set_from_json<'set>(_depth: usize, _apply_null: bool, cursor: NP_Cursor, memory: &'set NP_Memory, value: &Box<NP_JSON>) -> Result<(), NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":186},{"text":"                match **value {","highlight_start":1,"highlight_end":32},{"text":"                    NP_JSON::Integer(int) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, int as $t)?;","highlight_start":1,"highlight_end":69},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Float(float) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, float as $t)?;","highlight_start":1,"highlight_end":71},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_json(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<NP_JSON, NP_Error> {","highlight_start":1,"highlight_end":108},{"text":"                let mut schema_json = JSMAP::new();","highlight_start":1,"highlight_end":52},{"text":"                schema_json.insert(\"type\".to_owned(), NP_JSON::String(Self::type_idx().0.to_string()));","highlight_start":1,"highlight_end":104},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    let default_val = default;","highlight_start":1,"highlight_end":47},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::unsigned => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::floating => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Float(default_val as f64));","highlight_start":1,"highlight_end":106},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                    ","highlight_start":1,"highlight_end":21},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                Ok(NP_JSON::Dictionary(schema_json))","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_idl(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<String, NP_Error> {","highlight_start":1,"highlight_end":106},{"text":"                let mut result = String::from($str2);","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    result.push_str(\"({default: \");","highlight_start":1,"highlight_end":52},{"text":"                    result.push_str(default.to_string().as_str());","highlight_start":1,"highlight_end":67},{"text":"                    result.push_str(\"})\");","highlight_start":1,"highlight_end":43},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    result.push_str(\"()\");","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(result)","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn from_idl_to_schema(mut schema: Vec<NP_Parsed_Schema>, _name: &str, idl: &JS_Schema, args: &Vec<JS_AST>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":181},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                let mut default: Option<$t> = None;","highlight_start":1,"highlight_end":52},{"text":"                let mut default_str: Option<String> = None;","highlight_start":1,"highlight_end":60},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if args.len() > 0 {","highlight_start":1,"highlight_end":36},{"text":"                    match &args[0] {","highlight_start":1,"highlight_end":37},{"text":"                        JS_AST::object { properties } => {","highlight_start":1,"highlight_end":59},{"text":"                            for (key, value) in properties.iter() {","highlight_start":1,"highlight_end":68},{"text":"                                match idl.get_str(key).trim() {","highlight_start":1,"highlight_end":64},{"text":"                                    \"default\" => {","highlight_start":1,"highlight_end":51},{"text":"                                        match value {","highlight_start":1,"highlight_end":54},{"text":"                                            JS_AST::number { addr } => {","highlight_start":1,"highlight_end":73},{"text":"                                                let trimmed = idl.get_str(addr).trim();","highlight_start":1,"highlight_end":88},{"text":"                                                match trimmed.parse::<$t>() {","highlight_start":1,"highlight_end":78},{"text":"                                                    Ok(x) => {","highlight_start":1,"highlight_end":63},{"text":"                                                        default_str = Some(String::from(trimmed));","highlight_start":1,"highlight_end":99},{"text":"                                                        default = Some(x);","highlight_start":1,"highlight_end":75},{"text":"                                                    },","highlight_start":1,"highlight_end":55},{"text":"                                                    Err(_e) => {  }","highlight_start":1,"highlight_end":68},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            },","highlight_start":1,"highlight_end":47},{"text":"                                            _ => { }","highlight_start":1,"highlight_end":53},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    _ => { }","highlight_start":1,"highlight_end":45},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { }","highlight_start":1,"highlight_end":33},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(x) = default {","highlight_start":1,"highlight_end":43},{"text":"                    schema_data.push(1);","highlight_start":1,"highlight_end":41},{"text":"                    schema_data.extend_from_slice(&(x as $t).to_be_bytes());","highlight_start":1,"highlight_end":77},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    schema_data.push(0);","highlight_start":1,"highlight_end":41},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn default_value<'default>(_depth: usize, addr: usize, schema: &'default Vec<NP_Parsed_Schema>) -> Option<Self> {","highlight_start":1,"highlight_end":126},{"text":"                <$t>::np_get_default(addr, &schema)","highlight_start":1,"highlight_end":52},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"            fn set_value<'set>(cursor: NP_Cursor, memory: &'set NP_Memory, value: Self) -> Result<NP_Cursor, NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":146},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut value_address = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if value_address != 0 { // existing value, replace","highlight_start":1,"highlight_end":67},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let write_bytes = memory.write_bytes();","highlight_start":1,"highlight_end":60},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    // overwrite existing values in buffer","highlight_start":1,"highlight_end":59},{"text":"                    for x in 0..bytes.len() {","highlight_start":1,"highlight_end":46},{"text":"                        write_bytes[value_address + x] = bytes[x];","highlight_start":1,"highlight_end":67},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                } else { // new value","highlight_start":1,"highlight_end":38},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    value_address = memory.malloc_borrow(&bytes)?;","highlight_start":1,"highlight_end":67},{"text":"                    cursor.get_value_mut(memory).set_addr_value(value_address as u32);","highlight_start":1,"highlight_end":87},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn into_value(cursor: &NP_Cursor, memory: &'value NP_Memory) -> Result<Option<Self>, NP_Error> where Self: Sized {","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let value_addr = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":70},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                // empty value","highlight_start":1,"highlight_end":31},{"text":"                if value_addr == 0 {","highlight_start":1,"highlight_end":37},{"text":"                    return Ok(None);","highlight_start":1,"highlight_end":37},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let read_memory = memory.read_bytes();","highlight_start":1,"highlight_end":55},{"text":"                let mut be_bytes = <$t>::default().to_be_bytes();","highlight_start":1,"highlight_end":66},{"text":"                for x in 0..be_bytes.len() {","highlight_start":1,"highlight_end":45},{"text":"                    be_bytes[x] = read_memory[value_addr + x];","highlight_start":1,"highlight_end":63},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match $numType {","highlight_start":1,"highlight_end":33},{"text":"                    NP_NumType::signed => {","highlight_start":1,"highlight_end":44},{"text":"                        be_bytes[0] = to_signed(be_bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(Some(<$t>::from_be_bytes(be_bytes)))","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn to_json(_depth:usize, cursor: &NP_Cursor, memory: &'value NP_Memory) -> NP_JSON {","highlight_start":1,"highlight_end":97},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match Self::into_value(cursor, memory) {","highlight_start":1,"highlight_end":57},{"text":"                    Ok(x) => {","highlight_start":1,"highlight_end":31},{"text":"                        match x {","highlight_start":1,"highlight_end":34},{"text":"                            Some(y) => {","highlight_start":1,"highlight_end":41},{"text":"                                match $numType {","highlight_start":1,"highlight_end":49},{"text":"                                    NP_NumType::floating => NP_JSON::Float(y as f64),","highlight_start":1,"highlight_end":86},{"text":"                                    _ => NP_JSON::Integer(y as i64)","highlight_start":1,"highlight_end":68},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            },","highlight_start":1,"highlight_end":31},{"text":"                            None => {","highlight_start":1,"highlight_end":38},{"text":"                                match <$t>::default_value(0, cursor.schema_addr, &memory.get_schemas()) {","highlight_start":1,"highlight_end":106},{"text":"                                    Some(v) => {","highlight_start":1,"highlight_end":49},{"text":"                                        match $numType {","highlight_start":1,"highlight_end":57},{"text":"                                            NP_NumType::floating => { NP_JSON::Float(v as f64) },","highlight_start":1,"highlight_end":98},{"text":"                                            _ => { NP_JSON::Integer(v as i64) }","highlight_start":1,"highlight_end":80},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    None => NP_JSON::Null","highlight_start":1,"highlight_end":58},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    Err(_e) => {","highlight_start":1,"highlight_end":33},{"text":"                        NP_JSON::Null","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn get_size(_depth:usize, cursor: &NP_Cursor, memory: &NP_Memory) -> Result<usize, NP_Error> {","highlight_start":1,"highlight_end":107},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if c_value().get_addr_value() == 0 {","highlight_start":1,"highlight_end":53},{"text":"                    Ok(0) ","highlight_start":1,"highlight_end":27},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Ok(core::mem::size_of::<Self>())","highlight_start":1,"highlight_end":53},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_json_to_schema(mut schema: Vec<NP_Parsed_Schema>, json_schema: &Box<NP_JSON>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":160},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"                match json_schema[\"default\"] {","highlight_start":1,"highlight_end":47},{"text":"                    NP_JSON::Float(x) => {","highlight_start":1,"highlight_end":43},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Integer(x) => {","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {","highlight_start":1,"highlight_end":27},{"text":"                        schema_data.push(0);","highlight_start":1,"highlight_end":45},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_bytes_to_schema(mut schema: Vec<NP_Parsed_Schema>, address: usize, bytes: &[u8]) -> (bool, Vec<NP_Parsed_Schema>) {","highlight_start":1,"highlight_end":136},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"                (schema[schema.len() - 1].sortable, schema)","highlight_start":1,"highlight_end":60},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/numbers.rs:184:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m184\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                let use_schema = NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m477\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mnoproto_number!(f64, \"double\", \"f64\", NP_TypeKeys::Double, NP_NumType::floating);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/numbers.rs","byte_start":15158,"byte_end":15174,"line_start":364,"line_end":364,"column_start":34,"column_end":50,"is_primary":true,"text":[{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":34,"highlight_end":50}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/pointer/numbers.rs","byte_start":20795,"byte_end":20874,"line_start":464,"line_end":464,"column_start":1,"column_end":80,"is_primary":false,"text":[{"text":"noproto_number!(i8,    \"int8\",  \"i8\", NP_TypeKeys::Int8  , NP_NumType::signed);","highlight_start":1,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"noproto_number!","def_site_span":{"file_name":"src/pointer/numbers.rs","byte_start":2213,"byte_end":20774,"line_start":67,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! noproto_number {","highlight_start":1,"highlight_end":30},{"text":"    ($t:ty, $str1: tt, $str2: tt, $tkey: expr, $numType: expr) => {","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> super::NP_Scalar<'value> for $t {","highlight_start":1,"highlight_end":55},{"text":"            fn schema_default(_schema: &NP_Parsed_Schema) -> Option<Self> where Self: Sized {","highlight_start":1,"highlight_end":94},{"text":"                Some(Self::default())","highlight_start":1,"highlight_end":38},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn np_max_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MAX)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn np_min_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MIN)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> NP_Value<'value> for $t {","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn type_idx() -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":75},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn self_type_idx(&self) -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":85},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn set_from_json<'set>(_depth: usize, _apply_null: bool, cursor: NP_Cursor, memory: &'set NP_Memory, value: &Box<NP_JSON>) -> Result<(), NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":186},{"text":"                match **value {","highlight_start":1,"highlight_end":32},{"text":"                    NP_JSON::Integer(int) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, int as $t)?;","highlight_start":1,"highlight_end":69},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Float(float) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, float as $t)?;","highlight_start":1,"highlight_end":71},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_json(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<NP_JSON, NP_Error> {","highlight_start":1,"highlight_end":108},{"text":"                let mut schema_json = JSMAP::new();","highlight_start":1,"highlight_end":52},{"text":"                schema_json.insert(\"type\".to_owned(), NP_JSON::String(Self::type_idx().0.to_string()));","highlight_start":1,"highlight_end":104},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    let default_val = default;","highlight_start":1,"highlight_end":47},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::unsigned => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::floating => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Float(default_val as f64));","highlight_start":1,"highlight_end":106},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                    ","highlight_start":1,"highlight_end":21},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                Ok(NP_JSON::Dictionary(schema_json))","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_idl(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<String, NP_Error> {","highlight_start":1,"highlight_end":106},{"text":"                let mut result = String::from($str2);","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    result.push_str(\"({default: \");","highlight_start":1,"highlight_end":52},{"text":"                    result.push_str(default.to_string().as_str());","highlight_start":1,"highlight_end":67},{"text":"                    result.push_str(\"})\");","highlight_start":1,"highlight_end":43},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    result.push_str(\"()\");","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(result)","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn from_idl_to_schema(mut schema: Vec<NP_Parsed_Schema>, _name: &str, idl: &JS_Schema, args: &Vec<JS_AST>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":181},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                let mut default: Option<$t> = None;","highlight_start":1,"highlight_end":52},{"text":"                let mut default_str: Option<String> = None;","highlight_start":1,"highlight_end":60},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if args.len() > 0 {","highlight_start":1,"highlight_end":36},{"text":"                    match &args[0] {","highlight_start":1,"highlight_end":37},{"text":"                        JS_AST::object { properties } => {","highlight_start":1,"highlight_end":59},{"text":"                            for (key, value) in properties.iter() {","highlight_start":1,"highlight_end":68},{"text":"                                match idl.get_str(key).trim() {","highlight_start":1,"highlight_end":64},{"text":"                                    \"default\" => {","highlight_start":1,"highlight_end":51},{"text":"                                        match value {","highlight_start":1,"highlight_end":54},{"text":"                                            JS_AST::number { addr } => {","highlight_start":1,"highlight_end":73},{"text":"                                                let trimmed = idl.get_str(addr).trim();","highlight_start":1,"highlight_end":88},{"text":"                                                match trimmed.parse::<$t>() {","highlight_start":1,"highlight_end":78},{"text":"                                                    Ok(x) => {","highlight_start":1,"highlight_end":63},{"text":"                                                        default_str = Some(String::from(trimmed));","highlight_start":1,"highlight_end":99},{"text":"                                                        default = Some(x);","highlight_start":1,"highlight_end":75},{"text":"                                                    },","highlight_start":1,"highlight_end":55},{"text":"                                                    Err(_e) => {  }","highlight_start":1,"highlight_end":68},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            },","highlight_start":1,"highlight_end":47},{"text":"                                            _ => { }","highlight_start":1,"highlight_end":53},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    _ => { }","highlight_start":1,"highlight_end":45},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { }","highlight_start":1,"highlight_end":33},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(x) = default {","highlight_start":1,"highlight_end":43},{"text":"                    schema_data.push(1);","highlight_start":1,"highlight_end":41},{"text":"                    schema_data.extend_from_slice(&(x as $t).to_be_bytes());","highlight_start":1,"highlight_end":77},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    schema_data.push(0);","highlight_start":1,"highlight_end":41},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn default_value<'default>(_depth: usize, addr: usize, schema: &'default Vec<NP_Parsed_Schema>) -> Option<Self> {","highlight_start":1,"highlight_end":126},{"text":"                <$t>::np_get_default(addr, &schema)","highlight_start":1,"highlight_end":52},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"            fn set_value<'set>(cursor: NP_Cursor, memory: &'set NP_Memory, value: Self) -> Result<NP_Cursor, NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":146},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut value_address = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if value_address != 0 { // existing value, replace","highlight_start":1,"highlight_end":67},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let write_bytes = memory.write_bytes();","highlight_start":1,"highlight_end":60},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    // overwrite existing values in buffer","highlight_start":1,"highlight_end":59},{"text":"                    for x in 0..bytes.len() {","highlight_start":1,"highlight_end":46},{"text":"                        write_bytes[value_address + x] = bytes[x];","highlight_start":1,"highlight_end":67},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                } else { // new value","highlight_start":1,"highlight_end":38},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    value_address = memory.malloc_borrow(&bytes)?;","highlight_start":1,"highlight_end":67},{"text":"                    cursor.get_value_mut(memory).set_addr_value(value_address as u32);","highlight_start":1,"highlight_end":87},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn into_value(cursor: &NP_Cursor, memory: &'value NP_Memory) -> Result<Option<Self>, NP_Error> where Self: Sized {","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let value_addr = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":70},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                // empty value","highlight_start":1,"highlight_end":31},{"text":"                if value_addr == 0 {","highlight_start":1,"highlight_end":37},{"text":"                    return Ok(None);","highlight_start":1,"highlight_end":37},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let read_memory = memory.read_bytes();","highlight_start":1,"highlight_end":55},{"text":"                let mut be_bytes = <$t>::default().to_be_bytes();","highlight_start":1,"highlight_end":66},{"text":"                for x in 0..be_bytes.len() {","highlight_start":1,"highlight_end":45},{"text":"                    be_bytes[x] = read_memory[value_addr + x];","highlight_start":1,"highlight_end":63},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match $numType {","highlight_start":1,"highlight_end":33},{"text":"                    NP_NumType::signed => {","highlight_start":1,"highlight_end":44},{"text":"                        be_bytes[0] = to_signed(be_bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(Some(<$t>::from_be_bytes(be_bytes)))","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn to_json(_depth:usize, cursor: &NP_Cursor, memory: &'value NP_Memory) -> NP_JSON {","highlight_start":1,"highlight_end":97},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match Self::into_value(cursor, memory) {","highlight_start":1,"highlight_end":57},{"text":"                    Ok(x) => {","highlight_start":1,"highlight_end":31},{"text":"                        match x {","highlight_start":1,"highlight_end":34},{"text":"                            Some(y) => {","highlight_start":1,"highlight_end":41},{"text":"                                match $numType {","highlight_start":1,"highlight_end":49},{"text":"                                    NP_NumType::floating => NP_JSON::Float(y as f64),","highlight_start":1,"highlight_end":86},{"text":"                                    _ => NP_JSON::Integer(y as i64)","highlight_start":1,"highlight_end":68},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            },","highlight_start":1,"highlight_end":31},{"text":"                            None => {","highlight_start":1,"highlight_end":38},{"text":"                                match <$t>::default_value(0, cursor.schema_addr, &memory.get_schemas()) {","highlight_start":1,"highlight_end":106},{"text":"                                    Some(v) => {","highlight_start":1,"highlight_end":49},{"text":"                                        match $numType {","highlight_start":1,"highlight_end":57},{"text":"                                            NP_NumType::floating => { NP_JSON::Float(v as f64) },","highlight_start":1,"highlight_end":98},{"text":"                                            _ => { NP_JSON::Integer(v as i64) }","highlight_start":1,"highlight_end":80},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    None => NP_JSON::Null","highlight_start":1,"highlight_end":58},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    Err(_e) => {","highlight_start":1,"highlight_end":33},{"text":"                        NP_JSON::Null","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn get_size(_depth:usize, cursor: &NP_Cursor, memory: &NP_Memory) -> Result<usize, NP_Error> {","highlight_start":1,"highlight_end":107},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if c_value().get_addr_value() == 0 {","highlight_start":1,"highlight_end":53},{"text":"                    Ok(0) ","highlight_start":1,"highlight_end":27},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Ok(core::mem::size_of::<Self>())","highlight_start":1,"highlight_end":53},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_json_to_schema(mut schema: Vec<NP_Parsed_Schema>, json_schema: &Box<NP_JSON>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":160},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"                match json_schema[\"default\"] {","highlight_start":1,"highlight_end":47},{"text":"                    NP_JSON::Float(x) => {","highlight_start":1,"highlight_end":43},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Integer(x) => {","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {","highlight_start":1,"highlight_end":27},{"text":"                        schema_data.push(0);","highlight_start":1,"highlight_end":45},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_bytes_to_schema(mut schema: Vec<NP_Parsed_Schema>, address: usize, bytes: &[u8]) -> (bool, Vec<NP_Parsed_Schema>) {","highlight_start":1,"highlight_end":136},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"                (schema[schema.len() - 1].sortable, schema)","highlight_start":1,"highlight_end":60},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/numbers.rs:364:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m364\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                let use_schema = NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m464\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mnoproto_number!(i8,    \"int8\",  \"i8\", NP_TypeKeys::Int8  , NP_NumType::signed);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/numbers.rs","byte_start":15158,"byte_end":15174,"line_start":364,"line_end":364,"column_start":34,"column_end":50,"is_primary":true,"text":[{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":34,"highlight_end":50}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/pointer/numbers.rs","byte_start":20875,"byte_end":20954,"line_start":465,"line_end":465,"column_start":1,"column_end":80,"is_primary":false,"text":[{"text":"noproto_number!(i16,  \"int16\", \"i16\", NP_TypeKeys::Int16 , NP_NumType::signed);","highlight_start":1,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"noproto_number!","def_site_span":{"file_name":"src/pointer/numbers.rs","byte_start":2213,"byte_end":20774,"line_start":67,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! noproto_number {","highlight_start":1,"highlight_end":30},{"text":"    ($t:ty, $str1: tt, $str2: tt, $tkey: expr, $numType: expr) => {","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> super::NP_Scalar<'value> for $t {","highlight_start":1,"highlight_end":55},{"text":"            fn schema_default(_schema: &NP_Parsed_Schema) -> Option<Self> where Self: Sized {","highlight_start":1,"highlight_end":94},{"text":"                Some(Self::default())","highlight_start":1,"highlight_end":38},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn np_max_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MAX)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn np_min_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MIN)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> NP_Value<'value> for $t {","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn type_idx() -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":75},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn self_type_idx(&self) -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":85},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn set_from_json<'set>(_depth: usize, _apply_null: bool, cursor: NP_Cursor, memory: &'set NP_Memory, value: &Box<NP_JSON>) -> Result<(), NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":186},{"text":"                match **value {","highlight_start":1,"highlight_end":32},{"text":"                    NP_JSON::Integer(int) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, int as $t)?;","highlight_start":1,"highlight_end":69},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Float(float) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, float as $t)?;","highlight_start":1,"highlight_end":71},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_json(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<NP_JSON, NP_Error> {","highlight_start":1,"highlight_end":108},{"text":"                let mut schema_json = JSMAP::new();","highlight_start":1,"highlight_end":52},{"text":"                schema_json.insert(\"type\".to_owned(), NP_JSON::String(Self::type_idx().0.to_string()));","highlight_start":1,"highlight_end":104},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    let default_val = default;","highlight_start":1,"highlight_end":47},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::unsigned => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::floating => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Float(default_val as f64));","highlight_start":1,"highlight_end":106},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                    ","highlight_start":1,"highlight_end":21},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                Ok(NP_JSON::Dictionary(schema_json))","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_idl(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<String, NP_Error> {","highlight_start":1,"highlight_end":106},{"text":"                let mut result = String::from($str2);","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    result.push_str(\"({default: \");","highlight_start":1,"highlight_end":52},{"text":"                    result.push_str(default.to_string().as_str());","highlight_start":1,"highlight_end":67},{"text":"                    result.push_str(\"})\");","highlight_start":1,"highlight_end":43},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    result.push_str(\"()\");","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(result)","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn from_idl_to_schema(mut schema: Vec<NP_Parsed_Schema>, _name: &str, idl: &JS_Schema, args: &Vec<JS_AST>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":181},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                let mut default: Option<$t> = None;","highlight_start":1,"highlight_end":52},{"text":"                let mut default_str: Option<String> = None;","highlight_start":1,"highlight_end":60},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if args.len() > 0 {","highlight_start":1,"highlight_end":36},{"text":"                    match &args[0] {","highlight_start":1,"highlight_end":37},{"text":"                        JS_AST::object { properties } => {","highlight_start":1,"highlight_end":59},{"text":"                            for (key, value) in properties.iter() {","highlight_start":1,"highlight_end":68},{"text":"                                match idl.get_str(key).trim() {","highlight_start":1,"highlight_end":64},{"text":"                                    \"default\" => {","highlight_start":1,"highlight_end":51},{"text":"                                        match value {","highlight_start":1,"highlight_end":54},{"text":"                                            JS_AST::number { addr } => {","highlight_start":1,"highlight_end":73},{"text":"                                                let trimmed = idl.get_str(addr).trim();","highlight_start":1,"highlight_end":88},{"text":"                                                match trimmed.parse::<$t>() {","highlight_start":1,"highlight_end":78},{"text":"                                                    Ok(x) => {","highlight_start":1,"highlight_end":63},{"text":"                                                        default_str = Some(String::from(trimmed));","highlight_start":1,"highlight_end":99},{"text":"                                                        default = Some(x);","highlight_start":1,"highlight_end":75},{"text":"                                                    },","highlight_start":1,"highlight_end":55},{"text":"                                                    Err(_e) => {  }","highlight_start":1,"highlight_end":68},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            },","highlight_start":1,"highlight_end":47},{"text":"                                            _ => { }","highlight_start":1,"highlight_end":53},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    _ => { }","highlight_start":1,"highlight_end":45},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { }","highlight_start":1,"highlight_end":33},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(x) = default {","highlight_start":1,"highlight_end":43},{"text":"                    schema_data.push(1);","highlight_start":1,"highlight_end":41},{"text":"                    schema_data.extend_from_slice(&(x as $t).to_be_bytes());","highlight_start":1,"highlight_end":77},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    schema_data.push(0);","highlight_start":1,"highlight_end":41},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn default_value<'default>(_depth: usize, addr: usize, schema: &'default Vec<NP_Parsed_Schema>) -> Option<Self> {","highlight_start":1,"highlight_end":126},{"text":"                <$t>::np_get_default(addr, &schema)","highlight_start":1,"highlight_end":52},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"            fn set_value<'set>(cursor: NP_Cursor, memory: &'set NP_Memory, value: Self) -> Result<NP_Cursor, NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":146},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut value_address = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if value_address != 0 { // existing value, replace","highlight_start":1,"highlight_end":67},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let write_bytes = memory.write_bytes();","highlight_start":1,"highlight_end":60},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    // overwrite existing values in buffer","highlight_start":1,"highlight_end":59},{"text":"                    for x in 0..bytes.len() {","highlight_start":1,"highlight_end":46},{"text":"                        write_bytes[value_address + x] = bytes[x];","highlight_start":1,"highlight_end":67},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                } else { // new value","highlight_start":1,"highlight_end":38},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    value_address = memory.malloc_borrow(&bytes)?;","highlight_start":1,"highlight_end":67},{"text":"                    cursor.get_value_mut(memory).set_addr_value(value_address as u32);","highlight_start":1,"highlight_end":87},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn into_value(cursor: &NP_Cursor, memory: &'value NP_Memory) -> Result<Option<Self>, NP_Error> where Self: Sized {","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let value_addr = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":70},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                // empty value","highlight_start":1,"highlight_end":31},{"text":"                if value_addr == 0 {","highlight_start":1,"highlight_end":37},{"text":"                    return Ok(None);","highlight_start":1,"highlight_end":37},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let read_memory = memory.read_bytes();","highlight_start":1,"highlight_end":55},{"text":"                let mut be_bytes = <$t>::default().to_be_bytes();","highlight_start":1,"highlight_end":66},{"text":"                for x in 0..be_bytes.len() {","highlight_start":1,"highlight_end":45},{"text":"                    be_bytes[x] = read_memory[value_addr + x];","highlight_start":1,"highlight_end":63},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match $numType {","highlight_start":1,"highlight_end":33},{"text":"                    NP_NumType::signed => {","highlight_start":1,"highlight_end":44},{"text":"                        be_bytes[0] = to_signed(be_bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(Some(<$t>::from_be_bytes(be_bytes)))","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn to_json(_depth:usize, cursor: &NP_Cursor, memory: &'value NP_Memory) -> NP_JSON {","highlight_start":1,"highlight_end":97},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match Self::into_value(cursor, memory) {","highlight_start":1,"highlight_end":57},{"text":"                    Ok(x) => {","highlight_start":1,"highlight_end":31},{"text":"                        match x {","highlight_start":1,"highlight_end":34},{"text":"                            Some(y) => {","highlight_start":1,"highlight_end":41},{"text":"                                match $numType {","highlight_start":1,"highlight_end":49},{"text":"                                    NP_NumType::floating => NP_JSON::Float(y as f64),","highlight_start":1,"highlight_end":86},{"text":"                                    _ => NP_JSON::Integer(y as i64)","highlight_start":1,"highlight_end":68},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            },","highlight_start":1,"highlight_end":31},{"text":"                            None => {","highlight_start":1,"highlight_end":38},{"text":"                                match <$t>::default_value(0, cursor.schema_addr, &memory.get_schemas()) {","highlight_start":1,"highlight_end":106},{"text":"                                    Some(v) => {","highlight_start":1,"highlight_end":49},{"text":"                                        match $numType {","highlight_start":1,"highlight_end":57},{"text":"                                            NP_NumType::floating => { NP_JSON::Float(v as f64) },","highlight_start":1,"highlight_end":98},{"text":"                                            _ => { NP_JSON::Integer(v as i64) }","highlight_start":1,"highlight_end":80},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    None => NP_JSON::Null","highlight_start":1,"highlight_end":58},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    Err(_e) => {","highlight_start":1,"highlight_end":33},{"text":"                        NP_JSON::Null","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn get_size(_depth:usize, cursor: &NP_Cursor, memory: &NP_Memory) -> Result<usize, NP_Error> {","highlight_start":1,"highlight_end":107},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if c_value().get_addr_value() == 0 {","highlight_start":1,"highlight_end":53},{"text":"                    Ok(0) ","highlight_start":1,"highlight_end":27},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Ok(core::mem::size_of::<Self>())","highlight_start":1,"highlight_end":53},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_json_to_schema(mut schema: Vec<NP_Parsed_Schema>, json_schema: &Box<NP_JSON>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":160},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"                match json_schema[\"default\"] {","highlight_start":1,"highlight_end":47},{"text":"                    NP_JSON::Float(x) => {","highlight_start":1,"highlight_end":43},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Integer(x) => {","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {","highlight_start":1,"highlight_end":27},{"text":"                        schema_data.push(0);","highlight_start":1,"highlight_end":45},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_bytes_to_schema(mut schema: Vec<NP_Parsed_Schema>, address: usize, bytes: &[u8]) -> (bool, Vec<NP_Parsed_Schema>) {","highlight_start":1,"highlight_end":136},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"                (schema[schema.len() - 1].sortable, schema)","highlight_start":1,"highlight_end":60},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/numbers.rs:364:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m364\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                let use_schema = NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m465\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mnoproto_number!(i16,  \"int16\", \"i16\", NP_TypeKeys::Int16 , NP_NumType::signed);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/numbers.rs","byte_start":15158,"byte_end":15174,"line_start":364,"line_end":364,"column_start":34,"column_end":50,"is_primary":true,"text":[{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":34,"highlight_end":50}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/pointer/numbers.rs","byte_start":20955,"byte_end":21034,"line_start":466,"line_end":466,"column_start":1,"column_end":80,"is_primary":false,"text":[{"text":"noproto_number!(i32,  \"int32\", \"i32\", NP_TypeKeys::Int32 , NP_NumType::signed);","highlight_start":1,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"noproto_number!","def_site_span":{"file_name":"src/pointer/numbers.rs","byte_start":2213,"byte_end":20774,"line_start":67,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! noproto_number {","highlight_start":1,"highlight_end":30},{"text":"    ($t:ty, $str1: tt, $str2: tt, $tkey: expr, $numType: expr) => {","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> super::NP_Scalar<'value> for $t {","highlight_start":1,"highlight_end":55},{"text":"            fn schema_default(_schema: &NP_Parsed_Schema) -> Option<Self> where Self: Sized {","highlight_start":1,"highlight_end":94},{"text":"                Some(Self::default())","highlight_start":1,"highlight_end":38},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn np_max_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MAX)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn np_min_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MIN)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> NP_Value<'value> for $t {","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn type_idx() -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":75},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn self_type_idx(&self) -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":85},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn set_from_json<'set>(_depth: usize, _apply_null: bool, cursor: NP_Cursor, memory: &'set NP_Memory, value: &Box<NP_JSON>) -> Result<(), NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":186},{"text":"                match **value {","highlight_start":1,"highlight_end":32},{"text":"                    NP_JSON::Integer(int) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, int as $t)?;","highlight_start":1,"highlight_end":69},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Float(float) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, float as $t)?;","highlight_start":1,"highlight_end":71},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_json(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<NP_JSON, NP_Error> {","highlight_start":1,"highlight_end":108},{"text":"                let mut schema_json = JSMAP::new();","highlight_start":1,"highlight_end":52},{"text":"                schema_json.insert(\"type\".to_owned(), NP_JSON::String(Self::type_idx().0.to_string()));","highlight_start":1,"highlight_end":104},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    let default_val = default;","highlight_start":1,"highlight_end":47},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::unsigned => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::floating => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Float(default_val as f64));","highlight_start":1,"highlight_end":106},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                    ","highlight_start":1,"highlight_end":21},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                Ok(NP_JSON::Dictionary(schema_json))","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_idl(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<String, NP_Error> {","highlight_start":1,"highlight_end":106},{"text":"                let mut result = String::from($str2);","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    result.push_str(\"({default: \");","highlight_start":1,"highlight_end":52},{"text":"                    result.push_str(default.to_string().as_str());","highlight_start":1,"highlight_end":67},{"text":"                    result.push_str(\"})\");","highlight_start":1,"highlight_end":43},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    result.push_str(\"()\");","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(result)","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn from_idl_to_schema(mut schema: Vec<NP_Parsed_Schema>, _name: &str, idl: &JS_Schema, args: &Vec<JS_AST>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":181},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                let mut default: Option<$t> = None;","highlight_start":1,"highlight_end":52},{"text":"                let mut default_str: Option<String> = None;","highlight_start":1,"highlight_end":60},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if args.len() > 0 {","highlight_start":1,"highlight_end":36},{"text":"                    match &args[0] {","highlight_start":1,"highlight_end":37},{"text":"                        JS_AST::object { properties } => {","highlight_start":1,"highlight_end":59},{"text":"                            for (key, value) in properties.iter() {","highlight_start":1,"highlight_end":68},{"text":"                                match idl.get_str(key).trim() {","highlight_start":1,"highlight_end":64},{"text":"                                    \"default\" => {","highlight_start":1,"highlight_end":51},{"text":"                                        match value {","highlight_start":1,"highlight_end":54},{"text":"                                            JS_AST::number { addr } => {","highlight_start":1,"highlight_end":73},{"text":"                                                let trimmed = idl.get_str(addr).trim();","highlight_start":1,"highlight_end":88},{"text":"                                                match trimmed.parse::<$t>() {","highlight_start":1,"highlight_end":78},{"text":"                                                    Ok(x) => {","highlight_start":1,"highlight_end":63},{"text":"                                                        default_str = Some(String::from(trimmed));","highlight_start":1,"highlight_end":99},{"text":"                                                        default = Some(x);","highlight_start":1,"highlight_end":75},{"text":"                                                    },","highlight_start":1,"highlight_end":55},{"text":"                                                    Err(_e) => {  }","highlight_start":1,"highlight_end":68},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            },","highlight_start":1,"highlight_end":47},{"text":"                                            _ => { }","highlight_start":1,"highlight_end":53},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    _ => { }","highlight_start":1,"highlight_end":45},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { }","highlight_start":1,"highlight_end":33},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(x) = default {","highlight_start":1,"highlight_end":43},{"text":"                    schema_data.push(1);","highlight_start":1,"highlight_end":41},{"text":"                    schema_data.extend_from_slice(&(x as $t).to_be_bytes());","highlight_start":1,"highlight_end":77},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    schema_data.push(0);","highlight_start":1,"highlight_end":41},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn default_value<'default>(_depth: usize, addr: usize, schema: &'default Vec<NP_Parsed_Schema>) -> Option<Self> {","highlight_start":1,"highlight_end":126},{"text":"                <$t>::np_get_default(addr, &schema)","highlight_start":1,"highlight_end":52},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"            fn set_value<'set>(cursor: NP_Cursor, memory: &'set NP_Memory, value: Self) -> Result<NP_Cursor, NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":146},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut value_address = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if value_address != 0 { // existing value, replace","highlight_start":1,"highlight_end":67},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let write_bytes = memory.write_bytes();","highlight_start":1,"highlight_end":60},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    // overwrite existing values in buffer","highlight_start":1,"highlight_end":59},{"text":"                    for x in 0..bytes.len() {","highlight_start":1,"highlight_end":46},{"text":"                        write_bytes[value_address + x] = bytes[x];","highlight_start":1,"highlight_end":67},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                } else { // new value","highlight_start":1,"highlight_end":38},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    value_address = memory.malloc_borrow(&bytes)?;","highlight_start":1,"highlight_end":67},{"text":"                    cursor.get_value_mut(memory).set_addr_value(value_address as u32);","highlight_start":1,"highlight_end":87},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn into_value(cursor: &NP_Cursor, memory: &'value NP_Memory) -> Result<Option<Self>, NP_Error> where Self: Sized {","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let value_addr = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":70},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                // empty value","highlight_start":1,"highlight_end":31},{"text":"                if value_addr == 0 {","highlight_start":1,"highlight_end":37},{"text":"                    return Ok(None);","highlight_start":1,"highlight_end":37},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let read_memory = memory.read_bytes();","highlight_start":1,"highlight_end":55},{"text":"                let mut be_bytes = <$t>::default().to_be_bytes();","highlight_start":1,"highlight_end":66},{"text":"                for x in 0..be_bytes.len() {","highlight_start":1,"highlight_end":45},{"text":"                    be_bytes[x] = read_memory[value_addr + x];","highlight_start":1,"highlight_end":63},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match $numType {","highlight_start":1,"highlight_end":33},{"text":"                    NP_NumType::signed => {","highlight_start":1,"highlight_end":44},{"text":"                        be_bytes[0] = to_signed(be_bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(Some(<$t>::from_be_bytes(be_bytes)))","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn to_json(_depth:usize, cursor: &NP_Cursor, memory: &'value NP_Memory) -> NP_JSON {","highlight_start":1,"highlight_end":97},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match Self::into_value(cursor, memory) {","highlight_start":1,"highlight_end":57},{"text":"                    Ok(x) => {","highlight_start":1,"highlight_end":31},{"text":"                        match x {","highlight_start":1,"highlight_end":34},{"text":"                            Some(y) => {","highlight_start":1,"highlight_end":41},{"text":"                                match $numType {","highlight_start":1,"highlight_end":49},{"text":"                                    NP_NumType::floating => NP_JSON::Float(y as f64),","highlight_start":1,"highlight_end":86},{"text":"                                    _ => NP_JSON::Integer(y as i64)","highlight_start":1,"highlight_end":68},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            },","highlight_start":1,"highlight_end":31},{"text":"                            None => {","highlight_start":1,"highlight_end":38},{"text":"                                match <$t>::default_value(0, cursor.schema_addr, &memory.get_schemas()) {","highlight_start":1,"highlight_end":106},{"text":"                                    Some(v) => {","highlight_start":1,"highlight_end":49},{"text":"                                        match $numType {","highlight_start":1,"highlight_end":57},{"text":"                                            NP_NumType::floating => { NP_JSON::Float(v as f64) },","highlight_start":1,"highlight_end":98},{"text":"                                            _ => { NP_JSON::Integer(v as i64) }","highlight_start":1,"highlight_end":80},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    None => NP_JSON::Null","highlight_start":1,"highlight_end":58},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    Err(_e) => {","highlight_start":1,"highlight_end":33},{"text":"                        NP_JSON::Null","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn get_size(_depth:usize, cursor: &NP_Cursor, memory: &NP_Memory) -> Result<usize, NP_Error> {","highlight_start":1,"highlight_end":107},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if c_value().get_addr_value() == 0 {","highlight_start":1,"highlight_end":53},{"text":"                    Ok(0) ","highlight_start":1,"highlight_end":27},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Ok(core::mem::size_of::<Self>())","highlight_start":1,"highlight_end":53},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_json_to_schema(mut schema: Vec<NP_Parsed_Schema>, json_schema: &Box<NP_JSON>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":160},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"                match json_schema[\"default\"] {","highlight_start":1,"highlight_end":47},{"text":"                    NP_JSON::Float(x) => {","highlight_start":1,"highlight_end":43},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Integer(x) => {","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {","highlight_start":1,"highlight_end":27},{"text":"                        schema_data.push(0);","highlight_start":1,"highlight_end":45},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_bytes_to_schema(mut schema: Vec<NP_Parsed_Schema>, address: usize, bytes: &[u8]) -> (bool, Vec<NP_Parsed_Schema>) {","highlight_start":1,"highlight_end":136},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"                (schema[schema.len() - 1].sortable, schema)","highlight_start":1,"highlight_end":60},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/numbers.rs:364:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m364\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                let use_schema = NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m466\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mnoproto_number!(i32,  \"int32\", \"i32\", NP_TypeKeys::Int32 , NP_NumType::signed);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/numbers.rs","byte_start":15158,"byte_end":15174,"line_start":364,"line_end":364,"column_start":34,"column_end":50,"is_primary":true,"text":[{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":34,"highlight_end":50}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/pointer/numbers.rs","byte_start":21035,"byte_end":21114,"line_start":467,"line_end":467,"column_start":1,"column_end":80,"is_primary":false,"text":[{"text":"noproto_number!(i64,  \"int64\", \"i64\", NP_TypeKeys::Int64 , NP_NumType::signed);","highlight_start":1,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"noproto_number!","def_site_span":{"file_name":"src/pointer/numbers.rs","byte_start":2213,"byte_end":20774,"line_start":67,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! noproto_number {","highlight_start":1,"highlight_end":30},{"text":"    ($t:ty, $str1: tt, $str2: tt, $tkey: expr, $numType: expr) => {","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> super::NP_Scalar<'value> for $t {","highlight_start":1,"highlight_end":55},{"text":"            fn schema_default(_schema: &NP_Parsed_Schema) -> Option<Self> where Self: Sized {","highlight_start":1,"highlight_end":94},{"text":"                Some(Self::default())","highlight_start":1,"highlight_end":38},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn np_max_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MAX)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn np_min_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MIN)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> NP_Value<'value> for $t {","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn type_idx() -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":75},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn self_type_idx(&self) -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":85},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn set_from_json<'set>(_depth: usize, _apply_null: bool, cursor: NP_Cursor, memory: &'set NP_Memory, value: &Box<NP_JSON>) -> Result<(), NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":186},{"text":"                match **value {","highlight_start":1,"highlight_end":32},{"text":"                    NP_JSON::Integer(int) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, int as $t)?;","highlight_start":1,"highlight_end":69},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Float(float) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, float as $t)?;","highlight_start":1,"highlight_end":71},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_json(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<NP_JSON, NP_Error> {","highlight_start":1,"highlight_end":108},{"text":"                let mut schema_json = JSMAP::new();","highlight_start":1,"highlight_end":52},{"text":"                schema_json.insert(\"type\".to_owned(), NP_JSON::String(Self::type_idx().0.to_string()));","highlight_start":1,"highlight_end":104},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    let default_val = default;","highlight_start":1,"highlight_end":47},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::unsigned => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::floating => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Float(default_val as f64));","highlight_start":1,"highlight_end":106},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                    ","highlight_start":1,"highlight_end":21},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                Ok(NP_JSON::Dictionary(schema_json))","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_idl(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<String, NP_Error> {","highlight_start":1,"highlight_end":106},{"text":"                let mut result = String::from($str2);","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    result.push_str(\"({default: \");","highlight_start":1,"highlight_end":52},{"text":"                    result.push_str(default.to_string().as_str());","highlight_start":1,"highlight_end":67},{"text":"                    result.push_str(\"})\");","highlight_start":1,"highlight_end":43},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    result.push_str(\"()\");","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(result)","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn from_idl_to_schema(mut schema: Vec<NP_Parsed_Schema>, _name: &str, idl: &JS_Schema, args: &Vec<JS_AST>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":181},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                let mut default: Option<$t> = None;","highlight_start":1,"highlight_end":52},{"text":"                let mut default_str: Option<String> = None;","highlight_start":1,"highlight_end":60},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if args.len() > 0 {","highlight_start":1,"highlight_end":36},{"text":"                    match &args[0] {","highlight_start":1,"highlight_end":37},{"text":"                        JS_AST::object { properties } => {","highlight_start":1,"highlight_end":59},{"text":"                            for (key, value) in properties.iter() {","highlight_start":1,"highlight_end":68},{"text":"                                match idl.get_str(key).trim() {","highlight_start":1,"highlight_end":64},{"text":"                                    \"default\" => {","highlight_start":1,"highlight_end":51},{"text":"                                        match value {","highlight_start":1,"highlight_end":54},{"text":"                                            JS_AST::number { addr } => {","highlight_start":1,"highlight_end":73},{"text":"                                                let trimmed = idl.get_str(addr).trim();","highlight_start":1,"highlight_end":88},{"text":"                                                match trimmed.parse::<$t>() {","highlight_start":1,"highlight_end":78},{"text":"                                                    Ok(x) => {","highlight_start":1,"highlight_end":63},{"text":"                                                        default_str = Some(String::from(trimmed));","highlight_start":1,"highlight_end":99},{"text":"                                                        default = Some(x);","highlight_start":1,"highlight_end":75},{"text":"                                                    },","highlight_start":1,"highlight_end":55},{"text":"                                                    Err(_e) => {  }","highlight_start":1,"highlight_end":68},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            },","highlight_start":1,"highlight_end":47},{"text":"                                            _ => { }","highlight_start":1,"highlight_end":53},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    _ => { }","highlight_start":1,"highlight_end":45},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { }","highlight_start":1,"highlight_end":33},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(x) = default {","highlight_start":1,"highlight_end":43},{"text":"                    schema_data.push(1);","highlight_start":1,"highlight_end":41},{"text":"                    schema_data.extend_from_slice(&(x as $t).to_be_bytes());","highlight_start":1,"highlight_end":77},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    schema_data.push(0);","highlight_start":1,"highlight_end":41},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn default_value<'default>(_depth: usize, addr: usize, schema: &'default Vec<NP_Parsed_Schema>) -> Option<Self> {","highlight_start":1,"highlight_end":126},{"text":"                <$t>::np_get_default(addr, &schema)","highlight_start":1,"highlight_end":52},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"            fn set_value<'set>(cursor: NP_Cursor, memory: &'set NP_Memory, value: Self) -> Result<NP_Cursor, NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":146},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut value_address = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if value_address != 0 { // existing value, replace","highlight_start":1,"highlight_end":67},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let write_bytes = memory.write_bytes();","highlight_start":1,"highlight_end":60},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    // overwrite existing values in buffer","highlight_start":1,"highlight_end":59},{"text":"                    for x in 0..bytes.len() {","highlight_start":1,"highlight_end":46},{"text":"                        write_bytes[value_address + x] = bytes[x];","highlight_start":1,"highlight_end":67},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                } else { // new value","highlight_start":1,"highlight_end":38},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    value_address = memory.malloc_borrow(&bytes)?;","highlight_start":1,"highlight_end":67},{"text":"                    cursor.get_value_mut(memory).set_addr_value(value_address as u32);","highlight_start":1,"highlight_end":87},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn into_value(cursor: &NP_Cursor, memory: &'value NP_Memory) -> Result<Option<Self>, NP_Error> where Self: Sized {","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let value_addr = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":70},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                // empty value","highlight_start":1,"highlight_end":31},{"text":"                if value_addr == 0 {","highlight_start":1,"highlight_end":37},{"text":"                    return Ok(None);","highlight_start":1,"highlight_end":37},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let read_memory = memory.read_bytes();","highlight_start":1,"highlight_end":55},{"text":"                let mut be_bytes = <$t>::default().to_be_bytes();","highlight_start":1,"highlight_end":66},{"text":"                for x in 0..be_bytes.len() {","highlight_start":1,"highlight_end":45},{"text":"                    be_bytes[x] = read_memory[value_addr + x];","highlight_start":1,"highlight_end":63},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match $numType {","highlight_start":1,"highlight_end":33},{"text":"                    NP_NumType::signed => {","highlight_start":1,"highlight_end":44},{"text":"                        be_bytes[0] = to_signed(be_bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(Some(<$t>::from_be_bytes(be_bytes)))","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn to_json(_depth:usize, cursor: &NP_Cursor, memory: &'value NP_Memory) -> NP_JSON {","highlight_start":1,"highlight_end":97},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match Self::into_value(cursor, memory) {","highlight_start":1,"highlight_end":57},{"text":"                    Ok(x) => {","highlight_start":1,"highlight_end":31},{"text":"                        match x {","highlight_start":1,"highlight_end":34},{"text":"                            Some(y) => {","highlight_start":1,"highlight_end":41},{"text":"                                match $numType {","highlight_start":1,"highlight_end":49},{"text":"                                    NP_NumType::floating => NP_JSON::Float(y as f64),","highlight_start":1,"highlight_end":86},{"text":"                                    _ => NP_JSON::Integer(y as i64)","highlight_start":1,"highlight_end":68},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            },","highlight_start":1,"highlight_end":31},{"text":"                            None => {","highlight_start":1,"highlight_end":38},{"text":"                                match <$t>::default_value(0, cursor.schema_addr, &memory.get_schemas()) {","highlight_start":1,"highlight_end":106},{"text":"                                    Some(v) => {","highlight_start":1,"highlight_end":49},{"text":"                                        match $numType {","highlight_start":1,"highlight_end":57},{"text":"                                            NP_NumType::floating => { NP_JSON::Float(v as f64) },","highlight_start":1,"highlight_end":98},{"text":"                                            _ => { NP_JSON::Integer(v as i64) }","highlight_start":1,"highlight_end":80},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    None => NP_JSON::Null","highlight_start":1,"highlight_end":58},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    Err(_e) => {","highlight_start":1,"highlight_end":33},{"text":"                        NP_JSON::Null","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn get_size(_depth:usize, cursor: &NP_Cursor, memory: &NP_Memory) -> Result<usize, NP_Error> {","highlight_start":1,"highlight_end":107},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if c_value().get_addr_value() == 0 {","highlight_start":1,"highlight_end":53},{"text":"                    Ok(0) ","highlight_start":1,"highlight_end":27},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Ok(core::mem::size_of::<Self>())","highlight_start":1,"highlight_end":53},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_json_to_schema(mut schema: Vec<NP_Parsed_Schema>, json_schema: &Box<NP_JSON>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":160},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"                match json_schema[\"default\"] {","highlight_start":1,"highlight_end":47},{"text":"                    NP_JSON::Float(x) => {","highlight_start":1,"highlight_end":43},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Integer(x) => {","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {","highlight_start":1,"highlight_end":27},{"text":"                        schema_data.push(0);","highlight_start":1,"highlight_end":45},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_bytes_to_schema(mut schema: Vec<NP_Parsed_Schema>, address: usize, bytes: &[u8]) -> (bool, Vec<NP_Parsed_Schema>) {","highlight_start":1,"highlight_end":136},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"                (schema[schema.len() - 1].sortable, schema)","highlight_start":1,"highlight_end":60},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/numbers.rs:364:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m364\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                let use_schema = NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m467\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mnoproto_number!(i64,  \"int64\", \"i64\", NP_TypeKeys::Int64 , NP_NumType::signed);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/numbers.rs","byte_start":15158,"byte_end":15174,"line_start":364,"line_end":364,"column_start":34,"column_end":50,"is_primary":true,"text":[{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":34,"highlight_end":50}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/pointer/numbers.rs","byte_start":21137,"byte_end":21218,"line_start":470,"line_end":470,"column_start":1,"column_end":82,"is_primary":false,"text":[{"text":"noproto_number!(u8,   \"uint8\",  \"u8\", NP_TypeKeys::Uint8 , NP_NumType::unsigned);","highlight_start":1,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"noproto_number!","def_site_span":{"file_name":"src/pointer/numbers.rs","byte_start":2213,"byte_end":20774,"line_start":67,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! noproto_number {","highlight_start":1,"highlight_end":30},{"text":"    ($t:ty, $str1: tt, $str2: tt, $tkey: expr, $numType: expr) => {","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> super::NP_Scalar<'value> for $t {","highlight_start":1,"highlight_end":55},{"text":"            fn schema_default(_schema: &NP_Parsed_Schema) -> Option<Self> where Self: Sized {","highlight_start":1,"highlight_end":94},{"text":"                Some(Self::default())","highlight_start":1,"highlight_end":38},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn np_max_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MAX)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn np_min_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MIN)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> NP_Value<'value> for $t {","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn type_idx() -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":75},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn self_type_idx(&self) -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":85},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn set_from_json<'set>(_depth: usize, _apply_null: bool, cursor: NP_Cursor, memory: &'set NP_Memory, value: &Box<NP_JSON>) -> Result<(), NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":186},{"text":"                match **value {","highlight_start":1,"highlight_end":32},{"text":"                    NP_JSON::Integer(int) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, int as $t)?;","highlight_start":1,"highlight_end":69},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Float(float) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, float as $t)?;","highlight_start":1,"highlight_end":71},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_json(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<NP_JSON, NP_Error> {","highlight_start":1,"highlight_end":108},{"text":"                let mut schema_json = JSMAP::new();","highlight_start":1,"highlight_end":52},{"text":"                schema_json.insert(\"type\".to_owned(), NP_JSON::String(Self::type_idx().0.to_string()));","highlight_start":1,"highlight_end":104},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    let default_val = default;","highlight_start":1,"highlight_end":47},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::unsigned => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::floating => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Float(default_val as f64));","highlight_start":1,"highlight_end":106},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                    ","highlight_start":1,"highlight_end":21},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                Ok(NP_JSON::Dictionary(schema_json))","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_idl(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<String, NP_Error> {","highlight_start":1,"highlight_end":106},{"text":"                let mut result = String::from($str2);","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    result.push_str(\"({default: \");","highlight_start":1,"highlight_end":52},{"text":"                    result.push_str(default.to_string().as_str());","highlight_start":1,"highlight_end":67},{"text":"                    result.push_str(\"})\");","highlight_start":1,"highlight_end":43},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    result.push_str(\"()\");","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(result)","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn from_idl_to_schema(mut schema: Vec<NP_Parsed_Schema>, _name: &str, idl: &JS_Schema, args: &Vec<JS_AST>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":181},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                let mut default: Option<$t> = None;","highlight_start":1,"highlight_end":52},{"text":"                let mut default_str: Option<String> = None;","highlight_start":1,"highlight_end":60},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if args.len() > 0 {","highlight_start":1,"highlight_end":36},{"text":"                    match &args[0] {","highlight_start":1,"highlight_end":37},{"text":"                        JS_AST::object { properties } => {","highlight_start":1,"highlight_end":59},{"text":"                            for (key, value) in properties.iter() {","highlight_start":1,"highlight_end":68},{"text":"                                match idl.get_str(key).trim() {","highlight_start":1,"highlight_end":64},{"text":"                                    \"default\" => {","highlight_start":1,"highlight_end":51},{"text":"                                        match value {","highlight_start":1,"highlight_end":54},{"text":"                                            JS_AST::number { addr } => {","highlight_start":1,"highlight_end":73},{"text":"                                                let trimmed = idl.get_str(addr).trim();","highlight_start":1,"highlight_end":88},{"text":"                                                match trimmed.parse::<$t>() {","highlight_start":1,"highlight_end":78},{"text":"                                                    Ok(x) => {","highlight_start":1,"highlight_end":63},{"text":"                                                        default_str = Some(String::from(trimmed));","highlight_start":1,"highlight_end":99},{"text":"                                                        default = Some(x);","highlight_start":1,"highlight_end":75},{"text":"                                                    },","highlight_start":1,"highlight_end":55},{"text":"                                                    Err(_e) => {  }","highlight_start":1,"highlight_end":68},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            },","highlight_start":1,"highlight_end":47},{"text":"                                            _ => { }","highlight_start":1,"highlight_end":53},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    _ => { }","highlight_start":1,"highlight_end":45},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { }","highlight_start":1,"highlight_end":33},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(x) = default {","highlight_start":1,"highlight_end":43},{"text":"                    schema_data.push(1);","highlight_start":1,"highlight_end":41},{"text":"                    schema_data.extend_from_slice(&(x as $t).to_be_bytes());","highlight_start":1,"highlight_end":77},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    schema_data.push(0);","highlight_start":1,"highlight_end":41},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn default_value<'default>(_depth: usize, addr: usize, schema: &'default Vec<NP_Parsed_Schema>) -> Option<Self> {","highlight_start":1,"highlight_end":126},{"text":"                <$t>::np_get_default(addr, &schema)","highlight_start":1,"highlight_end":52},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"            fn set_value<'set>(cursor: NP_Cursor, memory: &'set NP_Memory, value: Self) -> Result<NP_Cursor, NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":146},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut value_address = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if value_address != 0 { // existing value, replace","highlight_start":1,"highlight_end":67},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let write_bytes = memory.write_bytes();","highlight_start":1,"highlight_end":60},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    // overwrite existing values in buffer","highlight_start":1,"highlight_end":59},{"text":"                    for x in 0..bytes.len() {","highlight_start":1,"highlight_end":46},{"text":"                        write_bytes[value_address + x] = bytes[x];","highlight_start":1,"highlight_end":67},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                } else { // new value","highlight_start":1,"highlight_end":38},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    value_address = memory.malloc_borrow(&bytes)?;","highlight_start":1,"highlight_end":67},{"text":"                    cursor.get_value_mut(memory).set_addr_value(value_address as u32);","highlight_start":1,"highlight_end":87},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn into_value(cursor: &NP_Cursor, memory: &'value NP_Memory) -> Result<Option<Self>, NP_Error> where Self: Sized {","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let value_addr = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":70},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                // empty value","highlight_start":1,"highlight_end":31},{"text":"                if value_addr == 0 {","highlight_start":1,"highlight_end":37},{"text":"                    return Ok(None);","highlight_start":1,"highlight_end":37},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let read_memory = memory.read_bytes();","highlight_start":1,"highlight_end":55},{"text":"                let mut be_bytes = <$t>::default().to_be_bytes();","highlight_start":1,"highlight_end":66},{"text":"                for x in 0..be_bytes.len() {","highlight_start":1,"highlight_end":45},{"text":"                    be_bytes[x] = read_memory[value_addr + x];","highlight_start":1,"highlight_end":63},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match $numType {","highlight_start":1,"highlight_end":33},{"text":"                    NP_NumType::signed => {","highlight_start":1,"highlight_end":44},{"text":"                        be_bytes[0] = to_signed(be_bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(Some(<$t>::from_be_bytes(be_bytes)))","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn to_json(_depth:usize, cursor: &NP_Cursor, memory: &'value NP_Memory) -> NP_JSON {","highlight_start":1,"highlight_end":97},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match Self::into_value(cursor, memory) {","highlight_start":1,"highlight_end":57},{"text":"                    Ok(x) => {","highlight_start":1,"highlight_end":31},{"text":"                        match x {","highlight_start":1,"highlight_end":34},{"text":"                            Some(y) => {","highlight_start":1,"highlight_end":41},{"text":"                                match $numType {","highlight_start":1,"highlight_end":49},{"text":"                                    NP_NumType::floating => NP_JSON::Float(y as f64),","highlight_start":1,"highlight_end":86},{"text":"                                    _ => NP_JSON::Integer(y as i64)","highlight_start":1,"highlight_end":68},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            },","highlight_start":1,"highlight_end":31},{"text":"                            None => {","highlight_start":1,"highlight_end":38},{"text":"                                match <$t>::default_value(0, cursor.schema_addr, &memory.get_schemas()) {","highlight_start":1,"highlight_end":106},{"text":"                                    Some(v) => {","highlight_start":1,"highlight_end":49},{"text":"                                        match $numType {","highlight_start":1,"highlight_end":57},{"text":"                                            NP_NumType::floating => { NP_JSON::Float(v as f64) },","highlight_start":1,"highlight_end":98},{"text":"                                            _ => { NP_JSON::Integer(v as i64) }","highlight_start":1,"highlight_end":80},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    None => NP_JSON::Null","highlight_start":1,"highlight_end":58},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    Err(_e) => {","highlight_start":1,"highlight_end":33},{"text":"                        NP_JSON::Null","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn get_size(_depth:usize, cursor: &NP_Cursor, memory: &NP_Memory) -> Result<usize, NP_Error> {","highlight_start":1,"highlight_end":107},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if c_value().get_addr_value() == 0 {","highlight_start":1,"highlight_end":53},{"text":"                    Ok(0) ","highlight_start":1,"highlight_end":27},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Ok(core::mem::size_of::<Self>())","highlight_start":1,"highlight_end":53},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_json_to_schema(mut schema: Vec<NP_Parsed_Schema>, json_schema: &Box<NP_JSON>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":160},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"                match json_schema[\"default\"] {","highlight_start":1,"highlight_end":47},{"text":"                    NP_JSON::Float(x) => {","highlight_start":1,"highlight_end":43},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Integer(x) => {","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {","highlight_start":1,"highlight_end":27},{"text":"                        schema_data.push(0);","highlight_start":1,"highlight_end":45},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_bytes_to_schema(mut schema: Vec<NP_Parsed_Schema>, address: usize, bytes: &[u8]) -> (bool, Vec<NP_Parsed_Schema>) {","highlight_start":1,"highlight_end":136},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"                (schema[schema.len() - 1].sortable, schema)","highlight_start":1,"highlight_end":60},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/numbers.rs:364:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m364\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                let use_schema = NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m470\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mnoproto_number!(u8,   \"uint8\",  \"u8\", NP_TypeKeys::Uint8 , NP_NumType::unsigned);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/numbers.rs","byte_start":15158,"byte_end":15174,"line_start":364,"line_end":364,"column_start":34,"column_end":50,"is_primary":true,"text":[{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":34,"highlight_end":50}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/pointer/numbers.rs","byte_start":21219,"byte_end":21300,"line_start":471,"line_end":471,"column_start":1,"column_end":82,"is_primary":false,"text":[{"text":"noproto_number!(u16, \"uint16\", \"u16\", NP_TypeKeys::Uint16, NP_NumType::unsigned);","highlight_start":1,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"noproto_number!","def_site_span":{"file_name":"src/pointer/numbers.rs","byte_start":2213,"byte_end":20774,"line_start":67,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! noproto_number {","highlight_start":1,"highlight_end":30},{"text":"    ($t:ty, $str1: tt, $str2: tt, $tkey: expr, $numType: expr) => {","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> super::NP_Scalar<'value> for $t {","highlight_start":1,"highlight_end":55},{"text":"            fn schema_default(_schema: &NP_Parsed_Schema) -> Option<Self> where Self: Sized {","highlight_start":1,"highlight_end":94},{"text":"                Some(Self::default())","highlight_start":1,"highlight_end":38},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn np_max_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MAX)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn np_min_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MIN)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> NP_Value<'value> for $t {","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn type_idx() -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":75},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn self_type_idx(&self) -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":85},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn set_from_json<'set>(_depth: usize, _apply_null: bool, cursor: NP_Cursor, memory: &'set NP_Memory, value: &Box<NP_JSON>) -> Result<(), NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":186},{"text":"                match **value {","highlight_start":1,"highlight_end":32},{"text":"                    NP_JSON::Integer(int) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, int as $t)?;","highlight_start":1,"highlight_end":69},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Float(float) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, float as $t)?;","highlight_start":1,"highlight_end":71},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_json(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<NP_JSON, NP_Error> {","highlight_start":1,"highlight_end":108},{"text":"                let mut schema_json = JSMAP::new();","highlight_start":1,"highlight_end":52},{"text":"                schema_json.insert(\"type\".to_owned(), NP_JSON::String(Self::type_idx().0.to_string()));","highlight_start":1,"highlight_end":104},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    let default_val = default;","highlight_start":1,"highlight_end":47},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::unsigned => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::floating => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Float(default_val as f64));","highlight_start":1,"highlight_end":106},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                    ","highlight_start":1,"highlight_end":21},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                Ok(NP_JSON::Dictionary(schema_json))","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_idl(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<String, NP_Error> {","highlight_start":1,"highlight_end":106},{"text":"                let mut result = String::from($str2);","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    result.push_str(\"({default: \");","highlight_start":1,"highlight_end":52},{"text":"                    result.push_str(default.to_string().as_str());","highlight_start":1,"highlight_end":67},{"text":"                    result.push_str(\"})\");","highlight_start":1,"highlight_end":43},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    result.push_str(\"()\");","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(result)","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn from_idl_to_schema(mut schema: Vec<NP_Parsed_Schema>, _name: &str, idl: &JS_Schema, args: &Vec<JS_AST>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":181},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                let mut default: Option<$t> = None;","highlight_start":1,"highlight_end":52},{"text":"                let mut default_str: Option<String> = None;","highlight_start":1,"highlight_end":60},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if args.len() > 0 {","highlight_start":1,"highlight_end":36},{"text":"                    match &args[0] {","highlight_start":1,"highlight_end":37},{"text":"                        JS_AST::object { properties } => {","highlight_start":1,"highlight_end":59},{"text":"                            for (key, value) in properties.iter() {","highlight_start":1,"highlight_end":68},{"text":"                                match idl.get_str(key).trim() {","highlight_start":1,"highlight_end":64},{"text":"                                    \"default\" => {","highlight_start":1,"highlight_end":51},{"text":"                                        match value {","highlight_start":1,"highlight_end":54},{"text":"                                            JS_AST::number { addr } => {","highlight_start":1,"highlight_end":73},{"text":"                                                let trimmed = idl.get_str(addr).trim();","highlight_start":1,"highlight_end":88},{"text":"                                                match trimmed.parse::<$t>() {","highlight_start":1,"highlight_end":78},{"text":"                                                    Ok(x) => {","highlight_start":1,"highlight_end":63},{"text":"                                                        default_str = Some(String::from(trimmed));","highlight_start":1,"highlight_end":99},{"text":"                                                        default = Some(x);","highlight_start":1,"highlight_end":75},{"text":"                                                    },","highlight_start":1,"highlight_end":55},{"text":"                                                    Err(_e) => {  }","highlight_start":1,"highlight_end":68},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            },","highlight_start":1,"highlight_end":47},{"text":"                                            _ => { }","highlight_start":1,"highlight_end":53},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    _ => { }","highlight_start":1,"highlight_end":45},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { }","highlight_start":1,"highlight_end":33},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(x) = default {","highlight_start":1,"highlight_end":43},{"text":"                    schema_data.push(1);","highlight_start":1,"highlight_end":41},{"text":"                    schema_data.extend_from_slice(&(x as $t).to_be_bytes());","highlight_start":1,"highlight_end":77},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    schema_data.push(0);","highlight_start":1,"highlight_end":41},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn default_value<'default>(_depth: usize, addr: usize, schema: &'default Vec<NP_Parsed_Schema>) -> Option<Self> {","highlight_start":1,"highlight_end":126},{"text":"                <$t>::np_get_default(addr, &schema)","highlight_start":1,"highlight_end":52},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"            fn set_value<'set>(cursor: NP_Cursor, memory: &'set NP_Memory, value: Self) -> Result<NP_Cursor, NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":146},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut value_address = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if value_address != 0 { // existing value, replace","highlight_start":1,"highlight_end":67},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let write_bytes = memory.write_bytes();","highlight_start":1,"highlight_end":60},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    // overwrite existing values in buffer","highlight_start":1,"highlight_end":59},{"text":"                    for x in 0..bytes.len() {","highlight_start":1,"highlight_end":46},{"text":"                        write_bytes[value_address + x] = bytes[x];","highlight_start":1,"highlight_end":67},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                } else { // new value","highlight_start":1,"highlight_end":38},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    value_address = memory.malloc_borrow(&bytes)?;","highlight_start":1,"highlight_end":67},{"text":"                    cursor.get_value_mut(memory).set_addr_value(value_address as u32);","highlight_start":1,"highlight_end":87},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn into_value(cursor: &NP_Cursor, memory: &'value NP_Memory) -> Result<Option<Self>, NP_Error> where Self: Sized {","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let value_addr = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":70},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                // empty value","highlight_start":1,"highlight_end":31},{"text":"                if value_addr == 0 {","highlight_start":1,"highlight_end":37},{"text":"                    return Ok(None);","highlight_start":1,"highlight_end":37},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let read_memory = memory.read_bytes();","highlight_start":1,"highlight_end":55},{"text":"                let mut be_bytes = <$t>::default().to_be_bytes();","highlight_start":1,"highlight_end":66},{"text":"                for x in 0..be_bytes.len() {","highlight_start":1,"highlight_end":45},{"text":"                    be_bytes[x] = read_memory[value_addr + x];","highlight_start":1,"highlight_end":63},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match $numType {","highlight_start":1,"highlight_end":33},{"text":"                    NP_NumType::signed => {","highlight_start":1,"highlight_end":44},{"text":"                        be_bytes[0] = to_signed(be_bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(Some(<$t>::from_be_bytes(be_bytes)))","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn to_json(_depth:usize, cursor: &NP_Cursor, memory: &'value NP_Memory) -> NP_JSON {","highlight_start":1,"highlight_end":97},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match Self::into_value(cursor, memory) {","highlight_start":1,"highlight_end":57},{"text":"                    Ok(x) => {","highlight_start":1,"highlight_end":31},{"text":"                        match x {","highlight_start":1,"highlight_end":34},{"text":"                            Some(y) => {","highlight_start":1,"highlight_end":41},{"text":"                                match $numType {","highlight_start":1,"highlight_end":49},{"text":"                                    NP_NumType::floating => NP_JSON::Float(y as f64),","highlight_start":1,"highlight_end":86},{"text":"                                    _ => NP_JSON::Integer(y as i64)","highlight_start":1,"highlight_end":68},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            },","highlight_start":1,"highlight_end":31},{"text":"                            None => {","highlight_start":1,"highlight_end":38},{"text":"                                match <$t>::default_value(0, cursor.schema_addr, &memory.get_schemas()) {","highlight_start":1,"highlight_end":106},{"text":"                                    Some(v) => {","highlight_start":1,"highlight_end":49},{"text":"                                        match $numType {","highlight_start":1,"highlight_end":57},{"text":"                                            NP_NumType::floating => { NP_JSON::Float(v as f64) },","highlight_start":1,"highlight_end":98},{"text":"                                            _ => { NP_JSON::Integer(v as i64) }","highlight_start":1,"highlight_end":80},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    None => NP_JSON::Null","highlight_start":1,"highlight_end":58},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    Err(_e) => {","highlight_start":1,"highlight_end":33},{"text":"                        NP_JSON::Null","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn get_size(_depth:usize, cursor: &NP_Cursor, memory: &NP_Memory) -> Result<usize, NP_Error> {","highlight_start":1,"highlight_end":107},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if c_value().get_addr_value() == 0 {","highlight_start":1,"highlight_end":53},{"text":"                    Ok(0) ","highlight_start":1,"highlight_end":27},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Ok(core::mem::size_of::<Self>())","highlight_start":1,"highlight_end":53},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_json_to_schema(mut schema: Vec<NP_Parsed_Schema>, json_schema: &Box<NP_JSON>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":160},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"                match json_schema[\"default\"] {","highlight_start":1,"highlight_end":47},{"text":"                    NP_JSON::Float(x) => {","highlight_start":1,"highlight_end":43},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Integer(x) => {","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {","highlight_start":1,"highlight_end":27},{"text":"                        schema_data.push(0);","highlight_start":1,"highlight_end":45},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_bytes_to_schema(mut schema: Vec<NP_Parsed_Schema>, address: usize, bytes: &[u8]) -> (bool, Vec<NP_Parsed_Schema>) {","highlight_start":1,"highlight_end":136},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"                (schema[schema.len() - 1].sortable, schema)","highlight_start":1,"highlight_end":60},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/numbers.rs:364:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m364\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                let use_schema = NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m471\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mnoproto_number!(u16, \"uint16\", \"u16\", NP_TypeKeys::Uint16, NP_NumType::unsigned);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/numbers.rs","byte_start":15158,"byte_end":15174,"line_start":364,"line_end":364,"column_start":34,"column_end":50,"is_primary":true,"text":[{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":34,"highlight_end":50}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/pointer/numbers.rs","byte_start":21301,"byte_end":21382,"line_start":472,"line_end":472,"column_start":1,"column_end":82,"is_primary":false,"text":[{"text":"noproto_number!(u32, \"uint32\", \"u32\", NP_TypeKeys::Uint32, NP_NumType::unsigned);","highlight_start":1,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"noproto_number!","def_site_span":{"file_name":"src/pointer/numbers.rs","byte_start":2213,"byte_end":20774,"line_start":67,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! noproto_number {","highlight_start":1,"highlight_end":30},{"text":"    ($t:ty, $str1: tt, $str2: tt, $tkey: expr, $numType: expr) => {","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> super::NP_Scalar<'value> for $t {","highlight_start":1,"highlight_end":55},{"text":"            fn schema_default(_schema: &NP_Parsed_Schema) -> Option<Self> where Self: Sized {","highlight_start":1,"highlight_end":94},{"text":"                Some(Self::default())","highlight_start":1,"highlight_end":38},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn np_max_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MAX)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn np_min_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MIN)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> NP_Value<'value> for $t {","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn type_idx() -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":75},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn self_type_idx(&self) -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":85},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn set_from_json<'set>(_depth: usize, _apply_null: bool, cursor: NP_Cursor, memory: &'set NP_Memory, value: &Box<NP_JSON>) -> Result<(), NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":186},{"text":"                match **value {","highlight_start":1,"highlight_end":32},{"text":"                    NP_JSON::Integer(int) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, int as $t)?;","highlight_start":1,"highlight_end":69},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Float(float) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, float as $t)?;","highlight_start":1,"highlight_end":71},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_json(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<NP_JSON, NP_Error> {","highlight_start":1,"highlight_end":108},{"text":"                let mut schema_json = JSMAP::new();","highlight_start":1,"highlight_end":52},{"text":"                schema_json.insert(\"type\".to_owned(), NP_JSON::String(Self::type_idx().0.to_string()));","highlight_start":1,"highlight_end":104},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    let default_val = default;","highlight_start":1,"highlight_end":47},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::unsigned => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::floating => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Float(default_val as f64));","highlight_start":1,"highlight_end":106},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                    ","highlight_start":1,"highlight_end":21},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                Ok(NP_JSON::Dictionary(schema_json))","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_idl(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<String, NP_Error> {","highlight_start":1,"highlight_end":106},{"text":"                let mut result = String::from($str2);","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    result.push_str(\"({default: \");","highlight_start":1,"highlight_end":52},{"text":"                    result.push_str(default.to_string().as_str());","highlight_start":1,"highlight_end":67},{"text":"                    result.push_str(\"})\");","highlight_start":1,"highlight_end":43},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    result.push_str(\"()\");","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(result)","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn from_idl_to_schema(mut schema: Vec<NP_Parsed_Schema>, _name: &str, idl: &JS_Schema, args: &Vec<JS_AST>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":181},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                let mut default: Option<$t> = None;","highlight_start":1,"highlight_end":52},{"text":"                let mut default_str: Option<String> = None;","highlight_start":1,"highlight_end":60},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if args.len() > 0 {","highlight_start":1,"highlight_end":36},{"text":"                    match &args[0] {","highlight_start":1,"highlight_end":37},{"text":"                        JS_AST::object { properties } => {","highlight_start":1,"highlight_end":59},{"text":"                            for (key, value) in properties.iter() {","highlight_start":1,"highlight_end":68},{"text":"                                match idl.get_str(key).trim() {","highlight_start":1,"highlight_end":64},{"text":"                                    \"default\" => {","highlight_start":1,"highlight_end":51},{"text":"                                        match value {","highlight_start":1,"highlight_end":54},{"text":"                                            JS_AST::number { addr } => {","highlight_start":1,"highlight_end":73},{"text":"                                                let trimmed = idl.get_str(addr).trim();","highlight_start":1,"highlight_end":88},{"text":"                                                match trimmed.parse::<$t>() {","highlight_start":1,"highlight_end":78},{"text":"                                                    Ok(x) => {","highlight_start":1,"highlight_end":63},{"text":"                                                        default_str = Some(String::from(trimmed));","highlight_start":1,"highlight_end":99},{"text":"                                                        default = Some(x);","highlight_start":1,"highlight_end":75},{"text":"                                                    },","highlight_start":1,"highlight_end":55},{"text":"                                                    Err(_e) => {  }","highlight_start":1,"highlight_end":68},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            },","highlight_start":1,"highlight_end":47},{"text":"                                            _ => { }","highlight_start":1,"highlight_end":53},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    _ => { }","highlight_start":1,"highlight_end":45},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { }","highlight_start":1,"highlight_end":33},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(x) = default {","highlight_start":1,"highlight_end":43},{"text":"                    schema_data.push(1);","highlight_start":1,"highlight_end":41},{"text":"                    schema_data.extend_from_slice(&(x as $t).to_be_bytes());","highlight_start":1,"highlight_end":77},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    schema_data.push(0);","highlight_start":1,"highlight_end":41},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn default_value<'default>(_depth: usize, addr: usize, schema: &'default Vec<NP_Parsed_Schema>) -> Option<Self> {","highlight_start":1,"highlight_end":126},{"text":"                <$t>::np_get_default(addr, &schema)","highlight_start":1,"highlight_end":52},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"            fn set_value<'set>(cursor: NP_Cursor, memory: &'set NP_Memory, value: Self) -> Result<NP_Cursor, NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":146},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut value_address = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if value_address != 0 { // existing value, replace","highlight_start":1,"highlight_end":67},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let write_bytes = memory.write_bytes();","highlight_start":1,"highlight_end":60},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    // overwrite existing values in buffer","highlight_start":1,"highlight_end":59},{"text":"                    for x in 0..bytes.len() {","highlight_start":1,"highlight_end":46},{"text":"                        write_bytes[value_address + x] = bytes[x];","highlight_start":1,"highlight_end":67},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                } else { // new value","highlight_start":1,"highlight_end":38},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    value_address = memory.malloc_borrow(&bytes)?;","highlight_start":1,"highlight_end":67},{"text":"                    cursor.get_value_mut(memory).set_addr_value(value_address as u32);","highlight_start":1,"highlight_end":87},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn into_value(cursor: &NP_Cursor, memory: &'value NP_Memory) -> Result<Option<Self>, NP_Error> where Self: Sized {","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let value_addr = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":70},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                // empty value","highlight_start":1,"highlight_end":31},{"text":"                if value_addr == 0 {","highlight_start":1,"highlight_end":37},{"text":"                    return Ok(None);","highlight_start":1,"highlight_end":37},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let read_memory = memory.read_bytes();","highlight_start":1,"highlight_end":55},{"text":"                let mut be_bytes = <$t>::default().to_be_bytes();","highlight_start":1,"highlight_end":66},{"text":"                for x in 0..be_bytes.len() {","highlight_start":1,"highlight_end":45},{"text":"                    be_bytes[x] = read_memory[value_addr + x];","highlight_start":1,"highlight_end":63},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match $numType {","highlight_start":1,"highlight_end":33},{"text":"                    NP_NumType::signed => {","highlight_start":1,"highlight_end":44},{"text":"                        be_bytes[0] = to_signed(be_bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(Some(<$t>::from_be_bytes(be_bytes)))","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn to_json(_depth:usize, cursor: &NP_Cursor, memory: &'value NP_Memory) -> NP_JSON {","highlight_start":1,"highlight_end":97},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match Self::into_value(cursor, memory) {","highlight_start":1,"highlight_end":57},{"text":"                    Ok(x) => {","highlight_start":1,"highlight_end":31},{"text":"                        match x {","highlight_start":1,"highlight_end":34},{"text":"                            Some(y) => {","highlight_start":1,"highlight_end":41},{"text":"                                match $numType {","highlight_start":1,"highlight_end":49},{"text":"                                    NP_NumType::floating => NP_JSON::Float(y as f64),","highlight_start":1,"highlight_end":86},{"text":"                                    _ => NP_JSON::Integer(y as i64)","highlight_start":1,"highlight_end":68},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            },","highlight_start":1,"highlight_end":31},{"text":"                            None => {","highlight_start":1,"highlight_end":38},{"text":"                                match <$t>::default_value(0, cursor.schema_addr, &memory.get_schemas()) {","highlight_start":1,"highlight_end":106},{"text":"                                    Some(v) => {","highlight_start":1,"highlight_end":49},{"text":"                                        match $numType {","highlight_start":1,"highlight_end":57},{"text":"                                            NP_NumType::floating => { NP_JSON::Float(v as f64) },","highlight_start":1,"highlight_end":98},{"text":"                                            _ => { NP_JSON::Integer(v as i64) }","highlight_start":1,"highlight_end":80},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    None => NP_JSON::Null","highlight_start":1,"highlight_end":58},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    Err(_e) => {","highlight_start":1,"highlight_end":33},{"text":"                        NP_JSON::Null","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn get_size(_depth:usize, cursor: &NP_Cursor, memory: &NP_Memory) -> Result<usize, NP_Error> {","highlight_start":1,"highlight_end":107},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if c_value().get_addr_value() == 0 {","highlight_start":1,"highlight_end":53},{"text":"                    Ok(0) ","highlight_start":1,"highlight_end":27},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Ok(core::mem::size_of::<Self>())","highlight_start":1,"highlight_end":53},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_json_to_schema(mut schema: Vec<NP_Parsed_Schema>, json_schema: &Box<NP_JSON>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":160},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"                match json_schema[\"default\"] {","highlight_start":1,"highlight_end":47},{"text":"                    NP_JSON::Float(x) => {","highlight_start":1,"highlight_end":43},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Integer(x) => {","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {","highlight_start":1,"highlight_end":27},{"text":"                        schema_data.push(0);","highlight_start":1,"highlight_end":45},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_bytes_to_schema(mut schema: Vec<NP_Parsed_Schema>, address: usize, bytes: &[u8]) -> (bool, Vec<NP_Parsed_Schema>) {","highlight_start":1,"highlight_end":136},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"                (schema[schema.len() - 1].sortable, schema)","highlight_start":1,"highlight_end":60},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/numbers.rs:364:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m364\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                let use_schema = NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m472\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mnoproto_number!(u32, \"uint32\", \"u32\", NP_TypeKeys::Uint32, NP_NumType::unsigned);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/numbers.rs","byte_start":15158,"byte_end":15174,"line_start":364,"line_end":364,"column_start":34,"column_end":50,"is_primary":true,"text":[{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":34,"highlight_end":50}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/pointer/numbers.rs","byte_start":21383,"byte_end":21464,"line_start":473,"line_end":473,"column_start":1,"column_end":82,"is_primary":false,"text":[{"text":"noproto_number!(u64, \"uint64\", \"u64\", NP_TypeKeys::Uint64, NP_NumType::unsigned);","highlight_start":1,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"noproto_number!","def_site_span":{"file_name":"src/pointer/numbers.rs","byte_start":2213,"byte_end":20774,"line_start":67,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! noproto_number {","highlight_start":1,"highlight_end":30},{"text":"    ($t:ty, $str1: tt, $str2: tt, $tkey: expr, $numType: expr) => {","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> super::NP_Scalar<'value> for $t {","highlight_start":1,"highlight_end":55},{"text":"            fn schema_default(_schema: &NP_Parsed_Schema) -> Option<Self> where Self: Sized {","highlight_start":1,"highlight_end":94},{"text":"                Some(Self::default())","highlight_start":1,"highlight_end":38},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn np_max_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MAX)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn np_min_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MIN)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> NP_Value<'value> for $t {","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn type_idx() -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":75},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn self_type_idx(&self) -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":85},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn set_from_json<'set>(_depth: usize, _apply_null: bool, cursor: NP_Cursor, memory: &'set NP_Memory, value: &Box<NP_JSON>) -> Result<(), NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":186},{"text":"                match **value {","highlight_start":1,"highlight_end":32},{"text":"                    NP_JSON::Integer(int) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, int as $t)?;","highlight_start":1,"highlight_end":69},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Float(float) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, float as $t)?;","highlight_start":1,"highlight_end":71},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_json(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<NP_JSON, NP_Error> {","highlight_start":1,"highlight_end":108},{"text":"                let mut schema_json = JSMAP::new();","highlight_start":1,"highlight_end":52},{"text":"                schema_json.insert(\"type\".to_owned(), NP_JSON::String(Self::type_idx().0.to_string()));","highlight_start":1,"highlight_end":104},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    let default_val = default;","highlight_start":1,"highlight_end":47},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::unsigned => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::floating => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Float(default_val as f64));","highlight_start":1,"highlight_end":106},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                    ","highlight_start":1,"highlight_end":21},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                Ok(NP_JSON::Dictionary(schema_json))","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_idl(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<String, NP_Error> {","highlight_start":1,"highlight_end":106},{"text":"                let mut result = String::from($str2);","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    result.push_str(\"({default: \");","highlight_start":1,"highlight_end":52},{"text":"                    result.push_str(default.to_string().as_str());","highlight_start":1,"highlight_end":67},{"text":"                    result.push_str(\"})\");","highlight_start":1,"highlight_end":43},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    result.push_str(\"()\");","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(result)","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn from_idl_to_schema(mut schema: Vec<NP_Parsed_Schema>, _name: &str, idl: &JS_Schema, args: &Vec<JS_AST>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":181},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                let mut default: Option<$t> = None;","highlight_start":1,"highlight_end":52},{"text":"                let mut default_str: Option<String> = None;","highlight_start":1,"highlight_end":60},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if args.len() > 0 {","highlight_start":1,"highlight_end":36},{"text":"                    match &args[0] {","highlight_start":1,"highlight_end":37},{"text":"                        JS_AST::object { properties } => {","highlight_start":1,"highlight_end":59},{"text":"                            for (key, value) in properties.iter() {","highlight_start":1,"highlight_end":68},{"text":"                                match idl.get_str(key).trim() {","highlight_start":1,"highlight_end":64},{"text":"                                    \"default\" => {","highlight_start":1,"highlight_end":51},{"text":"                                        match value {","highlight_start":1,"highlight_end":54},{"text":"                                            JS_AST::number { addr } => {","highlight_start":1,"highlight_end":73},{"text":"                                                let trimmed = idl.get_str(addr).trim();","highlight_start":1,"highlight_end":88},{"text":"                                                match trimmed.parse::<$t>() {","highlight_start":1,"highlight_end":78},{"text":"                                                    Ok(x) => {","highlight_start":1,"highlight_end":63},{"text":"                                                        default_str = Some(String::from(trimmed));","highlight_start":1,"highlight_end":99},{"text":"                                                        default = Some(x);","highlight_start":1,"highlight_end":75},{"text":"                                                    },","highlight_start":1,"highlight_end":55},{"text":"                                                    Err(_e) => {  }","highlight_start":1,"highlight_end":68},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            },","highlight_start":1,"highlight_end":47},{"text":"                                            _ => { }","highlight_start":1,"highlight_end":53},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    _ => { }","highlight_start":1,"highlight_end":45},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { }","highlight_start":1,"highlight_end":33},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(x) = default {","highlight_start":1,"highlight_end":43},{"text":"                    schema_data.push(1);","highlight_start":1,"highlight_end":41},{"text":"                    schema_data.extend_from_slice(&(x as $t).to_be_bytes());","highlight_start":1,"highlight_end":77},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    schema_data.push(0);","highlight_start":1,"highlight_end":41},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn default_value<'default>(_depth: usize, addr: usize, schema: &'default Vec<NP_Parsed_Schema>) -> Option<Self> {","highlight_start":1,"highlight_end":126},{"text":"                <$t>::np_get_default(addr, &schema)","highlight_start":1,"highlight_end":52},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"            fn set_value<'set>(cursor: NP_Cursor, memory: &'set NP_Memory, value: Self) -> Result<NP_Cursor, NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":146},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut value_address = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if value_address != 0 { // existing value, replace","highlight_start":1,"highlight_end":67},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let write_bytes = memory.write_bytes();","highlight_start":1,"highlight_end":60},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    // overwrite existing values in buffer","highlight_start":1,"highlight_end":59},{"text":"                    for x in 0..bytes.len() {","highlight_start":1,"highlight_end":46},{"text":"                        write_bytes[value_address + x] = bytes[x];","highlight_start":1,"highlight_end":67},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                } else { // new value","highlight_start":1,"highlight_end":38},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    value_address = memory.malloc_borrow(&bytes)?;","highlight_start":1,"highlight_end":67},{"text":"                    cursor.get_value_mut(memory).set_addr_value(value_address as u32);","highlight_start":1,"highlight_end":87},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn into_value(cursor: &NP_Cursor, memory: &'value NP_Memory) -> Result<Option<Self>, NP_Error> where Self: Sized {","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let value_addr = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":70},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                // empty value","highlight_start":1,"highlight_end":31},{"text":"                if value_addr == 0 {","highlight_start":1,"highlight_end":37},{"text":"                    return Ok(None);","highlight_start":1,"highlight_end":37},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let read_memory = memory.read_bytes();","highlight_start":1,"highlight_end":55},{"text":"                let mut be_bytes = <$t>::default().to_be_bytes();","highlight_start":1,"highlight_end":66},{"text":"                for x in 0..be_bytes.len() {","highlight_start":1,"highlight_end":45},{"text":"                    be_bytes[x] = read_memory[value_addr + x];","highlight_start":1,"highlight_end":63},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match $numType {","highlight_start":1,"highlight_end":33},{"text":"                    NP_NumType::signed => {","highlight_start":1,"highlight_end":44},{"text":"                        be_bytes[0] = to_signed(be_bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(Some(<$t>::from_be_bytes(be_bytes)))","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn to_json(_depth:usize, cursor: &NP_Cursor, memory: &'value NP_Memory) -> NP_JSON {","highlight_start":1,"highlight_end":97},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match Self::into_value(cursor, memory) {","highlight_start":1,"highlight_end":57},{"text":"                    Ok(x) => {","highlight_start":1,"highlight_end":31},{"text":"                        match x {","highlight_start":1,"highlight_end":34},{"text":"                            Some(y) => {","highlight_start":1,"highlight_end":41},{"text":"                                match $numType {","highlight_start":1,"highlight_end":49},{"text":"                                    NP_NumType::floating => NP_JSON::Float(y as f64),","highlight_start":1,"highlight_end":86},{"text":"                                    _ => NP_JSON::Integer(y as i64)","highlight_start":1,"highlight_end":68},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            },","highlight_start":1,"highlight_end":31},{"text":"                            None => {","highlight_start":1,"highlight_end":38},{"text":"                                match <$t>::default_value(0, cursor.schema_addr, &memory.get_schemas()) {","highlight_start":1,"highlight_end":106},{"text":"                                    Some(v) => {","highlight_start":1,"highlight_end":49},{"text":"                                        match $numType {","highlight_start":1,"highlight_end":57},{"text":"                                            NP_NumType::floating => { NP_JSON::Float(v as f64) },","highlight_start":1,"highlight_end":98},{"text":"                                            _ => { NP_JSON::Integer(v as i64) }","highlight_start":1,"highlight_end":80},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    None => NP_JSON::Null","highlight_start":1,"highlight_end":58},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    Err(_e) => {","highlight_start":1,"highlight_end":33},{"text":"                        NP_JSON::Null","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn get_size(_depth:usize, cursor: &NP_Cursor, memory: &NP_Memory) -> Result<usize, NP_Error> {","highlight_start":1,"highlight_end":107},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if c_value().get_addr_value() == 0 {","highlight_start":1,"highlight_end":53},{"text":"                    Ok(0) ","highlight_start":1,"highlight_end":27},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Ok(core::mem::size_of::<Self>())","highlight_start":1,"highlight_end":53},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_json_to_schema(mut schema: Vec<NP_Parsed_Schema>, json_schema: &Box<NP_JSON>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":160},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"                match json_schema[\"default\"] {","highlight_start":1,"highlight_end":47},{"text":"                    NP_JSON::Float(x) => {","highlight_start":1,"highlight_end":43},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Integer(x) => {","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {","highlight_start":1,"highlight_end":27},{"text":"                        schema_data.push(0);","highlight_start":1,"highlight_end":45},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_bytes_to_schema(mut schema: Vec<NP_Parsed_Schema>, address: usize, bytes: &[u8]) -> (bool, Vec<NP_Parsed_Schema>) {","highlight_start":1,"highlight_end":136},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"                (schema[schema.len() - 1].sortable, schema)","highlight_start":1,"highlight_end":60},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/numbers.rs:364:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m364\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                let use_schema = NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m473\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mnoproto_number!(u64, \"uint64\", \"u64\", NP_TypeKeys::Uint64, NP_NumType::unsigned);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/numbers.rs","byte_start":15158,"byte_end":15174,"line_start":364,"line_end":364,"column_start":34,"column_end":50,"is_primary":true,"text":[{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":34,"highlight_end":50}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/pointer/numbers.rs","byte_start":21484,"byte_end":21565,"line_start":476,"line_end":476,"column_start":1,"column_end":82,"is_primary":false,"text":[{"text":"noproto_number!(f32,  \"float\", \"f32\", NP_TypeKeys::Float , NP_NumType::floating);","highlight_start":1,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"noproto_number!","def_site_span":{"file_name":"src/pointer/numbers.rs","byte_start":2213,"byte_end":20774,"line_start":67,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! noproto_number {","highlight_start":1,"highlight_end":30},{"text":"    ($t:ty, $str1: tt, $str2: tt, $tkey: expr, $numType: expr) => {","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> super::NP_Scalar<'value> for $t {","highlight_start":1,"highlight_end":55},{"text":"            fn schema_default(_schema: &NP_Parsed_Schema) -> Option<Self> where Self: Sized {","highlight_start":1,"highlight_end":94},{"text":"                Some(Self::default())","highlight_start":1,"highlight_end":38},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn np_max_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MAX)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn np_min_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MIN)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> NP_Value<'value> for $t {","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn type_idx() -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":75},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn self_type_idx(&self) -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":85},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn set_from_json<'set>(_depth: usize, _apply_null: bool, cursor: NP_Cursor, memory: &'set NP_Memory, value: &Box<NP_JSON>) -> Result<(), NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":186},{"text":"                match **value {","highlight_start":1,"highlight_end":32},{"text":"                    NP_JSON::Integer(int) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, int as $t)?;","highlight_start":1,"highlight_end":69},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Float(float) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, float as $t)?;","highlight_start":1,"highlight_end":71},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_json(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<NP_JSON, NP_Error> {","highlight_start":1,"highlight_end":108},{"text":"                let mut schema_json = JSMAP::new();","highlight_start":1,"highlight_end":52},{"text":"                schema_json.insert(\"type\".to_owned(), NP_JSON::String(Self::type_idx().0.to_string()));","highlight_start":1,"highlight_end":104},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    let default_val = default;","highlight_start":1,"highlight_end":47},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::unsigned => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::floating => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Float(default_val as f64));","highlight_start":1,"highlight_end":106},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                    ","highlight_start":1,"highlight_end":21},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                Ok(NP_JSON::Dictionary(schema_json))","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_idl(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<String, NP_Error> {","highlight_start":1,"highlight_end":106},{"text":"                let mut result = String::from($str2);","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    result.push_str(\"({default: \");","highlight_start":1,"highlight_end":52},{"text":"                    result.push_str(default.to_string().as_str());","highlight_start":1,"highlight_end":67},{"text":"                    result.push_str(\"})\");","highlight_start":1,"highlight_end":43},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    result.push_str(\"()\");","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(result)","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn from_idl_to_schema(mut schema: Vec<NP_Parsed_Schema>, _name: &str, idl: &JS_Schema, args: &Vec<JS_AST>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":181},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                let mut default: Option<$t> = None;","highlight_start":1,"highlight_end":52},{"text":"                let mut default_str: Option<String> = None;","highlight_start":1,"highlight_end":60},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if args.len() > 0 {","highlight_start":1,"highlight_end":36},{"text":"                    match &args[0] {","highlight_start":1,"highlight_end":37},{"text":"                        JS_AST::object { properties } => {","highlight_start":1,"highlight_end":59},{"text":"                            for (key, value) in properties.iter() {","highlight_start":1,"highlight_end":68},{"text":"                                match idl.get_str(key).trim() {","highlight_start":1,"highlight_end":64},{"text":"                                    \"default\" => {","highlight_start":1,"highlight_end":51},{"text":"                                        match value {","highlight_start":1,"highlight_end":54},{"text":"                                            JS_AST::number { addr } => {","highlight_start":1,"highlight_end":73},{"text":"                                                let trimmed = idl.get_str(addr).trim();","highlight_start":1,"highlight_end":88},{"text":"                                                match trimmed.parse::<$t>() {","highlight_start":1,"highlight_end":78},{"text":"                                                    Ok(x) => {","highlight_start":1,"highlight_end":63},{"text":"                                                        default_str = Some(String::from(trimmed));","highlight_start":1,"highlight_end":99},{"text":"                                                        default = Some(x);","highlight_start":1,"highlight_end":75},{"text":"                                                    },","highlight_start":1,"highlight_end":55},{"text":"                                                    Err(_e) => {  }","highlight_start":1,"highlight_end":68},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            },","highlight_start":1,"highlight_end":47},{"text":"                                            _ => { }","highlight_start":1,"highlight_end":53},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    _ => { }","highlight_start":1,"highlight_end":45},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { }","highlight_start":1,"highlight_end":33},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(x) = default {","highlight_start":1,"highlight_end":43},{"text":"                    schema_data.push(1);","highlight_start":1,"highlight_end":41},{"text":"                    schema_data.extend_from_slice(&(x as $t).to_be_bytes());","highlight_start":1,"highlight_end":77},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    schema_data.push(0);","highlight_start":1,"highlight_end":41},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn default_value<'default>(_depth: usize, addr: usize, schema: &'default Vec<NP_Parsed_Schema>) -> Option<Self> {","highlight_start":1,"highlight_end":126},{"text":"                <$t>::np_get_default(addr, &schema)","highlight_start":1,"highlight_end":52},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"            fn set_value<'set>(cursor: NP_Cursor, memory: &'set NP_Memory, value: Self) -> Result<NP_Cursor, NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":146},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut value_address = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if value_address != 0 { // existing value, replace","highlight_start":1,"highlight_end":67},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let write_bytes = memory.write_bytes();","highlight_start":1,"highlight_end":60},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    // overwrite existing values in buffer","highlight_start":1,"highlight_end":59},{"text":"                    for x in 0..bytes.len() {","highlight_start":1,"highlight_end":46},{"text":"                        write_bytes[value_address + x] = bytes[x];","highlight_start":1,"highlight_end":67},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                } else { // new value","highlight_start":1,"highlight_end":38},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    value_address = memory.malloc_borrow(&bytes)?;","highlight_start":1,"highlight_end":67},{"text":"                    cursor.get_value_mut(memory).set_addr_value(value_address as u32);","highlight_start":1,"highlight_end":87},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn into_value(cursor: &NP_Cursor, memory: &'value NP_Memory) -> Result<Option<Self>, NP_Error> where Self: Sized {","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let value_addr = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":70},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                // empty value","highlight_start":1,"highlight_end":31},{"text":"                if value_addr == 0 {","highlight_start":1,"highlight_end":37},{"text":"                    return Ok(None);","highlight_start":1,"highlight_end":37},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let read_memory = memory.read_bytes();","highlight_start":1,"highlight_end":55},{"text":"                let mut be_bytes = <$t>::default().to_be_bytes();","highlight_start":1,"highlight_end":66},{"text":"                for x in 0..be_bytes.len() {","highlight_start":1,"highlight_end":45},{"text":"                    be_bytes[x] = read_memory[value_addr + x];","highlight_start":1,"highlight_end":63},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match $numType {","highlight_start":1,"highlight_end":33},{"text":"                    NP_NumType::signed => {","highlight_start":1,"highlight_end":44},{"text":"                        be_bytes[0] = to_signed(be_bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(Some(<$t>::from_be_bytes(be_bytes)))","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn to_json(_depth:usize, cursor: &NP_Cursor, memory: &'value NP_Memory) -> NP_JSON {","highlight_start":1,"highlight_end":97},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match Self::into_value(cursor, memory) {","highlight_start":1,"highlight_end":57},{"text":"                    Ok(x) => {","highlight_start":1,"highlight_end":31},{"text":"                        match x {","highlight_start":1,"highlight_end":34},{"text":"                            Some(y) => {","highlight_start":1,"highlight_end":41},{"text":"                                match $numType {","highlight_start":1,"highlight_end":49},{"text":"                                    NP_NumType::floating => NP_JSON::Float(y as f64),","highlight_start":1,"highlight_end":86},{"text":"                                    _ => NP_JSON::Integer(y as i64)","highlight_start":1,"highlight_end":68},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            },","highlight_start":1,"highlight_end":31},{"text":"                            None => {","highlight_start":1,"highlight_end":38},{"text":"                                match <$t>::default_value(0, cursor.schema_addr, &memory.get_schemas()) {","highlight_start":1,"highlight_end":106},{"text":"                                    Some(v) => {","highlight_start":1,"highlight_end":49},{"text":"                                        match $numType {","highlight_start":1,"highlight_end":57},{"text":"                                            NP_NumType::floating => { NP_JSON::Float(v as f64) },","highlight_start":1,"highlight_end":98},{"text":"                                            _ => { NP_JSON::Integer(v as i64) }","highlight_start":1,"highlight_end":80},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    None => NP_JSON::Null","highlight_start":1,"highlight_end":58},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    Err(_e) => {","highlight_start":1,"highlight_end":33},{"text":"                        NP_JSON::Null","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn get_size(_depth:usize, cursor: &NP_Cursor, memory: &NP_Memory) -> Result<usize, NP_Error> {","highlight_start":1,"highlight_end":107},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if c_value().get_addr_value() == 0 {","highlight_start":1,"highlight_end":53},{"text":"                    Ok(0) ","highlight_start":1,"highlight_end":27},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Ok(core::mem::size_of::<Self>())","highlight_start":1,"highlight_end":53},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_json_to_schema(mut schema: Vec<NP_Parsed_Schema>, json_schema: &Box<NP_JSON>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":160},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"                match json_schema[\"default\"] {","highlight_start":1,"highlight_end":47},{"text":"                    NP_JSON::Float(x) => {","highlight_start":1,"highlight_end":43},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Integer(x) => {","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {","highlight_start":1,"highlight_end":27},{"text":"                        schema_data.push(0);","highlight_start":1,"highlight_end":45},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_bytes_to_schema(mut schema: Vec<NP_Parsed_Schema>, address: usize, bytes: &[u8]) -> (bool, Vec<NP_Parsed_Schema>) {","highlight_start":1,"highlight_end":136},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"                (schema[schema.len() - 1].sortable, schema)","highlight_start":1,"highlight_end":60},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/numbers.rs:364:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m364\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                let use_schema = NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m476\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mnoproto_number!(f32,  \"float\", \"f32\", NP_TypeKeys::Float , NP_NumType::floating);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/numbers.rs","byte_start":15158,"byte_end":15174,"line_start":364,"line_end":364,"column_start":34,"column_end":50,"is_primary":true,"text":[{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":34,"highlight_end":50}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/pointer/numbers.rs","byte_start":21566,"byte_end":21647,"line_start":477,"line_end":477,"column_start":1,"column_end":82,"is_primary":false,"text":[{"text":"noproto_number!(f64, \"double\", \"f64\", NP_TypeKeys::Double, NP_NumType::floating);","highlight_start":1,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"noproto_number!","def_site_span":{"file_name":"src/pointer/numbers.rs","byte_start":2213,"byte_end":20774,"line_start":67,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! noproto_number {","highlight_start":1,"highlight_end":30},{"text":"    ($t:ty, $str1: tt, $str2: tt, $tkey: expr, $numType: expr) => {","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> super::NP_Scalar<'value> for $t {","highlight_start":1,"highlight_end":55},{"text":"            fn schema_default(_schema: &NP_Parsed_Schema) -> Option<Self> where Self: Sized {","highlight_start":1,"highlight_end":94},{"text":"                Some(Self::default())","highlight_start":1,"highlight_end":38},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn np_max_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MAX)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn np_min_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MIN)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> NP_Value<'value> for $t {","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn type_idx() -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":75},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn self_type_idx(&self) -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":85},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn set_from_json<'set>(_depth: usize, _apply_null: bool, cursor: NP_Cursor, memory: &'set NP_Memory, value: &Box<NP_JSON>) -> Result<(), NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":186},{"text":"                match **value {","highlight_start":1,"highlight_end":32},{"text":"                    NP_JSON::Integer(int) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, int as $t)?;","highlight_start":1,"highlight_end":69},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Float(float) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, float as $t)?;","highlight_start":1,"highlight_end":71},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_json(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<NP_JSON, NP_Error> {","highlight_start":1,"highlight_end":108},{"text":"                let mut schema_json = JSMAP::new();","highlight_start":1,"highlight_end":52},{"text":"                schema_json.insert(\"type\".to_owned(), NP_JSON::String(Self::type_idx().0.to_string()));","highlight_start":1,"highlight_end":104},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    let default_val = default;","highlight_start":1,"highlight_end":47},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::unsigned => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::floating => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Float(default_val as f64));","highlight_start":1,"highlight_end":106},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                    ","highlight_start":1,"highlight_end":21},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                Ok(NP_JSON::Dictionary(schema_json))","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_idl(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<String, NP_Error> {","highlight_start":1,"highlight_end":106},{"text":"                let mut result = String::from($str2);","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    result.push_str(\"({default: \");","highlight_start":1,"highlight_end":52},{"text":"                    result.push_str(default.to_string().as_str());","highlight_start":1,"highlight_end":67},{"text":"                    result.push_str(\"})\");","highlight_start":1,"highlight_end":43},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    result.push_str(\"()\");","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(result)","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn from_idl_to_schema(mut schema: Vec<NP_Parsed_Schema>, _name: &str, idl: &JS_Schema, args: &Vec<JS_AST>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":181},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                let mut default: Option<$t> = None;","highlight_start":1,"highlight_end":52},{"text":"                let mut default_str: Option<String> = None;","highlight_start":1,"highlight_end":60},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if args.len() > 0 {","highlight_start":1,"highlight_end":36},{"text":"                    match &args[0] {","highlight_start":1,"highlight_end":37},{"text":"                        JS_AST::object { properties } => {","highlight_start":1,"highlight_end":59},{"text":"                            for (key, value) in properties.iter() {","highlight_start":1,"highlight_end":68},{"text":"                                match idl.get_str(key).trim() {","highlight_start":1,"highlight_end":64},{"text":"                                    \"default\" => {","highlight_start":1,"highlight_end":51},{"text":"                                        match value {","highlight_start":1,"highlight_end":54},{"text":"                                            JS_AST::number { addr } => {","highlight_start":1,"highlight_end":73},{"text":"                                                let trimmed = idl.get_str(addr).trim();","highlight_start":1,"highlight_end":88},{"text":"                                                match trimmed.parse::<$t>() {","highlight_start":1,"highlight_end":78},{"text":"                                                    Ok(x) => {","highlight_start":1,"highlight_end":63},{"text":"                                                        default_str = Some(String::from(trimmed));","highlight_start":1,"highlight_end":99},{"text":"                                                        default = Some(x);","highlight_start":1,"highlight_end":75},{"text":"                                                    },","highlight_start":1,"highlight_end":55},{"text":"                                                    Err(_e) => {  }","highlight_start":1,"highlight_end":68},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            },","highlight_start":1,"highlight_end":47},{"text":"                                            _ => { }","highlight_start":1,"highlight_end":53},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    _ => { }","highlight_start":1,"highlight_end":45},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { }","highlight_start":1,"highlight_end":33},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(x) = default {","highlight_start":1,"highlight_end":43},{"text":"                    schema_data.push(1);","highlight_start":1,"highlight_end":41},{"text":"                    schema_data.extend_from_slice(&(x as $t).to_be_bytes());","highlight_start":1,"highlight_end":77},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    schema_data.push(0);","highlight_start":1,"highlight_end":41},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn default_value<'default>(_depth: usize, addr: usize, schema: &'default Vec<NP_Parsed_Schema>) -> Option<Self> {","highlight_start":1,"highlight_end":126},{"text":"                <$t>::np_get_default(addr, &schema)","highlight_start":1,"highlight_end":52},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"            fn set_value<'set>(cursor: NP_Cursor, memory: &'set NP_Memory, value: Self) -> Result<NP_Cursor, NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":146},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut value_address = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if value_address != 0 { // existing value, replace","highlight_start":1,"highlight_end":67},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let write_bytes = memory.write_bytes();","highlight_start":1,"highlight_end":60},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    // overwrite existing values in buffer","highlight_start":1,"highlight_end":59},{"text":"                    for x in 0..bytes.len() {","highlight_start":1,"highlight_end":46},{"text":"                        write_bytes[value_address + x] = bytes[x];","highlight_start":1,"highlight_end":67},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                } else { // new value","highlight_start":1,"highlight_end":38},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    value_address = memory.malloc_borrow(&bytes)?;","highlight_start":1,"highlight_end":67},{"text":"                    cursor.get_value_mut(memory).set_addr_value(value_address as u32);","highlight_start":1,"highlight_end":87},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn into_value(cursor: &NP_Cursor, memory: &'value NP_Memory) -> Result<Option<Self>, NP_Error> where Self: Sized {","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let value_addr = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":70},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                // empty value","highlight_start":1,"highlight_end":31},{"text":"                if value_addr == 0 {","highlight_start":1,"highlight_end":37},{"text":"                    return Ok(None);","highlight_start":1,"highlight_end":37},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let read_memory = memory.read_bytes();","highlight_start":1,"highlight_end":55},{"text":"                let mut be_bytes = <$t>::default().to_be_bytes();","highlight_start":1,"highlight_end":66},{"text":"                for x in 0..be_bytes.len() {","highlight_start":1,"highlight_end":45},{"text":"                    be_bytes[x] = read_memory[value_addr + x];","highlight_start":1,"highlight_end":63},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match $numType {","highlight_start":1,"highlight_end":33},{"text":"                    NP_NumType::signed => {","highlight_start":1,"highlight_end":44},{"text":"                        be_bytes[0] = to_signed(be_bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(Some(<$t>::from_be_bytes(be_bytes)))","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn to_json(_depth:usize, cursor: &NP_Cursor, memory: &'value NP_Memory) -> NP_JSON {","highlight_start":1,"highlight_end":97},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match Self::into_value(cursor, memory) {","highlight_start":1,"highlight_end":57},{"text":"                    Ok(x) => {","highlight_start":1,"highlight_end":31},{"text":"                        match x {","highlight_start":1,"highlight_end":34},{"text":"                            Some(y) => {","highlight_start":1,"highlight_end":41},{"text":"                                match $numType {","highlight_start":1,"highlight_end":49},{"text":"                                    NP_NumType::floating => NP_JSON::Float(y as f64),","highlight_start":1,"highlight_end":86},{"text":"                                    _ => NP_JSON::Integer(y as i64)","highlight_start":1,"highlight_end":68},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            },","highlight_start":1,"highlight_end":31},{"text":"                            None => {","highlight_start":1,"highlight_end":38},{"text":"                                match <$t>::default_value(0, cursor.schema_addr, &memory.get_schemas()) {","highlight_start":1,"highlight_end":106},{"text":"                                    Some(v) => {","highlight_start":1,"highlight_end":49},{"text":"                                        match $numType {","highlight_start":1,"highlight_end":57},{"text":"                                            NP_NumType::floating => { NP_JSON::Float(v as f64) },","highlight_start":1,"highlight_end":98},{"text":"                                            _ => { NP_JSON::Integer(v as i64) }","highlight_start":1,"highlight_end":80},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    None => NP_JSON::Null","highlight_start":1,"highlight_end":58},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    Err(_e) => {","highlight_start":1,"highlight_end":33},{"text":"                        NP_JSON::Null","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn get_size(_depth:usize, cursor: &NP_Cursor, memory: &NP_Memory) -> Result<usize, NP_Error> {","highlight_start":1,"highlight_end":107},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if c_value().get_addr_value() == 0 {","highlight_start":1,"highlight_end":53},{"text":"                    Ok(0) ","highlight_start":1,"highlight_end":27},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Ok(core::mem::size_of::<Self>())","highlight_start":1,"highlight_end":53},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_json_to_schema(mut schema: Vec<NP_Parsed_Schema>, json_schema: &Box<NP_JSON>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":160},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"                match json_schema[\"default\"] {","highlight_start":1,"highlight_end":47},{"text":"                    NP_JSON::Float(x) => {","highlight_start":1,"highlight_end":43},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Integer(x) => {","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {","highlight_start":1,"highlight_end":27},{"text":"                        schema_data.push(0);","highlight_start":1,"highlight_end":45},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_bytes_to_schema(mut schema: Vec<NP_Parsed_Schema>, address: usize, bytes: &[u8]) -> (bool, Vec<NP_Parsed_Schema>) {","highlight_start":1,"highlight_end":136},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"                (schema[schema.len() - 1].sortable, schema)","highlight_start":1,"highlight_end":60},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/numbers.rs:364:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m364\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                let use_schema = NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m477\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mnoproto_number!(f64, \"double\", \"f64\", NP_TypeKeys::Double, NP_NumType::floating);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/numbers.rs","byte_start":18088,"byte_end":18104,"line_start":414,"line_end":414,"column_start":34,"column_end":50,"is_primary":true,"text":[{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":34,"highlight_end":50}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/pointer/numbers.rs","byte_start":20795,"byte_end":20874,"line_start":464,"line_end":464,"column_start":1,"column_end":80,"is_primary":false,"text":[{"text":"noproto_number!(i8,    \"int8\",  \"i8\", NP_TypeKeys::Int8  , NP_NumType::signed);","highlight_start":1,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"noproto_number!","def_site_span":{"file_name":"src/pointer/numbers.rs","byte_start":2213,"byte_end":20774,"line_start":67,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! noproto_number {","highlight_start":1,"highlight_end":30},{"text":"    ($t:ty, $str1: tt, $str2: tt, $tkey: expr, $numType: expr) => {","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> super::NP_Scalar<'value> for $t {","highlight_start":1,"highlight_end":55},{"text":"            fn schema_default(_schema: &NP_Parsed_Schema) -> Option<Self> where Self: Sized {","highlight_start":1,"highlight_end":94},{"text":"                Some(Self::default())","highlight_start":1,"highlight_end":38},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn np_max_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MAX)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn np_min_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MIN)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> NP_Value<'value> for $t {","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn type_idx() -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":75},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn self_type_idx(&self) -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":85},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn set_from_json<'set>(_depth: usize, _apply_null: bool, cursor: NP_Cursor, memory: &'set NP_Memory, value: &Box<NP_JSON>) -> Result<(), NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":186},{"text":"                match **value {","highlight_start":1,"highlight_end":32},{"text":"                    NP_JSON::Integer(int) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, int as $t)?;","highlight_start":1,"highlight_end":69},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Float(float) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, float as $t)?;","highlight_start":1,"highlight_end":71},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_json(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<NP_JSON, NP_Error> {","highlight_start":1,"highlight_end":108},{"text":"                let mut schema_json = JSMAP::new();","highlight_start":1,"highlight_end":52},{"text":"                schema_json.insert(\"type\".to_owned(), NP_JSON::String(Self::type_idx().0.to_string()));","highlight_start":1,"highlight_end":104},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    let default_val = default;","highlight_start":1,"highlight_end":47},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::unsigned => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::floating => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Float(default_val as f64));","highlight_start":1,"highlight_end":106},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                    ","highlight_start":1,"highlight_end":21},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                Ok(NP_JSON::Dictionary(schema_json))","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_idl(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<String, NP_Error> {","highlight_start":1,"highlight_end":106},{"text":"                let mut result = String::from($str2);","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    result.push_str(\"({default: \");","highlight_start":1,"highlight_end":52},{"text":"                    result.push_str(default.to_string().as_str());","highlight_start":1,"highlight_end":67},{"text":"                    result.push_str(\"})\");","highlight_start":1,"highlight_end":43},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    result.push_str(\"()\");","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(result)","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn from_idl_to_schema(mut schema: Vec<NP_Parsed_Schema>, _name: &str, idl: &JS_Schema, args: &Vec<JS_AST>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":181},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                let mut default: Option<$t> = None;","highlight_start":1,"highlight_end":52},{"text":"                let mut default_str: Option<String> = None;","highlight_start":1,"highlight_end":60},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if args.len() > 0 {","highlight_start":1,"highlight_end":36},{"text":"                    match &args[0] {","highlight_start":1,"highlight_end":37},{"text":"                        JS_AST::object { properties } => {","highlight_start":1,"highlight_end":59},{"text":"                            for (key, value) in properties.iter() {","highlight_start":1,"highlight_end":68},{"text":"                                match idl.get_str(key).trim() {","highlight_start":1,"highlight_end":64},{"text":"                                    \"default\" => {","highlight_start":1,"highlight_end":51},{"text":"                                        match value {","highlight_start":1,"highlight_end":54},{"text":"                                            JS_AST::number { addr } => {","highlight_start":1,"highlight_end":73},{"text":"                                                let trimmed = idl.get_str(addr).trim();","highlight_start":1,"highlight_end":88},{"text":"                                                match trimmed.parse::<$t>() {","highlight_start":1,"highlight_end":78},{"text":"                                                    Ok(x) => {","highlight_start":1,"highlight_end":63},{"text":"                                                        default_str = Some(String::from(trimmed));","highlight_start":1,"highlight_end":99},{"text":"                                                        default = Some(x);","highlight_start":1,"highlight_end":75},{"text":"                                                    },","highlight_start":1,"highlight_end":55},{"text":"                                                    Err(_e) => {  }","highlight_start":1,"highlight_end":68},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            },","highlight_start":1,"highlight_end":47},{"text":"                                            _ => { }","highlight_start":1,"highlight_end":53},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    _ => { }","highlight_start":1,"highlight_end":45},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { }","highlight_start":1,"highlight_end":33},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(x) = default {","highlight_start":1,"highlight_end":43},{"text":"                    schema_data.push(1);","highlight_start":1,"highlight_end":41},{"text":"                    schema_data.extend_from_slice(&(x as $t).to_be_bytes());","highlight_start":1,"highlight_end":77},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    schema_data.push(0);","highlight_start":1,"highlight_end":41},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn default_value<'default>(_depth: usize, addr: usize, schema: &'default Vec<NP_Parsed_Schema>) -> Option<Self> {","highlight_start":1,"highlight_end":126},{"text":"                <$t>::np_get_default(addr, &schema)","highlight_start":1,"highlight_end":52},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"            fn set_value<'set>(cursor: NP_Cursor, memory: &'set NP_Memory, value: Self) -> Result<NP_Cursor, NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":146},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut value_address = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if value_address != 0 { // existing value, replace","highlight_start":1,"highlight_end":67},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let write_bytes = memory.write_bytes();","highlight_start":1,"highlight_end":60},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    // overwrite existing values in buffer","highlight_start":1,"highlight_end":59},{"text":"                    for x in 0..bytes.len() {","highlight_start":1,"highlight_end":46},{"text":"                        write_bytes[value_address + x] = bytes[x];","highlight_start":1,"highlight_end":67},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                } else { // new value","highlight_start":1,"highlight_end":38},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    value_address = memory.malloc_borrow(&bytes)?;","highlight_start":1,"highlight_end":67},{"text":"                    cursor.get_value_mut(memory).set_addr_value(value_address as u32);","highlight_start":1,"highlight_end":87},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn into_value(cursor: &NP_Cursor, memory: &'value NP_Memory) -> Result<Option<Self>, NP_Error> where Self: Sized {","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let value_addr = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":70},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                // empty value","highlight_start":1,"highlight_end":31},{"text":"                if value_addr == 0 {","highlight_start":1,"highlight_end":37},{"text":"                    return Ok(None);","highlight_start":1,"highlight_end":37},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let read_memory = memory.read_bytes();","highlight_start":1,"highlight_end":55},{"text":"                let mut be_bytes = <$t>::default().to_be_bytes();","highlight_start":1,"highlight_end":66},{"text":"                for x in 0..be_bytes.len() {","highlight_start":1,"highlight_end":45},{"text":"                    be_bytes[x] = read_memory[value_addr + x];","highlight_start":1,"highlight_end":63},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match $numType {","highlight_start":1,"highlight_end":33},{"text":"                    NP_NumType::signed => {","highlight_start":1,"highlight_end":44},{"text":"                        be_bytes[0] = to_signed(be_bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(Some(<$t>::from_be_bytes(be_bytes)))","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn to_json(_depth:usize, cursor: &NP_Cursor, memory: &'value NP_Memory) -> NP_JSON {","highlight_start":1,"highlight_end":97},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match Self::into_value(cursor, memory) {","highlight_start":1,"highlight_end":57},{"text":"                    Ok(x) => {","highlight_start":1,"highlight_end":31},{"text":"                        match x {","highlight_start":1,"highlight_end":34},{"text":"                            Some(y) => {","highlight_start":1,"highlight_end":41},{"text":"                                match $numType {","highlight_start":1,"highlight_end":49},{"text":"                                    NP_NumType::floating => NP_JSON::Float(y as f64),","highlight_start":1,"highlight_end":86},{"text":"                                    _ => NP_JSON::Integer(y as i64)","highlight_start":1,"highlight_end":68},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            },","highlight_start":1,"highlight_end":31},{"text":"                            None => {","highlight_start":1,"highlight_end":38},{"text":"                                match <$t>::default_value(0, cursor.schema_addr, &memory.get_schemas()) {","highlight_start":1,"highlight_end":106},{"text":"                                    Some(v) => {","highlight_start":1,"highlight_end":49},{"text":"                                        match $numType {","highlight_start":1,"highlight_end":57},{"text":"                                            NP_NumType::floating => { NP_JSON::Float(v as f64) },","highlight_start":1,"highlight_end":98},{"text":"                                            _ => { NP_JSON::Integer(v as i64) }","highlight_start":1,"highlight_end":80},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    None => NP_JSON::Null","highlight_start":1,"highlight_end":58},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    Err(_e) => {","highlight_start":1,"highlight_end":33},{"text":"                        NP_JSON::Null","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn get_size(_depth:usize, cursor: &NP_Cursor, memory: &NP_Memory) -> Result<usize, NP_Error> {","highlight_start":1,"highlight_end":107},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if c_value().get_addr_value() == 0 {","highlight_start":1,"highlight_end":53},{"text":"                    Ok(0) ","highlight_start":1,"highlight_end":27},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Ok(core::mem::size_of::<Self>())","highlight_start":1,"highlight_end":53},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_json_to_schema(mut schema: Vec<NP_Parsed_Schema>, json_schema: &Box<NP_JSON>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":160},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"                match json_schema[\"default\"] {","highlight_start":1,"highlight_end":47},{"text":"                    NP_JSON::Float(x) => {","highlight_start":1,"highlight_end":43},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Integer(x) => {","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {","highlight_start":1,"highlight_end":27},{"text":"                        schema_data.push(0);","highlight_start":1,"highlight_end":45},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_bytes_to_schema(mut schema: Vec<NP_Parsed_Schema>, address: usize, bytes: &[u8]) -> (bool, Vec<NP_Parsed_Schema>) {","highlight_start":1,"highlight_end":136},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"                (schema[schema.len() - 1].sortable, schema)","highlight_start":1,"highlight_end":60},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/numbers.rs:414:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m414\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                let use_schema = NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m464\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mnoproto_number!(i8,    \"int8\",  \"i8\", NP_TypeKeys::Int8  , NP_NumType::signed);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/numbers.rs","byte_start":18088,"byte_end":18104,"line_start":414,"line_end":414,"column_start":34,"column_end":50,"is_primary":true,"text":[{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":34,"highlight_end":50}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/pointer/numbers.rs","byte_start":20875,"byte_end":20954,"line_start":465,"line_end":465,"column_start":1,"column_end":80,"is_primary":false,"text":[{"text":"noproto_number!(i16,  \"int16\", \"i16\", NP_TypeKeys::Int16 , NP_NumType::signed);","highlight_start":1,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"noproto_number!","def_site_span":{"file_name":"src/pointer/numbers.rs","byte_start":2213,"byte_end":20774,"line_start":67,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! noproto_number {","highlight_start":1,"highlight_end":30},{"text":"    ($t:ty, $str1: tt, $str2: tt, $tkey: expr, $numType: expr) => {","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> super::NP_Scalar<'value> for $t {","highlight_start":1,"highlight_end":55},{"text":"            fn schema_default(_schema: &NP_Parsed_Schema) -> Option<Self> where Self: Sized {","highlight_start":1,"highlight_end":94},{"text":"                Some(Self::default())","highlight_start":1,"highlight_end":38},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn np_max_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MAX)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn np_min_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MIN)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> NP_Value<'value> for $t {","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn type_idx() -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":75},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn self_type_idx(&self) -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":85},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn set_from_json<'set>(_depth: usize, _apply_null: bool, cursor: NP_Cursor, memory: &'set NP_Memory, value: &Box<NP_JSON>) -> Result<(), NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":186},{"text":"                match **value {","highlight_start":1,"highlight_end":32},{"text":"                    NP_JSON::Integer(int) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, int as $t)?;","highlight_start":1,"highlight_end":69},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Float(float) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, float as $t)?;","highlight_start":1,"highlight_end":71},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_json(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<NP_JSON, NP_Error> {","highlight_start":1,"highlight_end":108},{"text":"                let mut schema_json = JSMAP::new();","highlight_start":1,"highlight_end":52},{"text":"                schema_json.insert(\"type\".to_owned(), NP_JSON::String(Self::type_idx().0.to_string()));","highlight_start":1,"highlight_end":104},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    let default_val = default;","highlight_start":1,"highlight_end":47},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::unsigned => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::floating => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Float(default_val as f64));","highlight_start":1,"highlight_end":106},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                    ","highlight_start":1,"highlight_end":21},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                Ok(NP_JSON::Dictionary(schema_json))","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_idl(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<String, NP_Error> {","highlight_start":1,"highlight_end":106},{"text":"                let mut result = String::from($str2);","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    result.push_str(\"({default: \");","highlight_start":1,"highlight_end":52},{"text":"                    result.push_str(default.to_string().as_str());","highlight_start":1,"highlight_end":67},{"text":"                    result.push_str(\"})\");","highlight_start":1,"highlight_end":43},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    result.push_str(\"()\");","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(result)","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn from_idl_to_schema(mut schema: Vec<NP_Parsed_Schema>, _name: &str, idl: &JS_Schema, args: &Vec<JS_AST>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":181},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                let mut default: Option<$t> = None;","highlight_start":1,"highlight_end":52},{"text":"                let mut default_str: Option<String> = None;","highlight_start":1,"highlight_end":60},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if args.len() > 0 {","highlight_start":1,"highlight_end":36},{"text":"                    match &args[0] {","highlight_start":1,"highlight_end":37},{"text":"                        JS_AST::object { properties } => {","highlight_start":1,"highlight_end":59},{"text":"                            for (key, value) in properties.iter() {","highlight_start":1,"highlight_end":68},{"text":"                                match idl.get_str(key).trim() {","highlight_start":1,"highlight_end":64},{"text":"                                    \"default\" => {","highlight_start":1,"highlight_end":51},{"text":"                                        match value {","highlight_start":1,"highlight_end":54},{"text":"                                            JS_AST::number { addr } => {","highlight_start":1,"highlight_end":73},{"text":"                                                let trimmed = idl.get_str(addr).trim();","highlight_start":1,"highlight_end":88},{"text":"                                                match trimmed.parse::<$t>() {","highlight_start":1,"highlight_end":78},{"text":"                                                    Ok(x) => {","highlight_start":1,"highlight_end":63},{"text":"                                                        default_str = Some(String::from(trimmed));","highlight_start":1,"highlight_end":99},{"text":"                                                        default = Some(x);","highlight_start":1,"highlight_end":75},{"text":"                                                    },","highlight_start":1,"highlight_end":55},{"text":"                                                    Err(_e) => {  }","highlight_start":1,"highlight_end":68},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            },","highlight_start":1,"highlight_end":47},{"text":"                                            _ => { }","highlight_start":1,"highlight_end":53},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    _ => { }","highlight_start":1,"highlight_end":45},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { }","highlight_start":1,"highlight_end":33},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(x) = default {","highlight_start":1,"highlight_end":43},{"text":"                    schema_data.push(1);","highlight_start":1,"highlight_end":41},{"text":"                    schema_data.extend_from_slice(&(x as $t).to_be_bytes());","highlight_start":1,"highlight_end":77},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    schema_data.push(0);","highlight_start":1,"highlight_end":41},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn default_value<'default>(_depth: usize, addr: usize, schema: &'default Vec<NP_Parsed_Schema>) -> Option<Self> {","highlight_start":1,"highlight_end":126},{"text":"                <$t>::np_get_default(addr, &schema)","highlight_start":1,"highlight_end":52},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"            fn set_value<'set>(cursor: NP_Cursor, memory: &'set NP_Memory, value: Self) -> Result<NP_Cursor, NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":146},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut value_address = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if value_address != 0 { // existing value, replace","highlight_start":1,"highlight_end":67},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let write_bytes = memory.write_bytes();","highlight_start":1,"highlight_end":60},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    // overwrite existing values in buffer","highlight_start":1,"highlight_end":59},{"text":"                    for x in 0..bytes.len() {","highlight_start":1,"highlight_end":46},{"text":"                        write_bytes[value_address + x] = bytes[x];","highlight_start":1,"highlight_end":67},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                } else { // new value","highlight_start":1,"highlight_end":38},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    value_address = memory.malloc_borrow(&bytes)?;","highlight_start":1,"highlight_end":67},{"text":"                    cursor.get_value_mut(memory).set_addr_value(value_address as u32);","highlight_start":1,"highlight_end":87},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn into_value(cursor: &NP_Cursor, memory: &'value NP_Memory) -> Result<Option<Self>, NP_Error> where Self: Sized {","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let value_addr = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":70},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                // empty value","highlight_start":1,"highlight_end":31},{"text":"                if value_addr == 0 {","highlight_start":1,"highlight_end":37},{"text":"                    return Ok(None);","highlight_start":1,"highlight_end":37},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let read_memory = memory.read_bytes();","highlight_start":1,"highlight_end":55},{"text":"                let mut be_bytes = <$t>::default().to_be_bytes();","highlight_start":1,"highlight_end":66},{"text":"                for x in 0..be_bytes.len() {","highlight_start":1,"highlight_end":45},{"text":"                    be_bytes[x] = read_memory[value_addr + x];","highlight_start":1,"highlight_end":63},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match $numType {","highlight_start":1,"highlight_end":33},{"text":"                    NP_NumType::signed => {","highlight_start":1,"highlight_end":44},{"text":"                        be_bytes[0] = to_signed(be_bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(Some(<$t>::from_be_bytes(be_bytes)))","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn to_json(_depth:usize, cursor: &NP_Cursor, memory: &'value NP_Memory) -> NP_JSON {","highlight_start":1,"highlight_end":97},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match Self::into_value(cursor, memory) {","highlight_start":1,"highlight_end":57},{"text":"                    Ok(x) => {","highlight_start":1,"highlight_end":31},{"text":"                        match x {","highlight_start":1,"highlight_end":34},{"text":"                            Some(y) => {","highlight_start":1,"highlight_end":41},{"text":"                                match $numType {","highlight_start":1,"highlight_end":49},{"text":"                                    NP_NumType::floating => NP_JSON::Float(y as f64),","highlight_start":1,"highlight_end":86},{"text":"                                    _ => NP_JSON::Integer(y as i64)","highlight_start":1,"highlight_end":68},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            },","highlight_start":1,"highlight_end":31},{"text":"                            None => {","highlight_start":1,"highlight_end":38},{"text":"                                match <$t>::default_value(0, cursor.schema_addr, &memory.get_schemas()) {","highlight_start":1,"highlight_end":106},{"text":"                                    Some(v) => {","highlight_start":1,"highlight_end":49},{"text":"                                        match $numType {","highlight_start":1,"highlight_end":57},{"text":"                                            NP_NumType::floating => { NP_JSON::Float(v as f64) },","highlight_start":1,"highlight_end":98},{"text":"                                            _ => { NP_JSON::Integer(v as i64) }","highlight_start":1,"highlight_end":80},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    None => NP_JSON::Null","highlight_start":1,"highlight_end":58},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    Err(_e) => {","highlight_start":1,"highlight_end":33},{"text":"                        NP_JSON::Null","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn get_size(_depth:usize, cursor: &NP_Cursor, memory: &NP_Memory) -> Result<usize, NP_Error> {","highlight_start":1,"highlight_end":107},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if c_value().get_addr_value() == 0 {","highlight_start":1,"highlight_end":53},{"text":"                    Ok(0) ","highlight_start":1,"highlight_end":27},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Ok(core::mem::size_of::<Self>())","highlight_start":1,"highlight_end":53},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_json_to_schema(mut schema: Vec<NP_Parsed_Schema>, json_schema: &Box<NP_JSON>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":160},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"                match json_schema[\"default\"] {","highlight_start":1,"highlight_end":47},{"text":"                    NP_JSON::Float(x) => {","highlight_start":1,"highlight_end":43},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Integer(x) => {","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {","highlight_start":1,"highlight_end":27},{"text":"                        schema_data.push(0);","highlight_start":1,"highlight_end":45},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_bytes_to_schema(mut schema: Vec<NP_Parsed_Schema>, address: usize, bytes: &[u8]) -> (bool, Vec<NP_Parsed_Schema>) {","highlight_start":1,"highlight_end":136},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"                (schema[schema.len() - 1].sortable, schema)","highlight_start":1,"highlight_end":60},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/numbers.rs:414:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m414\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                let use_schema = NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m465\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mnoproto_number!(i16,  \"int16\", \"i16\", NP_TypeKeys::Int16 , NP_NumType::signed);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/numbers.rs","byte_start":18088,"byte_end":18104,"line_start":414,"line_end":414,"column_start":34,"column_end":50,"is_primary":true,"text":[{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":34,"highlight_end":50}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/pointer/numbers.rs","byte_start":20955,"byte_end":21034,"line_start":466,"line_end":466,"column_start":1,"column_end":80,"is_primary":false,"text":[{"text":"noproto_number!(i32,  \"int32\", \"i32\", NP_TypeKeys::Int32 , NP_NumType::signed);","highlight_start":1,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"noproto_number!","def_site_span":{"file_name":"src/pointer/numbers.rs","byte_start":2213,"byte_end":20774,"line_start":67,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! noproto_number {","highlight_start":1,"highlight_end":30},{"text":"    ($t:ty, $str1: tt, $str2: tt, $tkey: expr, $numType: expr) => {","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> super::NP_Scalar<'value> for $t {","highlight_start":1,"highlight_end":55},{"text":"            fn schema_default(_schema: &NP_Parsed_Schema) -> Option<Self> where Self: Sized {","highlight_start":1,"highlight_end":94},{"text":"                Some(Self::default())","highlight_start":1,"highlight_end":38},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn np_max_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MAX)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn np_min_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MIN)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> NP_Value<'value> for $t {","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn type_idx() -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":75},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn self_type_idx(&self) -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":85},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn set_from_json<'set>(_depth: usize, _apply_null: bool, cursor: NP_Cursor, memory: &'set NP_Memory, value: &Box<NP_JSON>) -> Result<(), NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":186},{"text":"                match **value {","highlight_start":1,"highlight_end":32},{"text":"                    NP_JSON::Integer(int) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, int as $t)?;","highlight_start":1,"highlight_end":69},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Float(float) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, float as $t)?;","highlight_start":1,"highlight_end":71},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_json(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<NP_JSON, NP_Error> {","highlight_start":1,"highlight_end":108},{"text":"                let mut schema_json = JSMAP::new();","highlight_start":1,"highlight_end":52},{"text":"                schema_json.insert(\"type\".to_owned(), NP_JSON::String(Self::type_idx().0.to_string()));","highlight_start":1,"highlight_end":104},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    let default_val = default;","highlight_start":1,"highlight_end":47},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::unsigned => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::floating => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Float(default_val as f64));","highlight_start":1,"highlight_end":106},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                    ","highlight_start":1,"highlight_end":21},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                Ok(NP_JSON::Dictionary(schema_json))","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_idl(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<String, NP_Error> {","highlight_start":1,"highlight_end":106},{"text":"                let mut result = String::from($str2);","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    result.push_str(\"({default: \");","highlight_start":1,"highlight_end":52},{"text":"                    result.push_str(default.to_string().as_str());","highlight_start":1,"highlight_end":67},{"text":"                    result.push_str(\"})\");","highlight_start":1,"highlight_end":43},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    result.push_str(\"()\");","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(result)","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn from_idl_to_schema(mut schema: Vec<NP_Parsed_Schema>, _name: &str, idl: &JS_Schema, args: &Vec<JS_AST>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":181},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                let mut default: Option<$t> = None;","highlight_start":1,"highlight_end":52},{"text":"                let mut default_str: Option<String> = None;","highlight_start":1,"highlight_end":60},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if args.len() > 0 {","highlight_start":1,"highlight_end":36},{"text":"                    match &args[0] {","highlight_start":1,"highlight_end":37},{"text":"                        JS_AST::object { properties } => {","highlight_start":1,"highlight_end":59},{"text":"                            for (key, value) in properties.iter() {","highlight_start":1,"highlight_end":68},{"text":"                                match idl.get_str(key).trim() {","highlight_start":1,"highlight_end":64},{"text":"                                    \"default\" => {","highlight_start":1,"highlight_end":51},{"text":"                                        match value {","highlight_start":1,"highlight_end":54},{"text":"                                            JS_AST::number { addr } => {","highlight_start":1,"highlight_end":73},{"text":"                                                let trimmed = idl.get_str(addr).trim();","highlight_start":1,"highlight_end":88},{"text":"                                                match trimmed.parse::<$t>() {","highlight_start":1,"highlight_end":78},{"text":"                                                    Ok(x) => {","highlight_start":1,"highlight_end":63},{"text":"                                                        default_str = Some(String::from(trimmed));","highlight_start":1,"highlight_end":99},{"text":"                                                        default = Some(x);","highlight_start":1,"highlight_end":75},{"text":"                                                    },","highlight_start":1,"highlight_end":55},{"text":"                                                    Err(_e) => {  }","highlight_start":1,"highlight_end":68},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            },","highlight_start":1,"highlight_end":47},{"text":"                                            _ => { }","highlight_start":1,"highlight_end":53},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    _ => { }","highlight_start":1,"highlight_end":45},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { }","highlight_start":1,"highlight_end":33},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(x) = default {","highlight_start":1,"highlight_end":43},{"text":"                    schema_data.push(1);","highlight_start":1,"highlight_end":41},{"text":"                    schema_data.extend_from_slice(&(x as $t).to_be_bytes());","highlight_start":1,"highlight_end":77},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    schema_data.push(0);","highlight_start":1,"highlight_end":41},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn default_value<'default>(_depth: usize, addr: usize, schema: &'default Vec<NP_Parsed_Schema>) -> Option<Self> {","highlight_start":1,"highlight_end":126},{"text":"                <$t>::np_get_default(addr, &schema)","highlight_start":1,"highlight_end":52},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"            fn set_value<'set>(cursor: NP_Cursor, memory: &'set NP_Memory, value: Self) -> Result<NP_Cursor, NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":146},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut value_address = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if value_address != 0 { // existing value, replace","highlight_start":1,"highlight_end":67},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let write_bytes = memory.write_bytes();","highlight_start":1,"highlight_end":60},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    // overwrite existing values in buffer","highlight_start":1,"highlight_end":59},{"text":"                    for x in 0..bytes.len() {","highlight_start":1,"highlight_end":46},{"text":"                        write_bytes[value_address + x] = bytes[x];","highlight_start":1,"highlight_end":67},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                } else { // new value","highlight_start":1,"highlight_end":38},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    value_address = memory.malloc_borrow(&bytes)?;","highlight_start":1,"highlight_end":67},{"text":"                    cursor.get_value_mut(memory).set_addr_value(value_address as u32);","highlight_start":1,"highlight_end":87},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn into_value(cursor: &NP_Cursor, memory: &'value NP_Memory) -> Result<Option<Self>, NP_Error> where Self: Sized {","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let value_addr = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":70},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                // empty value","highlight_start":1,"highlight_end":31},{"text":"                if value_addr == 0 {","highlight_start":1,"highlight_end":37},{"text":"                    return Ok(None);","highlight_start":1,"highlight_end":37},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let read_memory = memory.read_bytes();","highlight_start":1,"highlight_end":55},{"text":"                let mut be_bytes = <$t>::default().to_be_bytes();","highlight_start":1,"highlight_end":66},{"text":"                for x in 0..be_bytes.len() {","highlight_start":1,"highlight_end":45},{"text":"                    be_bytes[x] = read_memory[value_addr + x];","highlight_start":1,"highlight_end":63},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match $numType {","highlight_start":1,"highlight_end":33},{"text":"                    NP_NumType::signed => {","highlight_start":1,"highlight_end":44},{"text":"                        be_bytes[0] = to_signed(be_bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(Some(<$t>::from_be_bytes(be_bytes)))","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn to_json(_depth:usize, cursor: &NP_Cursor, memory: &'value NP_Memory) -> NP_JSON {","highlight_start":1,"highlight_end":97},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match Self::into_value(cursor, memory) {","highlight_start":1,"highlight_end":57},{"text":"                    Ok(x) => {","highlight_start":1,"highlight_end":31},{"text":"                        match x {","highlight_start":1,"highlight_end":34},{"text":"                            Some(y) => {","highlight_start":1,"highlight_end":41},{"text":"                                match $numType {","highlight_start":1,"highlight_end":49},{"text":"                                    NP_NumType::floating => NP_JSON::Float(y as f64),","highlight_start":1,"highlight_end":86},{"text":"                                    _ => NP_JSON::Integer(y as i64)","highlight_start":1,"highlight_end":68},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            },","highlight_start":1,"highlight_end":31},{"text":"                            None => {","highlight_start":1,"highlight_end":38},{"text":"                                match <$t>::default_value(0, cursor.schema_addr, &memory.get_schemas()) {","highlight_start":1,"highlight_end":106},{"text":"                                    Some(v) => {","highlight_start":1,"highlight_end":49},{"text":"                                        match $numType {","highlight_start":1,"highlight_end":57},{"text":"                                            NP_NumType::floating => { NP_JSON::Float(v as f64) },","highlight_start":1,"highlight_end":98},{"text":"                                            _ => { NP_JSON::Integer(v as i64) }","highlight_start":1,"highlight_end":80},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    None => NP_JSON::Null","highlight_start":1,"highlight_end":58},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    Err(_e) => {","highlight_start":1,"highlight_end":33},{"text":"                        NP_JSON::Null","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn get_size(_depth:usize, cursor: &NP_Cursor, memory: &NP_Memory) -> Result<usize, NP_Error> {","highlight_start":1,"highlight_end":107},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if c_value().get_addr_value() == 0 {","highlight_start":1,"highlight_end":53},{"text":"                    Ok(0) ","highlight_start":1,"highlight_end":27},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Ok(core::mem::size_of::<Self>())","highlight_start":1,"highlight_end":53},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_json_to_schema(mut schema: Vec<NP_Parsed_Schema>, json_schema: &Box<NP_JSON>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":160},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"                match json_schema[\"default\"] {","highlight_start":1,"highlight_end":47},{"text":"                    NP_JSON::Float(x) => {","highlight_start":1,"highlight_end":43},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Integer(x) => {","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {","highlight_start":1,"highlight_end":27},{"text":"                        schema_data.push(0);","highlight_start":1,"highlight_end":45},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_bytes_to_schema(mut schema: Vec<NP_Parsed_Schema>, address: usize, bytes: &[u8]) -> (bool, Vec<NP_Parsed_Schema>) {","highlight_start":1,"highlight_end":136},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"                (schema[schema.len() - 1].sortable, schema)","highlight_start":1,"highlight_end":60},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/numbers.rs:414:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m414\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                let use_schema = NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m466\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mnoproto_number!(i32,  \"int32\", \"i32\", NP_TypeKeys::Int32 , NP_NumType::signed);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/numbers.rs","byte_start":18088,"byte_end":18104,"line_start":414,"line_end":414,"column_start":34,"column_end":50,"is_primary":true,"text":[{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":34,"highlight_end":50}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/pointer/numbers.rs","byte_start":21035,"byte_end":21114,"line_start":467,"line_end":467,"column_start":1,"column_end":80,"is_primary":false,"text":[{"text":"noproto_number!(i64,  \"int64\", \"i64\", NP_TypeKeys::Int64 , NP_NumType::signed);","highlight_start":1,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"noproto_number!","def_site_span":{"file_name":"src/pointer/numbers.rs","byte_start":2213,"byte_end":20774,"line_start":67,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! noproto_number {","highlight_start":1,"highlight_end":30},{"text":"    ($t:ty, $str1: tt, $str2: tt, $tkey: expr, $numType: expr) => {","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> super::NP_Scalar<'value> for $t {","highlight_start":1,"highlight_end":55},{"text":"            fn schema_default(_schema: &NP_Parsed_Schema) -> Option<Self> where Self: Sized {","highlight_start":1,"highlight_end":94},{"text":"                Some(Self::default())","highlight_start":1,"highlight_end":38},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn np_max_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MAX)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn np_min_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MIN)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> NP_Value<'value> for $t {","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn type_idx() -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":75},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn self_type_idx(&self) -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":85},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn set_from_json<'set>(_depth: usize, _apply_null: bool, cursor: NP_Cursor, memory: &'set NP_Memory, value: &Box<NP_JSON>) -> Result<(), NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":186},{"text":"                match **value {","highlight_start":1,"highlight_end":32},{"text":"                    NP_JSON::Integer(int) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, int as $t)?;","highlight_start":1,"highlight_end":69},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Float(float) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, float as $t)?;","highlight_start":1,"highlight_end":71},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_json(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<NP_JSON, NP_Error> {","highlight_start":1,"highlight_end":108},{"text":"                let mut schema_json = JSMAP::new();","highlight_start":1,"highlight_end":52},{"text":"                schema_json.insert(\"type\".to_owned(), NP_JSON::String(Self::type_idx().0.to_string()));","highlight_start":1,"highlight_end":104},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    let default_val = default;","highlight_start":1,"highlight_end":47},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::unsigned => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::floating => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Float(default_val as f64));","highlight_start":1,"highlight_end":106},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                    ","highlight_start":1,"highlight_end":21},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                Ok(NP_JSON::Dictionary(schema_json))","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_idl(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<String, NP_Error> {","highlight_start":1,"highlight_end":106},{"text":"                let mut result = String::from($str2);","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    result.push_str(\"({default: \");","highlight_start":1,"highlight_end":52},{"text":"                    result.push_str(default.to_string().as_str());","highlight_start":1,"highlight_end":67},{"text":"                    result.push_str(\"})\");","highlight_start":1,"highlight_end":43},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    result.push_str(\"()\");","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(result)","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn from_idl_to_schema(mut schema: Vec<NP_Parsed_Schema>, _name: &str, idl: &JS_Schema, args: &Vec<JS_AST>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":181},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                let mut default: Option<$t> = None;","highlight_start":1,"highlight_end":52},{"text":"                let mut default_str: Option<String> = None;","highlight_start":1,"highlight_end":60},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if args.len() > 0 {","highlight_start":1,"highlight_end":36},{"text":"                    match &args[0] {","highlight_start":1,"highlight_end":37},{"text":"                        JS_AST::object { properties } => {","highlight_start":1,"highlight_end":59},{"text":"                            for (key, value) in properties.iter() {","highlight_start":1,"highlight_end":68},{"text":"                                match idl.get_str(key).trim() {","highlight_start":1,"highlight_end":64},{"text":"                                    \"default\" => {","highlight_start":1,"highlight_end":51},{"text":"                                        match value {","highlight_start":1,"highlight_end":54},{"text":"                                            JS_AST::number { addr } => {","highlight_start":1,"highlight_end":73},{"text":"                                                let trimmed = idl.get_str(addr).trim();","highlight_start":1,"highlight_end":88},{"text":"                                                match trimmed.parse::<$t>() {","highlight_start":1,"highlight_end":78},{"text":"                                                    Ok(x) => {","highlight_start":1,"highlight_end":63},{"text":"                                                        default_str = Some(String::from(trimmed));","highlight_start":1,"highlight_end":99},{"text":"                                                        default = Some(x);","highlight_start":1,"highlight_end":75},{"text":"                                                    },","highlight_start":1,"highlight_end":55},{"text":"                                                    Err(_e) => {  }","highlight_start":1,"highlight_end":68},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            },","highlight_start":1,"highlight_end":47},{"text":"                                            _ => { }","highlight_start":1,"highlight_end":53},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    _ => { }","highlight_start":1,"highlight_end":45},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { }","highlight_start":1,"highlight_end":33},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(x) = default {","highlight_start":1,"highlight_end":43},{"text":"                    schema_data.push(1);","highlight_start":1,"highlight_end":41},{"text":"                    schema_data.extend_from_slice(&(x as $t).to_be_bytes());","highlight_start":1,"highlight_end":77},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    schema_data.push(0);","highlight_start":1,"highlight_end":41},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn default_value<'default>(_depth: usize, addr: usize, schema: &'default Vec<NP_Parsed_Schema>) -> Option<Self> {","highlight_start":1,"highlight_end":126},{"text":"                <$t>::np_get_default(addr, &schema)","highlight_start":1,"highlight_end":52},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"            fn set_value<'set>(cursor: NP_Cursor, memory: &'set NP_Memory, value: Self) -> Result<NP_Cursor, NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":146},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut value_address = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if value_address != 0 { // existing value, replace","highlight_start":1,"highlight_end":67},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let write_bytes = memory.write_bytes();","highlight_start":1,"highlight_end":60},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    // overwrite existing values in buffer","highlight_start":1,"highlight_end":59},{"text":"                    for x in 0..bytes.len() {","highlight_start":1,"highlight_end":46},{"text":"                        write_bytes[value_address + x] = bytes[x];","highlight_start":1,"highlight_end":67},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                } else { // new value","highlight_start":1,"highlight_end":38},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    value_address = memory.malloc_borrow(&bytes)?;","highlight_start":1,"highlight_end":67},{"text":"                    cursor.get_value_mut(memory).set_addr_value(value_address as u32);","highlight_start":1,"highlight_end":87},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn into_value(cursor: &NP_Cursor, memory: &'value NP_Memory) -> Result<Option<Self>, NP_Error> where Self: Sized {","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let value_addr = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":70},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                // empty value","highlight_start":1,"highlight_end":31},{"text":"                if value_addr == 0 {","highlight_start":1,"highlight_end":37},{"text":"                    return Ok(None);","highlight_start":1,"highlight_end":37},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let read_memory = memory.read_bytes();","highlight_start":1,"highlight_end":55},{"text":"                let mut be_bytes = <$t>::default().to_be_bytes();","highlight_start":1,"highlight_end":66},{"text":"                for x in 0..be_bytes.len() {","highlight_start":1,"highlight_end":45},{"text":"                    be_bytes[x] = read_memory[value_addr + x];","highlight_start":1,"highlight_end":63},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match $numType {","highlight_start":1,"highlight_end":33},{"text":"                    NP_NumType::signed => {","highlight_start":1,"highlight_end":44},{"text":"                        be_bytes[0] = to_signed(be_bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(Some(<$t>::from_be_bytes(be_bytes)))","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn to_json(_depth:usize, cursor: &NP_Cursor, memory: &'value NP_Memory) -> NP_JSON {","highlight_start":1,"highlight_end":97},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match Self::into_value(cursor, memory) {","highlight_start":1,"highlight_end":57},{"text":"                    Ok(x) => {","highlight_start":1,"highlight_end":31},{"text":"                        match x {","highlight_start":1,"highlight_end":34},{"text":"                            Some(y) => {","highlight_start":1,"highlight_end":41},{"text":"                                match $numType {","highlight_start":1,"highlight_end":49},{"text":"                                    NP_NumType::floating => NP_JSON::Float(y as f64),","highlight_start":1,"highlight_end":86},{"text":"                                    _ => NP_JSON::Integer(y as i64)","highlight_start":1,"highlight_end":68},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            },","highlight_start":1,"highlight_end":31},{"text":"                            None => {","highlight_start":1,"highlight_end":38},{"text":"                                match <$t>::default_value(0, cursor.schema_addr, &memory.get_schemas()) {","highlight_start":1,"highlight_end":106},{"text":"                                    Some(v) => {","highlight_start":1,"highlight_end":49},{"text":"                                        match $numType {","highlight_start":1,"highlight_end":57},{"text":"                                            NP_NumType::floating => { NP_JSON::Float(v as f64) },","highlight_start":1,"highlight_end":98},{"text":"                                            _ => { NP_JSON::Integer(v as i64) }","highlight_start":1,"highlight_end":80},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    None => NP_JSON::Null","highlight_start":1,"highlight_end":58},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    Err(_e) => {","highlight_start":1,"highlight_end":33},{"text":"                        NP_JSON::Null","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn get_size(_depth:usize, cursor: &NP_Cursor, memory: &NP_Memory) -> Result<usize, NP_Error> {","highlight_start":1,"highlight_end":107},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if c_value().get_addr_value() == 0 {","highlight_start":1,"highlight_end":53},{"text":"                    Ok(0) ","highlight_start":1,"highlight_end":27},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Ok(core::mem::size_of::<Self>())","highlight_start":1,"highlight_end":53},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_json_to_schema(mut schema: Vec<NP_Parsed_Schema>, json_schema: &Box<NP_JSON>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":160},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"                match json_schema[\"default\"] {","highlight_start":1,"highlight_end":47},{"text":"                    NP_JSON::Float(x) => {","highlight_start":1,"highlight_end":43},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Integer(x) => {","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {","highlight_start":1,"highlight_end":27},{"text":"                        schema_data.push(0);","highlight_start":1,"highlight_end":45},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_bytes_to_schema(mut schema: Vec<NP_Parsed_Schema>, address: usize, bytes: &[u8]) -> (bool, Vec<NP_Parsed_Schema>) {","highlight_start":1,"highlight_end":136},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"                (schema[schema.len() - 1].sortable, schema)","highlight_start":1,"highlight_end":60},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/numbers.rs:414:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m414\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                let use_schema = NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m467\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mnoproto_number!(i64,  \"int64\", \"i64\", NP_TypeKeys::Int64 , NP_NumType::signed);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/numbers.rs","byte_start":18088,"byte_end":18104,"line_start":414,"line_end":414,"column_start":34,"column_end":50,"is_primary":true,"text":[{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":34,"highlight_end":50}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/pointer/numbers.rs","byte_start":21137,"byte_end":21218,"line_start":470,"line_end":470,"column_start":1,"column_end":82,"is_primary":false,"text":[{"text":"noproto_number!(u8,   \"uint8\",  \"u8\", NP_TypeKeys::Uint8 , NP_NumType::unsigned);","highlight_start":1,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"noproto_number!","def_site_span":{"file_name":"src/pointer/numbers.rs","byte_start":2213,"byte_end":20774,"line_start":67,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! noproto_number {","highlight_start":1,"highlight_end":30},{"text":"    ($t:ty, $str1: tt, $str2: tt, $tkey: expr, $numType: expr) => {","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> super::NP_Scalar<'value> for $t {","highlight_start":1,"highlight_end":55},{"text":"            fn schema_default(_schema: &NP_Parsed_Schema) -> Option<Self> where Self: Sized {","highlight_start":1,"highlight_end":94},{"text":"                Some(Self::default())","highlight_start":1,"highlight_end":38},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn np_max_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MAX)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn np_min_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MIN)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> NP_Value<'value> for $t {","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn type_idx() -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":75},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn self_type_idx(&self) -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":85},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn set_from_json<'set>(_depth: usize, _apply_null: bool, cursor: NP_Cursor, memory: &'set NP_Memory, value: &Box<NP_JSON>) -> Result<(), NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":186},{"text":"                match **value {","highlight_start":1,"highlight_end":32},{"text":"                    NP_JSON::Integer(int) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, int as $t)?;","highlight_start":1,"highlight_end":69},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Float(float) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, float as $t)?;","highlight_start":1,"highlight_end":71},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_json(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<NP_JSON, NP_Error> {","highlight_start":1,"highlight_end":108},{"text":"                let mut schema_json = JSMAP::new();","highlight_start":1,"highlight_end":52},{"text":"                schema_json.insert(\"type\".to_owned(), NP_JSON::String(Self::type_idx().0.to_string()));","highlight_start":1,"highlight_end":104},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    let default_val = default;","highlight_start":1,"highlight_end":47},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::unsigned => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::floating => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Float(default_val as f64));","highlight_start":1,"highlight_end":106},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                    ","highlight_start":1,"highlight_end":21},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                Ok(NP_JSON::Dictionary(schema_json))","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_idl(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<String, NP_Error> {","highlight_start":1,"highlight_end":106},{"text":"                let mut result = String::from($str2);","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    result.push_str(\"({default: \");","highlight_start":1,"highlight_end":52},{"text":"                    result.push_str(default.to_string().as_str());","highlight_start":1,"highlight_end":67},{"text":"                    result.push_str(\"})\");","highlight_start":1,"highlight_end":43},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    result.push_str(\"()\");","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(result)","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn from_idl_to_schema(mut schema: Vec<NP_Parsed_Schema>, _name: &str, idl: &JS_Schema, args: &Vec<JS_AST>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":181},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                let mut default: Option<$t> = None;","highlight_start":1,"highlight_end":52},{"text":"                let mut default_str: Option<String> = None;","highlight_start":1,"highlight_end":60},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if args.len() > 0 {","highlight_start":1,"highlight_end":36},{"text":"                    match &args[0] {","highlight_start":1,"highlight_end":37},{"text":"                        JS_AST::object { properties } => {","highlight_start":1,"highlight_end":59},{"text":"                            for (key, value) in properties.iter() {","highlight_start":1,"highlight_end":68},{"text":"                                match idl.get_str(key).trim() {","highlight_start":1,"highlight_end":64},{"text":"                                    \"default\" => {","highlight_start":1,"highlight_end":51},{"text":"                                        match value {","highlight_start":1,"highlight_end":54},{"text":"                                            JS_AST::number { addr } => {","highlight_start":1,"highlight_end":73},{"text":"                                                let trimmed = idl.get_str(addr).trim();","highlight_start":1,"highlight_end":88},{"text":"                                                match trimmed.parse::<$t>() {","highlight_start":1,"highlight_end":78},{"text":"                                                    Ok(x) => {","highlight_start":1,"highlight_end":63},{"text":"                                                        default_str = Some(String::from(trimmed));","highlight_start":1,"highlight_end":99},{"text":"                                                        default = Some(x);","highlight_start":1,"highlight_end":75},{"text":"                                                    },","highlight_start":1,"highlight_end":55},{"text":"                                                    Err(_e) => {  }","highlight_start":1,"highlight_end":68},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            },","highlight_start":1,"highlight_end":47},{"text":"                                            _ => { }","highlight_start":1,"highlight_end":53},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    _ => { }","highlight_start":1,"highlight_end":45},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { }","highlight_start":1,"highlight_end":33},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(x) = default {","highlight_start":1,"highlight_end":43},{"text":"                    schema_data.push(1);","highlight_start":1,"highlight_end":41},{"text":"                    schema_data.extend_from_slice(&(x as $t).to_be_bytes());","highlight_start":1,"highlight_end":77},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    schema_data.push(0);","highlight_start":1,"highlight_end":41},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn default_value<'default>(_depth: usize, addr: usize, schema: &'default Vec<NP_Parsed_Schema>) -> Option<Self> {","highlight_start":1,"highlight_end":126},{"text":"                <$t>::np_get_default(addr, &schema)","highlight_start":1,"highlight_end":52},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"            fn set_value<'set>(cursor: NP_Cursor, memory: &'set NP_Memory, value: Self) -> Result<NP_Cursor, NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":146},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut value_address = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if value_address != 0 { // existing value, replace","highlight_start":1,"highlight_end":67},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let write_bytes = memory.write_bytes();","highlight_start":1,"highlight_end":60},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    // overwrite existing values in buffer","highlight_start":1,"highlight_end":59},{"text":"                    for x in 0..bytes.len() {","highlight_start":1,"highlight_end":46},{"text":"                        write_bytes[value_address + x] = bytes[x];","highlight_start":1,"highlight_end":67},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                } else { // new value","highlight_start":1,"highlight_end":38},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    value_address = memory.malloc_borrow(&bytes)?;","highlight_start":1,"highlight_end":67},{"text":"                    cursor.get_value_mut(memory).set_addr_value(value_address as u32);","highlight_start":1,"highlight_end":87},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn into_value(cursor: &NP_Cursor, memory: &'value NP_Memory) -> Result<Option<Self>, NP_Error> where Self: Sized {","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let value_addr = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":70},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                // empty value","highlight_start":1,"highlight_end":31},{"text":"                if value_addr == 0 {","highlight_start":1,"highlight_end":37},{"text":"                    return Ok(None);","highlight_start":1,"highlight_end":37},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let read_memory = memory.read_bytes();","highlight_start":1,"highlight_end":55},{"text":"                let mut be_bytes = <$t>::default().to_be_bytes();","highlight_start":1,"highlight_end":66},{"text":"                for x in 0..be_bytes.len() {","highlight_start":1,"highlight_end":45},{"text":"                    be_bytes[x] = read_memory[value_addr + x];","highlight_start":1,"highlight_end":63},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match $numType {","highlight_start":1,"highlight_end":33},{"text":"                    NP_NumType::signed => {","highlight_start":1,"highlight_end":44},{"text":"                        be_bytes[0] = to_signed(be_bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(Some(<$t>::from_be_bytes(be_bytes)))","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn to_json(_depth:usize, cursor: &NP_Cursor, memory: &'value NP_Memory) -> NP_JSON {","highlight_start":1,"highlight_end":97},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match Self::into_value(cursor, memory) {","highlight_start":1,"highlight_end":57},{"text":"                    Ok(x) => {","highlight_start":1,"highlight_end":31},{"text":"                        match x {","highlight_start":1,"highlight_end":34},{"text":"                            Some(y) => {","highlight_start":1,"highlight_end":41},{"text":"                                match $numType {","highlight_start":1,"highlight_end":49},{"text":"                                    NP_NumType::floating => NP_JSON::Float(y as f64),","highlight_start":1,"highlight_end":86},{"text":"                                    _ => NP_JSON::Integer(y as i64)","highlight_start":1,"highlight_end":68},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            },","highlight_start":1,"highlight_end":31},{"text":"                            None => {","highlight_start":1,"highlight_end":38},{"text":"                                match <$t>::default_value(0, cursor.schema_addr, &memory.get_schemas()) {","highlight_start":1,"highlight_end":106},{"text":"                                    Some(v) => {","highlight_start":1,"highlight_end":49},{"text":"                                        match $numType {","highlight_start":1,"highlight_end":57},{"text":"                                            NP_NumType::floating => { NP_JSON::Float(v as f64) },","highlight_start":1,"highlight_end":98},{"text":"                                            _ => { NP_JSON::Integer(v as i64) }","highlight_start":1,"highlight_end":80},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    None => NP_JSON::Null","highlight_start":1,"highlight_end":58},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    Err(_e) => {","highlight_start":1,"highlight_end":33},{"text":"                        NP_JSON::Null","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn get_size(_depth:usize, cursor: &NP_Cursor, memory: &NP_Memory) -> Result<usize, NP_Error> {","highlight_start":1,"highlight_end":107},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if c_value().get_addr_value() == 0 {","highlight_start":1,"highlight_end":53},{"text":"                    Ok(0) ","highlight_start":1,"highlight_end":27},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Ok(core::mem::size_of::<Self>())","highlight_start":1,"highlight_end":53},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_json_to_schema(mut schema: Vec<NP_Parsed_Schema>, json_schema: &Box<NP_JSON>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":160},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"                match json_schema[\"default\"] {","highlight_start":1,"highlight_end":47},{"text":"                    NP_JSON::Float(x) => {","highlight_start":1,"highlight_end":43},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Integer(x) => {","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {","highlight_start":1,"highlight_end":27},{"text":"                        schema_data.push(0);","highlight_start":1,"highlight_end":45},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_bytes_to_schema(mut schema: Vec<NP_Parsed_Schema>, address: usize, bytes: &[u8]) -> (bool, Vec<NP_Parsed_Schema>) {","highlight_start":1,"highlight_end":136},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"                (schema[schema.len() - 1].sortable, schema)","highlight_start":1,"highlight_end":60},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/numbers.rs:414:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m414\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                let use_schema = NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m470\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mnoproto_number!(u8,   \"uint8\",  \"u8\", NP_TypeKeys::Uint8 , NP_NumType::unsigned);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/numbers.rs","byte_start":18088,"byte_end":18104,"line_start":414,"line_end":414,"column_start":34,"column_end":50,"is_primary":true,"text":[{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":34,"highlight_end":50}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/pointer/numbers.rs","byte_start":21219,"byte_end":21300,"line_start":471,"line_end":471,"column_start":1,"column_end":82,"is_primary":false,"text":[{"text":"noproto_number!(u16, \"uint16\", \"u16\", NP_TypeKeys::Uint16, NP_NumType::unsigned);","highlight_start":1,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"noproto_number!","def_site_span":{"file_name":"src/pointer/numbers.rs","byte_start":2213,"byte_end":20774,"line_start":67,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! noproto_number {","highlight_start":1,"highlight_end":30},{"text":"    ($t:ty, $str1: tt, $str2: tt, $tkey: expr, $numType: expr) => {","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> super::NP_Scalar<'value> for $t {","highlight_start":1,"highlight_end":55},{"text":"            fn schema_default(_schema: &NP_Parsed_Schema) -> Option<Self> where Self: Sized {","highlight_start":1,"highlight_end":94},{"text":"                Some(Self::default())","highlight_start":1,"highlight_end":38},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn np_max_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MAX)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn np_min_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MIN)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> NP_Value<'value> for $t {","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn type_idx() -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":75},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn self_type_idx(&self) -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":85},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn set_from_json<'set>(_depth: usize, _apply_null: bool, cursor: NP_Cursor, memory: &'set NP_Memory, value: &Box<NP_JSON>) -> Result<(), NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":186},{"text":"                match **value {","highlight_start":1,"highlight_end":32},{"text":"                    NP_JSON::Integer(int) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, int as $t)?;","highlight_start":1,"highlight_end":69},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Float(float) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, float as $t)?;","highlight_start":1,"highlight_end":71},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_json(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<NP_JSON, NP_Error> {","highlight_start":1,"highlight_end":108},{"text":"                let mut schema_json = JSMAP::new();","highlight_start":1,"highlight_end":52},{"text":"                schema_json.insert(\"type\".to_owned(), NP_JSON::String(Self::type_idx().0.to_string()));","highlight_start":1,"highlight_end":104},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    let default_val = default;","highlight_start":1,"highlight_end":47},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::unsigned => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::floating => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Float(default_val as f64));","highlight_start":1,"highlight_end":106},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                    ","highlight_start":1,"highlight_end":21},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                Ok(NP_JSON::Dictionary(schema_json))","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_idl(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<String, NP_Error> {","highlight_start":1,"highlight_end":106},{"text":"                let mut result = String::from($str2);","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    result.push_str(\"({default: \");","highlight_start":1,"highlight_end":52},{"text":"                    result.push_str(default.to_string().as_str());","highlight_start":1,"highlight_end":67},{"text":"                    result.push_str(\"})\");","highlight_start":1,"highlight_end":43},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    result.push_str(\"()\");","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(result)","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn from_idl_to_schema(mut schema: Vec<NP_Parsed_Schema>, _name: &str, idl: &JS_Schema, args: &Vec<JS_AST>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":181},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                let mut default: Option<$t> = None;","highlight_start":1,"highlight_end":52},{"text":"                let mut default_str: Option<String> = None;","highlight_start":1,"highlight_end":60},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if args.len() > 0 {","highlight_start":1,"highlight_end":36},{"text":"                    match &args[0] {","highlight_start":1,"highlight_end":37},{"text":"                        JS_AST::object { properties } => {","highlight_start":1,"highlight_end":59},{"text":"                            for (key, value) in properties.iter() {","highlight_start":1,"highlight_end":68},{"text":"                                match idl.get_str(key).trim() {","highlight_start":1,"highlight_end":64},{"text":"                                    \"default\" => {","highlight_start":1,"highlight_end":51},{"text":"                                        match value {","highlight_start":1,"highlight_end":54},{"text":"                                            JS_AST::number { addr } => {","highlight_start":1,"highlight_end":73},{"text":"                                                let trimmed = idl.get_str(addr).trim();","highlight_start":1,"highlight_end":88},{"text":"                                                match trimmed.parse::<$t>() {","highlight_start":1,"highlight_end":78},{"text":"                                                    Ok(x) => {","highlight_start":1,"highlight_end":63},{"text":"                                                        default_str = Some(String::from(trimmed));","highlight_start":1,"highlight_end":99},{"text":"                                                        default = Some(x);","highlight_start":1,"highlight_end":75},{"text":"                                                    },","highlight_start":1,"highlight_end":55},{"text":"                                                    Err(_e) => {  }","highlight_start":1,"highlight_end":68},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            },","highlight_start":1,"highlight_end":47},{"text":"                                            _ => { }","highlight_start":1,"highlight_end":53},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    _ => { }","highlight_start":1,"highlight_end":45},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { }","highlight_start":1,"highlight_end":33},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(x) = default {","highlight_start":1,"highlight_end":43},{"text":"                    schema_data.push(1);","highlight_start":1,"highlight_end":41},{"text":"                    schema_data.extend_from_slice(&(x as $t).to_be_bytes());","highlight_start":1,"highlight_end":77},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    schema_data.push(0);","highlight_start":1,"highlight_end":41},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn default_value<'default>(_depth: usize, addr: usize, schema: &'default Vec<NP_Parsed_Schema>) -> Option<Self> {","highlight_start":1,"highlight_end":126},{"text":"                <$t>::np_get_default(addr, &schema)","highlight_start":1,"highlight_end":52},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"            fn set_value<'set>(cursor: NP_Cursor, memory: &'set NP_Memory, value: Self) -> Result<NP_Cursor, NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":146},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut value_address = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if value_address != 0 { // existing value, replace","highlight_start":1,"highlight_end":67},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let write_bytes = memory.write_bytes();","highlight_start":1,"highlight_end":60},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    // overwrite existing values in buffer","highlight_start":1,"highlight_end":59},{"text":"                    for x in 0..bytes.len() {","highlight_start":1,"highlight_end":46},{"text":"                        write_bytes[value_address + x] = bytes[x];","highlight_start":1,"highlight_end":67},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                } else { // new value","highlight_start":1,"highlight_end":38},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    value_address = memory.malloc_borrow(&bytes)?;","highlight_start":1,"highlight_end":67},{"text":"                    cursor.get_value_mut(memory).set_addr_value(value_address as u32);","highlight_start":1,"highlight_end":87},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn into_value(cursor: &NP_Cursor, memory: &'value NP_Memory) -> Result<Option<Self>, NP_Error> where Self: Sized {","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let value_addr = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":70},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                // empty value","highlight_start":1,"highlight_end":31},{"text":"                if value_addr == 0 {","highlight_start":1,"highlight_end":37},{"text":"                    return Ok(None);","highlight_start":1,"highlight_end":37},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let read_memory = memory.read_bytes();","highlight_start":1,"highlight_end":55},{"text":"                let mut be_bytes = <$t>::default().to_be_bytes();","highlight_start":1,"highlight_end":66},{"text":"                for x in 0..be_bytes.len() {","highlight_start":1,"highlight_end":45},{"text":"                    be_bytes[x] = read_memory[value_addr + x];","highlight_start":1,"highlight_end":63},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match $numType {","highlight_start":1,"highlight_end":33},{"text":"                    NP_NumType::signed => {","highlight_start":1,"highlight_end":44},{"text":"                        be_bytes[0] = to_signed(be_bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(Some(<$t>::from_be_bytes(be_bytes)))","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn to_json(_depth:usize, cursor: &NP_Cursor, memory: &'value NP_Memory) -> NP_JSON {","highlight_start":1,"highlight_end":97},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match Self::into_value(cursor, memory) {","highlight_start":1,"highlight_end":57},{"text":"                    Ok(x) => {","highlight_start":1,"highlight_end":31},{"text":"                        match x {","highlight_start":1,"highlight_end":34},{"text":"                            Some(y) => {","highlight_start":1,"highlight_end":41},{"text":"                                match $numType {","highlight_start":1,"highlight_end":49},{"text":"                                    NP_NumType::floating => NP_JSON::Float(y as f64),","highlight_start":1,"highlight_end":86},{"text":"                                    _ => NP_JSON::Integer(y as i64)","highlight_start":1,"highlight_end":68},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            },","highlight_start":1,"highlight_end":31},{"text":"                            None => {","highlight_start":1,"highlight_end":38},{"text":"                                match <$t>::default_value(0, cursor.schema_addr, &memory.get_schemas()) {","highlight_start":1,"highlight_end":106},{"text":"                                    Some(v) => {","highlight_start":1,"highlight_end":49},{"text":"                                        match $numType {","highlight_start":1,"highlight_end":57},{"text":"                                            NP_NumType::floating => { NP_JSON::Float(v as f64) },","highlight_start":1,"highlight_end":98},{"text":"                                            _ => { NP_JSON::Integer(v as i64) }","highlight_start":1,"highlight_end":80},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    None => NP_JSON::Null","highlight_start":1,"highlight_end":58},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    Err(_e) => {","highlight_start":1,"highlight_end":33},{"text":"                        NP_JSON::Null","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn get_size(_depth:usize, cursor: &NP_Cursor, memory: &NP_Memory) -> Result<usize, NP_Error> {","highlight_start":1,"highlight_end":107},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if c_value().get_addr_value() == 0 {","highlight_start":1,"highlight_end":53},{"text":"                    Ok(0) ","highlight_start":1,"highlight_end":27},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Ok(core::mem::size_of::<Self>())","highlight_start":1,"highlight_end":53},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_json_to_schema(mut schema: Vec<NP_Parsed_Schema>, json_schema: &Box<NP_JSON>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":160},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"                match json_schema[\"default\"] {","highlight_start":1,"highlight_end":47},{"text":"                    NP_JSON::Float(x) => {","highlight_start":1,"highlight_end":43},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Integer(x) => {","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {","highlight_start":1,"highlight_end":27},{"text":"                        schema_data.push(0);","highlight_start":1,"highlight_end":45},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_bytes_to_schema(mut schema: Vec<NP_Parsed_Schema>, address: usize, bytes: &[u8]) -> (bool, Vec<NP_Parsed_Schema>) {","highlight_start":1,"highlight_end":136},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"                (schema[schema.len() - 1].sortable, schema)","highlight_start":1,"highlight_end":60},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/numbers.rs:414:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m414\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                let use_schema = NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m471\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mnoproto_number!(u16, \"uint16\", \"u16\", NP_TypeKeys::Uint16, NP_NumType::unsigned);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/numbers.rs","byte_start":18088,"byte_end":18104,"line_start":414,"line_end":414,"column_start":34,"column_end":50,"is_primary":true,"text":[{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":34,"highlight_end":50}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/pointer/numbers.rs","byte_start":21301,"byte_end":21382,"line_start":472,"line_end":472,"column_start":1,"column_end":82,"is_primary":false,"text":[{"text":"noproto_number!(u32, \"uint32\", \"u32\", NP_TypeKeys::Uint32, NP_NumType::unsigned);","highlight_start":1,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"noproto_number!","def_site_span":{"file_name":"src/pointer/numbers.rs","byte_start":2213,"byte_end":20774,"line_start":67,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! noproto_number {","highlight_start":1,"highlight_end":30},{"text":"    ($t:ty, $str1: tt, $str2: tt, $tkey: expr, $numType: expr) => {","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> super::NP_Scalar<'value> for $t {","highlight_start":1,"highlight_end":55},{"text":"            fn schema_default(_schema: &NP_Parsed_Schema) -> Option<Self> where Self: Sized {","highlight_start":1,"highlight_end":94},{"text":"                Some(Self::default())","highlight_start":1,"highlight_end":38},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn np_max_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MAX)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn np_min_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MIN)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> NP_Value<'value> for $t {","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn type_idx() -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":75},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn self_type_idx(&self) -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":85},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn set_from_json<'set>(_depth: usize, _apply_null: bool, cursor: NP_Cursor, memory: &'set NP_Memory, value: &Box<NP_JSON>) -> Result<(), NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":186},{"text":"                match **value {","highlight_start":1,"highlight_end":32},{"text":"                    NP_JSON::Integer(int) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, int as $t)?;","highlight_start":1,"highlight_end":69},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Float(float) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, float as $t)?;","highlight_start":1,"highlight_end":71},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_json(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<NP_JSON, NP_Error> {","highlight_start":1,"highlight_end":108},{"text":"                let mut schema_json = JSMAP::new();","highlight_start":1,"highlight_end":52},{"text":"                schema_json.insert(\"type\".to_owned(), NP_JSON::String(Self::type_idx().0.to_string()));","highlight_start":1,"highlight_end":104},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    let default_val = default;","highlight_start":1,"highlight_end":47},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::unsigned => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::floating => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Float(default_val as f64));","highlight_start":1,"highlight_end":106},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                    ","highlight_start":1,"highlight_end":21},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                Ok(NP_JSON::Dictionary(schema_json))","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_idl(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<String, NP_Error> {","highlight_start":1,"highlight_end":106},{"text":"                let mut result = String::from($str2);","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    result.push_str(\"({default: \");","highlight_start":1,"highlight_end":52},{"text":"                    result.push_str(default.to_string().as_str());","highlight_start":1,"highlight_end":67},{"text":"                    result.push_str(\"})\");","highlight_start":1,"highlight_end":43},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    result.push_str(\"()\");","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(result)","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn from_idl_to_schema(mut schema: Vec<NP_Parsed_Schema>, _name: &str, idl: &JS_Schema, args: &Vec<JS_AST>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":181},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                let mut default: Option<$t> = None;","highlight_start":1,"highlight_end":52},{"text":"                let mut default_str: Option<String> = None;","highlight_start":1,"highlight_end":60},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if args.len() > 0 {","highlight_start":1,"highlight_end":36},{"text":"                    match &args[0] {","highlight_start":1,"highlight_end":37},{"text":"                        JS_AST::object { properties } => {","highlight_start":1,"highlight_end":59},{"text":"                            for (key, value) in properties.iter() {","highlight_start":1,"highlight_end":68},{"text":"                                match idl.get_str(key).trim() {","highlight_start":1,"highlight_end":64},{"text":"                                    \"default\" => {","highlight_start":1,"highlight_end":51},{"text":"                                        match value {","highlight_start":1,"highlight_end":54},{"text":"                                            JS_AST::number { addr } => {","highlight_start":1,"highlight_end":73},{"text":"                                                let trimmed = idl.get_str(addr).trim();","highlight_start":1,"highlight_end":88},{"text":"                                                match trimmed.parse::<$t>() {","highlight_start":1,"highlight_end":78},{"text":"                                                    Ok(x) => {","highlight_start":1,"highlight_end":63},{"text":"                                                        default_str = Some(String::from(trimmed));","highlight_start":1,"highlight_end":99},{"text":"                                                        default = Some(x);","highlight_start":1,"highlight_end":75},{"text":"                                                    },","highlight_start":1,"highlight_end":55},{"text":"                                                    Err(_e) => {  }","highlight_start":1,"highlight_end":68},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            },","highlight_start":1,"highlight_end":47},{"text":"                                            _ => { }","highlight_start":1,"highlight_end":53},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    _ => { }","highlight_start":1,"highlight_end":45},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { }","highlight_start":1,"highlight_end":33},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(x) = default {","highlight_start":1,"highlight_end":43},{"text":"                    schema_data.push(1);","highlight_start":1,"highlight_end":41},{"text":"                    schema_data.extend_from_slice(&(x as $t).to_be_bytes());","highlight_start":1,"highlight_end":77},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    schema_data.push(0);","highlight_start":1,"highlight_end":41},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn default_value<'default>(_depth: usize, addr: usize, schema: &'default Vec<NP_Parsed_Schema>) -> Option<Self> {","highlight_start":1,"highlight_end":126},{"text":"                <$t>::np_get_default(addr, &schema)","highlight_start":1,"highlight_end":52},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"            fn set_value<'set>(cursor: NP_Cursor, memory: &'set NP_Memory, value: Self) -> Result<NP_Cursor, NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":146},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut value_address = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if value_address != 0 { // existing value, replace","highlight_start":1,"highlight_end":67},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let write_bytes = memory.write_bytes();","highlight_start":1,"highlight_end":60},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    // overwrite existing values in buffer","highlight_start":1,"highlight_end":59},{"text":"                    for x in 0..bytes.len() {","highlight_start":1,"highlight_end":46},{"text":"                        write_bytes[value_address + x] = bytes[x];","highlight_start":1,"highlight_end":67},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                } else { // new value","highlight_start":1,"highlight_end":38},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    value_address = memory.malloc_borrow(&bytes)?;","highlight_start":1,"highlight_end":67},{"text":"                    cursor.get_value_mut(memory).set_addr_value(value_address as u32);","highlight_start":1,"highlight_end":87},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn into_value(cursor: &NP_Cursor, memory: &'value NP_Memory) -> Result<Option<Self>, NP_Error> where Self: Sized {","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let value_addr = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":70},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                // empty value","highlight_start":1,"highlight_end":31},{"text":"                if value_addr == 0 {","highlight_start":1,"highlight_end":37},{"text":"                    return Ok(None);","highlight_start":1,"highlight_end":37},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let read_memory = memory.read_bytes();","highlight_start":1,"highlight_end":55},{"text":"                let mut be_bytes = <$t>::default().to_be_bytes();","highlight_start":1,"highlight_end":66},{"text":"                for x in 0..be_bytes.len() {","highlight_start":1,"highlight_end":45},{"text":"                    be_bytes[x] = read_memory[value_addr + x];","highlight_start":1,"highlight_end":63},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match $numType {","highlight_start":1,"highlight_end":33},{"text":"                    NP_NumType::signed => {","highlight_start":1,"highlight_end":44},{"text":"                        be_bytes[0] = to_signed(be_bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(Some(<$t>::from_be_bytes(be_bytes)))","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn to_json(_depth:usize, cursor: &NP_Cursor, memory: &'value NP_Memory) -> NP_JSON {","highlight_start":1,"highlight_end":97},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match Self::into_value(cursor, memory) {","highlight_start":1,"highlight_end":57},{"text":"                    Ok(x) => {","highlight_start":1,"highlight_end":31},{"text":"                        match x {","highlight_start":1,"highlight_end":34},{"text":"                            Some(y) => {","highlight_start":1,"highlight_end":41},{"text":"                                match $numType {","highlight_start":1,"highlight_end":49},{"text":"                                    NP_NumType::floating => NP_JSON::Float(y as f64),","highlight_start":1,"highlight_end":86},{"text":"                                    _ => NP_JSON::Integer(y as i64)","highlight_start":1,"highlight_end":68},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            },","highlight_start":1,"highlight_end":31},{"text":"                            None => {","highlight_start":1,"highlight_end":38},{"text":"                                match <$t>::default_value(0, cursor.schema_addr, &memory.get_schemas()) {","highlight_start":1,"highlight_end":106},{"text":"                                    Some(v) => {","highlight_start":1,"highlight_end":49},{"text":"                                        match $numType {","highlight_start":1,"highlight_end":57},{"text":"                                            NP_NumType::floating => { NP_JSON::Float(v as f64) },","highlight_start":1,"highlight_end":98},{"text":"                                            _ => { NP_JSON::Integer(v as i64) }","highlight_start":1,"highlight_end":80},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    None => NP_JSON::Null","highlight_start":1,"highlight_end":58},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    Err(_e) => {","highlight_start":1,"highlight_end":33},{"text":"                        NP_JSON::Null","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn get_size(_depth:usize, cursor: &NP_Cursor, memory: &NP_Memory) -> Result<usize, NP_Error> {","highlight_start":1,"highlight_end":107},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if c_value().get_addr_value() == 0 {","highlight_start":1,"highlight_end":53},{"text":"                    Ok(0) ","highlight_start":1,"highlight_end":27},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Ok(core::mem::size_of::<Self>())","highlight_start":1,"highlight_end":53},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_json_to_schema(mut schema: Vec<NP_Parsed_Schema>, json_schema: &Box<NP_JSON>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":160},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"                match json_schema[\"default\"] {","highlight_start":1,"highlight_end":47},{"text":"                    NP_JSON::Float(x) => {","highlight_start":1,"highlight_end":43},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Integer(x) => {","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {","highlight_start":1,"highlight_end":27},{"text":"                        schema_data.push(0);","highlight_start":1,"highlight_end":45},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_bytes_to_schema(mut schema: Vec<NP_Parsed_Schema>, address: usize, bytes: &[u8]) -> (bool, Vec<NP_Parsed_Schema>) {","highlight_start":1,"highlight_end":136},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"                (schema[schema.len() - 1].sortable, schema)","highlight_start":1,"highlight_end":60},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/numbers.rs:414:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m414\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                let use_schema = NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m472\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mnoproto_number!(u32, \"uint32\", \"u32\", NP_TypeKeys::Uint32, NP_NumType::unsigned);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/numbers.rs","byte_start":18088,"byte_end":18104,"line_start":414,"line_end":414,"column_start":34,"column_end":50,"is_primary":true,"text":[{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":34,"highlight_end":50}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/pointer/numbers.rs","byte_start":21383,"byte_end":21464,"line_start":473,"line_end":473,"column_start":1,"column_end":82,"is_primary":false,"text":[{"text":"noproto_number!(u64, \"uint64\", \"u64\", NP_TypeKeys::Uint64, NP_NumType::unsigned);","highlight_start":1,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"noproto_number!","def_site_span":{"file_name":"src/pointer/numbers.rs","byte_start":2213,"byte_end":20774,"line_start":67,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! noproto_number {","highlight_start":1,"highlight_end":30},{"text":"    ($t:ty, $str1: tt, $str2: tt, $tkey: expr, $numType: expr) => {","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> super::NP_Scalar<'value> for $t {","highlight_start":1,"highlight_end":55},{"text":"            fn schema_default(_schema: &NP_Parsed_Schema) -> Option<Self> where Self: Sized {","highlight_start":1,"highlight_end":94},{"text":"                Some(Self::default())","highlight_start":1,"highlight_end":38},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn np_max_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MAX)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn np_min_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MIN)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> NP_Value<'value> for $t {","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn type_idx() -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":75},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn self_type_idx(&self) -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":85},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn set_from_json<'set>(_depth: usize, _apply_null: bool, cursor: NP_Cursor, memory: &'set NP_Memory, value: &Box<NP_JSON>) -> Result<(), NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":186},{"text":"                match **value {","highlight_start":1,"highlight_end":32},{"text":"                    NP_JSON::Integer(int) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, int as $t)?;","highlight_start":1,"highlight_end":69},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Float(float) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, float as $t)?;","highlight_start":1,"highlight_end":71},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_json(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<NP_JSON, NP_Error> {","highlight_start":1,"highlight_end":108},{"text":"                let mut schema_json = JSMAP::new();","highlight_start":1,"highlight_end":52},{"text":"                schema_json.insert(\"type\".to_owned(), NP_JSON::String(Self::type_idx().0.to_string()));","highlight_start":1,"highlight_end":104},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    let default_val = default;","highlight_start":1,"highlight_end":47},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::unsigned => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::floating => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Float(default_val as f64));","highlight_start":1,"highlight_end":106},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                    ","highlight_start":1,"highlight_end":21},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                Ok(NP_JSON::Dictionary(schema_json))","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_idl(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<String, NP_Error> {","highlight_start":1,"highlight_end":106},{"text":"                let mut result = String::from($str2);","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    result.push_str(\"({default: \");","highlight_start":1,"highlight_end":52},{"text":"                    result.push_str(default.to_string().as_str());","highlight_start":1,"highlight_end":67},{"text":"                    result.push_str(\"})\");","highlight_start":1,"highlight_end":43},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    result.push_str(\"()\");","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(result)","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn from_idl_to_schema(mut schema: Vec<NP_Parsed_Schema>, _name: &str, idl: &JS_Schema, args: &Vec<JS_AST>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":181},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                let mut default: Option<$t> = None;","highlight_start":1,"highlight_end":52},{"text":"                let mut default_str: Option<String> = None;","highlight_start":1,"highlight_end":60},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if args.len() > 0 {","highlight_start":1,"highlight_end":36},{"text":"                    match &args[0] {","highlight_start":1,"highlight_end":37},{"text":"                        JS_AST::object { properties } => {","highlight_start":1,"highlight_end":59},{"text":"                            for (key, value) in properties.iter() {","highlight_start":1,"highlight_end":68},{"text":"                                match idl.get_str(key).trim() {","highlight_start":1,"highlight_end":64},{"text":"                                    \"default\" => {","highlight_start":1,"highlight_end":51},{"text":"                                        match value {","highlight_start":1,"highlight_end":54},{"text":"                                            JS_AST::number { addr } => {","highlight_start":1,"highlight_end":73},{"text":"                                                let trimmed = idl.get_str(addr).trim();","highlight_start":1,"highlight_end":88},{"text":"                                                match trimmed.parse::<$t>() {","highlight_start":1,"highlight_end":78},{"text":"                                                    Ok(x) => {","highlight_start":1,"highlight_end":63},{"text":"                                                        default_str = Some(String::from(trimmed));","highlight_start":1,"highlight_end":99},{"text":"                                                        default = Some(x);","highlight_start":1,"highlight_end":75},{"text":"                                                    },","highlight_start":1,"highlight_end":55},{"text":"                                                    Err(_e) => {  }","highlight_start":1,"highlight_end":68},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            },","highlight_start":1,"highlight_end":47},{"text":"                                            _ => { }","highlight_start":1,"highlight_end":53},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    _ => { }","highlight_start":1,"highlight_end":45},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { }","highlight_start":1,"highlight_end":33},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(x) = default {","highlight_start":1,"highlight_end":43},{"text":"                    schema_data.push(1);","highlight_start":1,"highlight_end":41},{"text":"                    schema_data.extend_from_slice(&(x as $t).to_be_bytes());","highlight_start":1,"highlight_end":77},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    schema_data.push(0);","highlight_start":1,"highlight_end":41},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn default_value<'default>(_depth: usize, addr: usize, schema: &'default Vec<NP_Parsed_Schema>) -> Option<Self> {","highlight_start":1,"highlight_end":126},{"text":"                <$t>::np_get_default(addr, &schema)","highlight_start":1,"highlight_end":52},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"            fn set_value<'set>(cursor: NP_Cursor, memory: &'set NP_Memory, value: Self) -> Result<NP_Cursor, NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":146},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut value_address = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if value_address != 0 { // existing value, replace","highlight_start":1,"highlight_end":67},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let write_bytes = memory.write_bytes();","highlight_start":1,"highlight_end":60},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    // overwrite existing values in buffer","highlight_start":1,"highlight_end":59},{"text":"                    for x in 0..bytes.len() {","highlight_start":1,"highlight_end":46},{"text":"                        write_bytes[value_address + x] = bytes[x];","highlight_start":1,"highlight_end":67},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                } else { // new value","highlight_start":1,"highlight_end":38},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    value_address = memory.malloc_borrow(&bytes)?;","highlight_start":1,"highlight_end":67},{"text":"                    cursor.get_value_mut(memory).set_addr_value(value_address as u32);","highlight_start":1,"highlight_end":87},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn into_value(cursor: &NP_Cursor, memory: &'value NP_Memory) -> Result<Option<Self>, NP_Error> where Self: Sized {","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let value_addr = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":70},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                // empty value","highlight_start":1,"highlight_end":31},{"text":"                if value_addr == 0 {","highlight_start":1,"highlight_end":37},{"text":"                    return Ok(None);","highlight_start":1,"highlight_end":37},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let read_memory = memory.read_bytes();","highlight_start":1,"highlight_end":55},{"text":"                let mut be_bytes = <$t>::default().to_be_bytes();","highlight_start":1,"highlight_end":66},{"text":"                for x in 0..be_bytes.len() {","highlight_start":1,"highlight_end":45},{"text":"                    be_bytes[x] = read_memory[value_addr + x];","highlight_start":1,"highlight_end":63},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match $numType {","highlight_start":1,"highlight_end":33},{"text":"                    NP_NumType::signed => {","highlight_start":1,"highlight_end":44},{"text":"                        be_bytes[0] = to_signed(be_bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(Some(<$t>::from_be_bytes(be_bytes)))","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn to_json(_depth:usize, cursor: &NP_Cursor, memory: &'value NP_Memory) -> NP_JSON {","highlight_start":1,"highlight_end":97},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match Self::into_value(cursor, memory) {","highlight_start":1,"highlight_end":57},{"text":"                    Ok(x) => {","highlight_start":1,"highlight_end":31},{"text":"                        match x {","highlight_start":1,"highlight_end":34},{"text":"                            Some(y) => {","highlight_start":1,"highlight_end":41},{"text":"                                match $numType {","highlight_start":1,"highlight_end":49},{"text":"                                    NP_NumType::floating => NP_JSON::Float(y as f64),","highlight_start":1,"highlight_end":86},{"text":"                                    _ => NP_JSON::Integer(y as i64)","highlight_start":1,"highlight_end":68},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            },","highlight_start":1,"highlight_end":31},{"text":"                            None => {","highlight_start":1,"highlight_end":38},{"text":"                                match <$t>::default_value(0, cursor.schema_addr, &memory.get_schemas()) {","highlight_start":1,"highlight_end":106},{"text":"                                    Some(v) => {","highlight_start":1,"highlight_end":49},{"text":"                                        match $numType {","highlight_start":1,"highlight_end":57},{"text":"                                            NP_NumType::floating => { NP_JSON::Float(v as f64) },","highlight_start":1,"highlight_end":98},{"text":"                                            _ => { NP_JSON::Integer(v as i64) }","highlight_start":1,"highlight_end":80},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    None => NP_JSON::Null","highlight_start":1,"highlight_end":58},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    Err(_e) => {","highlight_start":1,"highlight_end":33},{"text":"                        NP_JSON::Null","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn get_size(_depth:usize, cursor: &NP_Cursor, memory: &NP_Memory) -> Result<usize, NP_Error> {","highlight_start":1,"highlight_end":107},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if c_value().get_addr_value() == 0 {","highlight_start":1,"highlight_end":53},{"text":"                    Ok(0) ","highlight_start":1,"highlight_end":27},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Ok(core::mem::size_of::<Self>())","highlight_start":1,"highlight_end":53},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_json_to_schema(mut schema: Vec<NP_Parsed_Schema>, json_schema: &Box<NP_JSON>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":160},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"                match json_schema[\"default\"] {","highlight_start":1,"highlight_end":47},{"text":"                    NP_JSON::Float(x) => {","highlight_start":1,"highlight_end":43},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Integer(x) => {","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {","highlight_start":1,"highlight_end":27},{"text":"                        schema_data.push(0);","highlight_start":1,"highlight_end":45},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_bytes_to_schema(mut schema: Vec<NP_Parsed_Schema>, address: usize, bytes: &[u8]) -> (bool, Vec<NP_Parsed_Schema>) {","highlight_start":1,"highlight_end":136},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"                (schema[schema.len() - 1].sortable, schema)","highlight_start":1,"highlight_end":60},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/numbers.rs:414:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m414\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                let use_schema = NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m473\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mnoproto_number!(u64, \"uint64\", \"u64\", NP_TypeKeys::Uint64, NP_NumType::unsigned);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/numbers.rs","byte_start":18088,"byte_end":18104,"line_start":414,"line_end":414,"column_start":34,"column_end":50,"is_primary":true,"text":[{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":34,"highlight_end":50}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/pointer/numbers.rs","byte_start":21484,"byte_end":21565,"line_start":476,"line_end":476,"column_start":1,"column_end":82,"is_primary":false,"text":[{"text":"noproto_number!(f32,  \"float\", \"f32\", NP_TypeKeys::Float , NP_NumType::floating);","highlight_start":1,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"noproto_number!","def_site_span":{"file_name":"src/pointer/numbers.rs","byte_start":2213,"byte_end":20774,"line_start":67,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! noproto_number {","highlight_start":1,"highlight_end":30},{"text":"    ($t:ty, $str1: tt, $str2: tt, $tkey: expr, $numType: expr) => {","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> super::NP_Scalar<'value> for $t {","highlight_start":1,"highlight_end":55},{"text":"            fn schema_default(_schema: &NP_Parsed_Schema) -> Option<Self> where Self: Sized {","highlight_start":1,"highlight_end":94},{"text":"                Some(Self::default())","highlight_start":1,"highlight_end":38},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn np_max_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MAX)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn np_min_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MIN)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> NP_Value<'value> for $t {","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn type_idx() -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":75},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn self_type_idx(&self) -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":85},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn set_from_json<'set>(_depth: usize, _apply_null: bool, cursor: NP_Cursor, memory: &'set NP_Memory, value: &Box<NP_JSON>) -> Result<(), NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":186},{"text":"                match **value {","highlight_start":1,"highlight_end":32},{"text":"                    NP_JSON::Integer(int) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, int as $t)?;","highlight_start":1,"highlight_end":69},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Float(float) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, float as $t)?;","highlight_start":1,"highlight_end":71},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_json(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<NP_JSON, NP_Error> {","highlight_start":1,"highlight_end":108},{"text":"                let mut schema_json = JSMAP::new();","highlight_start":1,"highlight_end":52},{"text":"                schema_json.insert(\"type\".to_owned(), NP_JSON::String(Self::type_idx().0.to_string()));","highlight_start":1,"highlight_end":104},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    let default_val = default;","highlight_start":1,"highlight_end":47},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::unsigned => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::floating => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Float(default_val as f64));","highlight_start":1,"highlight_end":106},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                    ","highlight_start":1,"highlight_end":21},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                Ok(NP_JSON::Dictionary(schema_json))","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_idl(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<String, NP_Error> {","highlight_start":1,"highlight_end":106},{"text":"                let mut result = String::from($str2);","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    result.push_str(\"({default: \");","highlight_start":1,"highlight_end":52},{"text":"                    result.push_str(default.to_string().as_str());","highlight_start":1,"highlight_end":67},{"text":"                    result.push_str(\"})\");","highlight_start":1,"highlight_end":43},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    result.push_str(\"()\");","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(result)","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn from_idl_to_schema(mut schema: Vec<NP_Parsed_Schema>, _name: &str, idl: &JS_Schema, args: &Vec<JS_AST>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":181},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                let mut default: Option<$t> = None;","highlight_start":1,"highlight_end":52},{"text":"                let mut default_str: Option<String> = None;","highlight_start":1,"highlight_end":60},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if args.len() > 0 {","highlight_start":1,"highlight_end":36},{"text":"                    match &args[0] {","highlight_start":1,"highlight_end":37},{"text":"                        JS_AST::object { properties } => {","highlight_start":1,"highlight_end":59},{"text":"                            for (key, value) in properties.iter() {","highlight_start":1,"highlight_end":68},{"text":"                                match idl.get_str(key).trim() {","highlight_start":1,"highlight_end":64},{"text":"                                    \"default\" => {","highlight_start":1,"highlight_end":51},{"text":"                                        match value {","highlight_start":1,"highlight_end":54},{"text":"                                            JS_AST::number { addr } => {","highlight_start":1,"highlight_end":73},{"text":"                                                let trimmed = idl.get_str(addr).trim();","highlight_start":1,"highlight_end":88},{"text":"                                                match trimmed.parse::<$t>() {","highlight_start":1,"highlight_end":78},{"text":"                                                    Ok(x) => {","highlight_start":1,"highlight_end":63},{"text":"                                                        default_str = Some(String::from(trimmed));","highlight_start":1,"highlight_end":99},{"text":"                                                        default = Some(x);","highlight_start":1,"highlight_end":75},{"text":"                                                    },","highlight_start":1,"highlight_end":55},{"text":"                                                    Err(_e) => {  }","highlight_start":1,"highlight_end":68},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            },","highlight_start":1,"highlight_end":47},{"text":"                                            _ => { }","highlight_start":1,"highlight_end":53},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    _ => { }","highlight_start":1,"highlight_end":45},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { }","highlight_start":1,"highlight_end":33},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(x) = default {","highlight_start":1,"highlight_end":43},{"text":"                    schema_data.push(1);","highlight_start":1,"highlight_end":41},{"text":"                    schema_data.extend_from_slice(&(x as $t).to_be_bytes());","highlight_start":1,"highlight_end":77},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    schema_data.push(0);","highlight_start":1,"highlight_end":41},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn default_value<'default>(_depth: usize, addr: usize, schema: &'default Vec<NP_Parsed_Schema>) -> Option<Self> {","highlight_start":1,"highlight_end":126},{"text":"                <$t>::np_get_default(addr, &schema)","highlight_start":1,"highlight_end":52},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"            fn set_value<'set>(cursor: NP_Cursor, memory: &'set NP_Memory, value: Self) -> Result<NP_Cursor, NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":146},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut value_address = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if value_address != 0 { // existing value, replace","highlight_start":1,"highlight_end":67},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let write_bytes = memory.write_bytes();","highlight_start":1,"highlight_end":60},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    // overwrite existing values in buffer","highlight_start":1,"highlight_end":59},{"text":"                    for x in 0..bytes.len() {","highlight_start":1,"highlight_end":46},{"text":"                        write_bytes[value_address + x] = bytes[x];","highlight_start":1,"highlight_end":67},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                } else { // new value","highlight_start":1,"highlight_end":38},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    value_address = memory.malloc_borrow(&bytes)?;","highlight_start":1,"highlight_end":67},{"text":"                    cursor.get_value_mut(memory).set_addr_value(value_address as u32);","highlight_start":1,"highlight_end":87},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn into_value(cursor: &NP_Cursor, memory: &'value NP_Memory) -> Result<Option<Self>, NP_Error> where Self: Sized {","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let value_addr = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":70},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                // empty value","highlight_start":1,"highlight_end":31},{"text":"                if value_addr == 0 {","highlight_start":1,"highlight_end":37},{"text":"                    return Ok(None);","highlight_start":1,"highlight_end":37},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let read_memory = memory.read_bytes();","highlight_start":1,"highlight_end":55},{"text":"                let mut be_bytes = <$t>::default().to_be_bytes();","highlight_start":1,"highlight_end":66},{"text":"                for x in 0..be_bytes.len() {","highlight_start":1,"highlight_end":45},{"text":"                    be_bytes[x] = read_memory[value_addr + x];","highlight_start":1,"highlight_end":63},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match $numType {","highlight_start":1,"highlight_end":33},{"text":"                    NP_NumType::signed => {","highlight_start":1,"highlight_end":44},{"text":"                        be_bytes[0] = to_signed(be_bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(Some(<$t>::from_be_bytes(be_bytes)))","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn to_json(_depth:usize, cursor: &NP_Cursor, memory: &'value NP_Memory) -> NP_JSON {","highlight_start":1,"highlight_end":97},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match Self::into_value(cursor, memory) {","highlight_start":1,"highlight_end":57},{"text":"                    Ok(x) => {","highlight_start":1,"highlight_end":31},{"text":"                        match x {","highlight_start":1,"highlight_end":34},{"text":"                            Some(y) => {","highlight_start":1,"highlight_end":41},{"text":"                                match $numType {","highlight_start":1,"highlight_end":49},{"text":"                                    NP_NumType::floating => NP_JSON::Float(y as f64),","highlight_start":1,"highlight_end":86},{"text":"                                    _ => NP_JSON::Integer(y as i64)","highlight_start":1,"highlight_end":68},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            },","highlight_start":1,"highlight_end":31},{"text":"                            None => {","highlight_start":1,"highlight_end":38},{"text":"                                match <$t>::default_value(0, cursor.schema_addr, &memory.get_schemas()) {","highlight_start":1,"highlight_end":106},{"text":"                                    Some(v) => {","highlight_start":1,"highlight_end":49},{"text":"                                        match $numType {","highlight_start":1,"highlight_end":57},{"text":"                                            NP_NumType::floating => { NP_JSON::Float(v as f64) },","highlight_start":1,"highlight_end":98},{"text":"                                            _ => { NP_JSON::Integer(v as i64) }","highlight_start":1,"highlight_end":80},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    None => NP_JSON::Null","highlight_start":1,"highlight_end":58},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    Err(_e) => {","highlight_start":1,"highlight_end":33},{"text":"                        NP_JSON::Null","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn get_size(_depth:usize, cursor: &NP_Cursor, memory: &NP_Memory) -> Result<usize, NP_Error> {","highlight_start":1,"highlight_end":107},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if c_value().get_addr_value() == 0 {","highlight_start":1,"highlight_end":53},{"text":"                    Ok(0) ","highlight_start":1,"highlight_end":27},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Ok(core::mem::size_of::<Self>())","highlight_start":1,"highlight_end":53},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_json_to_schema(mut schema: Vec<NP_Parsed_Schema>, json_schema: &Box<NP_JSON>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":160},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"                match json_schema[\"default\"] {","highlight_start":1,"highlight_end":47},{"text":"                    NP_JSON::Float(x) => {","highlight_start":1,"highlight_end":43},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Integer(x) => {","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {","highlight_start":1,"highlight_end":27},{"text":"                        schema_data.push(0);","highlight_start":1,"highlight_end":45},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_bytes_to_schema(mut schema: Vec<NP_Parsed_Schema>, address: usize, bytes: &[u8]) -> (bool, Vec<NP_Parsed_Schema>) {","highlight_start":1,"highlight_end":136},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"                (schema[schema.len() - 1].sortable, schema)","highlight_start":1,"highlight_end":60},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/numbers.rs:414:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m414\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                let use_schema = NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m476\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mnoproto_number!(f32,  \"float\", \"f32\", NP_TypeKeys::Float , NP_NumType::floating);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/numbers.rs","byte_start":18088,"byte_end":18104,"line_start":414,"line_end":414,"column_start":34,"column_end":50,"is_primary":true,"text":[{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":34,"highlight_end":50}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/pointer/numbers.rs","byte_start":21566,"byte_end":21647,"line_start":477,"line_end":477,"column_start":1,"column_end":82,"is_primary":false,"text":[{"text":"noproto_number!(f64, \"double\", \"f64\", NP_TypeKeys::Double, NP_NumType::floating);","highlight_start":1,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"noproto_number!","def_site_span":{"file_name":"src/pointer/numbers.rs","byte_start":2213,"byte_end":20774,"line_start":67,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! noproto_number {","highlight_start":1,"highlight_end":30},{"text":"    ($t:ty, $str1: tt, $str2: tt, $tkey: expr, $numType: expr) => {","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> super::NP_Scalar<'value> for $t {","highlight_start":1,"highlight_end":55},{"text":"            fn schema_default(_schema: &NP_Parsed_Schema) -> Option<Self> where Self: Sized {","highlight_start":1,"highlight_end":94},{"text":"                Some(Self::default())","highlight_start":1,"highlight_end":38},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn np_max_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MAX)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn np_min_value(_cursor: &NP_Cursor, _memory: &NP_Memory) -> Option<Self> {","highlight_start":1,"highlight_end":88},{"text":"                Some(<$t>::MIN)","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'value> NP_Value<'value> for $t {","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn type_idx() -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":75},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn self_type_idx(&self) -> (&'value str, NP_TypeKeys) { ($str1, $tkey) }","highlight_start":1,"highlight_end":85},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn set_from_json<'set>(_depth: usize, _apply_null: bool, cursor: NP_Cursor, memory: &'set NP_Memory, value: &Box<NP_JSON>) -> Result<(), NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":186},{"text":"                match **value {","highlight_start":1,"highlight_end":32},{"text":"                    NP_JSON::Integer(int) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, int as $t)?;","highlight_start":1,"highlight_end":69},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Float(float) => {","highlight_start":1,"highlight_end":47},{"text":"                        Self::set_value(cursor, memory, float as $t)?;","highlight_start":1,"highlight_end":71},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_json(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<NP_JSON, NP_Error> {","highlight_start":1,"highlight_end":108},{"text":"                let mut schema_json = JSMAP::new();","highlight_start":1,"highlight_end":52},{"text":"                schema_json.insert(\"type\".to_owned(), NP_JSON::String(Self::type_idx().0.to_string()));","highlight_start":1,"highlight_end":104},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    let default_val = default;","highlight_start":1,"highlight_end":47},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::unsigned => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Integer(default_val as i64));","highlight_start":1,"highlight_end":108},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_NumType::floating => {","highlight_start":1,"highlight_end":50},{"text":"                            schema_json.insert(\"default\".to_owned(), NP_JSON::Float(default_val as f64));","highlight_start":1,"highlight_end":106},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                    ","highlight_start":1,"highlight_end":21},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                Ok(NP_JSON::Dictionary(schema_json))","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn schema_to_idl(schema: &Vec<NP_Parsed_Schema>, address: usize)-> Result<String, NP_Error> {","highlight_start":1,"highlight_end":106},{"text":"                let mut result = String::from($str2);","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(default) = <$t>::np_get_default(address, &schema) {","highlight_start":1,"highlight_end":80},{"text":"                    result.push_str(\"({default: \");","highlight_start":1,"highlight_end":52},{"text":"                    result.push_str(default.to_string().as_str());","highlight_start":1,"highlight_end":67},{"text":"                    result.push_str(\"})\");","highlight_start":1,"highlight_end":43},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    result.push_str(\"()\");","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(result)","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn from_idl_to_schema(mut schema: Vec<NP_Parsed_Schema>, _name: &str, idl: &JS_Schema, args: &Vec<JS_AST>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":181},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                let mut default: Option<$t> = None;","highlight_start":1,"highlight_end":52},{"text":"                let mut default_str: Option<String> = None;","highlight_start":1,"highlight_end":60},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if args.len() > 0 {","highlight_start":1,"highlight_end":36},{"text":"                    match &args[0] {","highlight_start":1,"highlight_end":37},{"text":"                        JS_AST::object { properties } => {","highlight_start":1,"highlight_end":59},{"text":"                            for (key, value) in properties.iter() {","highlight_start":1,"highlight_end":68},{"text":"                                match idl.get_str(key).trim() {","highlight_start":1,"highlight_end":64},{"text":"                                    \"default\" => {","highlight_start":1,"highlight_end":51},{"text":"                                        match value {","highlight_start":1,"highlight_end":54},{"text":"                                            JS_AST::number { addr } => {","highlight_start":1,"highlight_end":73},{"text":"                                                let trimmed = idl.get_str(addr).trim();","highlight_start":1,"highlight_end":88},{"text":"                                                match trimmed.parse::<$t>() {","highlight_start":1,"highlight_end":78},{"text":"                                                    Ok(x) => {","highlight_start":1,"highlight_end":63},{"text":"                                                        default_str = Some(String::from(trimmed));","highlight_start":1,"highlight_end":99},{"text":"                                                        default = Some(x);","highlight_start":1,"highlight_end":75},{"text":"                                                    },","highlight_start":1,"highlight_end":55},{"text":"                                                    Err(_e) => {  }","highlight_start":1,"highlight_end":68},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            },","highlight_start":1,"highlight_end":47},{"text":"                                            _ => { }","highlight_start":1,"highlight_end":53},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    _ => { }","highlight_start":1,"highlight_end":45},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { }","highlight_start":1,"highlight_end":33},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if let Some(x) = default {","highlight_start":1,"highlight_end":43},{"text":"                    schema_data.push(1);","highlight_start":1,"highlight_end":41},{"text":"                    schema_data.extend_from_slice(&(x as $t).to_be_bytes());","highlight_start":1,"highlight_end":77},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    schema_data.push(0);","highlight_start":1,"highlight_end":41},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":125},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_unwrap_default(default_str) })) as *const u8","highlight_start":1,"highlight_end":127},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn default_value<'default>(_depth: usize, addr: usize, schema: &'default Vec<NP_Parsed_Schema>) -> Option<Self> {","highlight_start":1,"highlight_end":126},{"text":"                <$t>::np_get_default(addr, &schema)","highlight_start":1,"highlight_end":52},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"            fn set_value<'set>(cursor: NP_Cursor, memory: &'set NP_Memory, value: Self) -> Result<NP_Cursor, NP_Error> where Self: 'set + Sized {","highlight_start":1,"highlight_end":146},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut value_address = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if value_address != 0 { // existing value, replace","highlight_start":1,"highlight_end":67},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let write_bytes = memory.write_bytes();","highlight_start":1,"highlight_end":60},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    // overwrite existing values in buffer","highlight_start":1,"highlight_end":59},{"text":"                    for x in 0..bytes.len() {","highlight_start":1,"highlight_end":46},{"text":"                        write_bytes[value_address + x] = bytes[x];","highlight_start":1,"highlight_end":67},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                } else { // new value","highlight_start":1,"highlight_end":38},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    let mut bytes = value.to_be_bytes();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    match $numType {","highlight_start":1,"highlight_end":37},{"text":"                        NP_NumType::signed => {","highlight_start":1,"highlight_end":48},{"text":"                            bytes[0] = to_unsigned(bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => {}","highlight_start":1,"highlight_end":32},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                    value_address = memory.malloc_borrow(&bytes)?;","highlight_start":1,"highlight_end":67},{"text":"                    cursor.get_value_mut(memory).set_addr_value(value_address as u32);","highlight_start":1,"highlight_end":87},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    return Ok(cursor);","highlight_start":1,"highlight_end":39},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"            fn into_value(cursor: &NP_Cursor, memory: &'value NP_Memory) -> Result<Option<Self>, NP_Error> where Self: Sized {","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let value_addr = c_value().get_addr_value() as usize;","highlight_start":1,"highlight_end":70},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                // empty value","highlight_start":1,"highlight_end":31},{"text":"                if value_addr == 0 {","highlight_start":1,"highlight_end":37},{"text":"                    return Ok(None);","highlight_start":1,"highlight_end":37},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let read_memory = memory.read_bytes();","highlight_start":1,"highlight_end":55},{"text":"                let mut be_bytes = <$t>::default().to_be_bytes();","highlight_start":1,"highlight_end":66},{"text":"                for x in 0..be_bytes.len() {","highlight_start":1,"highlight_end":45},{"text":"                    be_bytes[x] = read_memory[value_addr + x];","highlight_start":1,"highlight_end":63},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match $numType {","highlight_start":1,"highlight_end":33},{"text":"                    NP_NumType::signed => {","highlight_start":1,"highlight_end":44},{"text":"                        be_bytes[0] = to_signed(be_bytes[0]);","highlight_start":1,"highlight_end":62},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {}","highlight_start":1,"highlight_end":28},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(Some(<$t>::from_be_bytes(be_bytes)))","highlight_start":1,"highlight_end":56},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn to_json(_depth:usize, cursor: &NP_Cursor, memory: &'value NP_Memory) -> NP_JSON {","highlight_start":1,"highlight_end":97},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match Self::into_value(cursor, memory) {","highlight_start":1,"highlight_end":57},{"text":"                    Ok(x) => {","highlight_start":1,"highlight_end":31},{"text":"                        match x {","highlight_start":1,"highlight_end":34},{"text":"                            Some(y) => {","highlight_start":1,"highlight_end":41},{"text":"                                match $numType {","highlight_start":1,"highlight_end":49},{"text":"                                    NP_NumType::floating => NP_JSON::Float(y as f64),","highlight_start":1,"highlight_end":86},{"text":"                                    _ => NP_JSON::Integer(y as i64)","highlight_start":1,"highlight_end":68},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            },","highlight_start":1,"highlight_end":31},{"text":"                            None => {","highlight_start":1,"highlight_end":38},{"text":"                                match <$t>::default_value(0, cursor.schema_addr, &memory.get_schemas()) {","highlight_start":1,"highlight_end":106},{"text":"                                    Some(v) => {","highlight_start":1,"highlight_end":49},{"text":"                                        match $numType {","highlight_start":1,"highlight_end":57},{"text":"                                            NP_NumType::floating => { NP_JSON::Float(v as f64) },","highlight_start":1,"highlight_end":98},{"text":"                                            _ => { NP_JSON::Integer(v as i64) }","highlight_start":1,"highlight_end":80},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    None => NP_JSON::Null","highlight_start":1,"highlight_end":58},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    Err(_e) => {","highlight_start":1,"highlight_end":33},{"text":"                        NP_JSON::Null","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn get_size(_depth:usize, cursor: &NP_Cursor, memory: &NP_Memory) -> Result<usize, NP_Error> {","highlight_start":1,"highlight_end":107},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let c_value = || { cursor.get_value(memory) };","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if c_value().get_addr_value() == 0 {","highlight_start":1,"highlight_end":53},{"text":"                    Ok(0) ","highlight_start":1,"highlight_end":27},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Ok(core::mem::size_of::<Self>())","highlight_start":1,"highlight_end":53},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_json_to_schema(mut schema: Vec<NP_Parsed_Schema>, json_schema: &Box<NP_JSON>) -> Result<(bool, Vec<u8>, Vec<NP_Parsed_Schema>), NP_Error> {","highlight_start":1,"highlight_end":160},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                let mut schema_data: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":59},{"text":"                schema_data.push($tkey as u8);","highlight_start":1,"highlight_end":47},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"                match json_schema[\"default\"] {","highlight_start":1,"highlight_end":47},{"text":"                    NP_JSON::Float(x) => {","highlight_start":1,"highlight_end":43},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    NP_JSON::Integer(x) => {","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.push(1);","highlight_start":1,"highlight_end":45},{"text":"                        schema_data.extend((x as $t).to_be_bytes().to_vec());","highlight_start":1,"highlight_end":78},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => {","highlight_start":1,"highlight_end":27},{"text":"                        schema_data.push(0);","highlight_start":1,"highlight_end":45},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":144},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_json(&json_schema[\"default\"]) })) as *const u8","highlight_start":1,"highlight_end":146},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                return Ok((true, schema_data, schema));","highlight_start":1,"highlight_end":56},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn from_bytes_to_schema(mut schema: Vec<NP_Parsed_Schema>, address: usize, bytes: &[u8]) -> (bool, Vec<NP_Parsed_Schema>) {","highlight_start":1,"highlight_end":136},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let use_schema = NP_Parsed_Schema {","highlight_start":1,"highlight_end":52},{"text":"                    i: $tkey,","highlight_start":1,"highlight_end":30},{"text":"                    val: NP_Value_Kind::Fixed(core::mem::size_of::<Self>() as u32),","highlight_start":1,"highlight_end":84},{"text":"                    sortable: match $numType {","highlight_start":1,"highlight_end":47},{"text":"                        NP_NumType::floating => false,","highlight_start":1,"highlight_end":55},{"text":"                        _ => true,","highlight_start":1,"highlight_end":35},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    data: Arc::new(match $tkey {","highlight_start":1,"highlight_end":49},{"text":"                        NP_TypeKeys::Int8 => {","highlight_start":1,"highlight_end":47},{"text":"                            Box::into_raw(Box::new(NP_i8_Data { default: i8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int16 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i16_Data { default: i16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int32 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i32_Data { default: i32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Int64 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_i64_Data { default: i64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint8 => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_u8_Data { default: u8::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":136},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint16 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u16_Data { default: u16::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint32 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u32_Data { default: u32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Uint64 => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_u64_Data { default: u64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Float => {","highlight_start":1,"highlight_end":48},{"text":"                            Box::into_raw(Box::new(NP_f32_Data { default: f32::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        NP_TypeKeys::Double => {","highlight_start":1,"highlight_end":49},{"text":"                            Box::into_raw(Box::new(NP_f64_Data { default: f64::np_get_default_from_bytes(address, bytes) })) as *const u8","highlight_start":1,"highlight_end":138},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => { NULL() }","highlight_start":1,"highlight_end":40},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                schema.push(use_schema);","highlight_start":1,"highlight_end":41},{"text":"                (schema[schema.len() - 1].sortable, schema)","highlight_start":1,"highlight_end":60},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/numbers.rs:414:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m414\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                let use_schema = NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m477\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mnoproto_number!(f64, \"double\", \"f64\", NP_TypeKeys::Double, NP_NumType::floating);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/bool.rs","byte_start":7663,"byte_end":7679,"line_start":245,"line_end":245,"column_start":21,"column_end":37,"is_primary":true,"text":[{"text":"        schema.push(NP_Parsed_Schema {","highlight_start":21,"highlight_end":37}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/bool.rs:245:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m245\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        schema.push(NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/bool.rs","byte_start":8606,"byte_end":8622,"line_start":276,"line_end":276,"column_start":21,"column_end":37,"is_primary":true,"text":[{"text":"        schema.push(NP_Parsed_Schema {","highlight_start":21,"highlight_end":37}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/bool.rs:276:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m276\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        schema.push(NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/bool.rs","byte_start":9041,"byte_end":9057,"line_start":287,"line_end":287,"column_start":21,"column_end":37,"is_primary":true,"text":[{"text":"        schema.push(NP_Parsed_Schema {","highlight_start":21,"highlight_end":37}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/bool.rs:287:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m287\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        schema.push(NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/geo.rs","byte_start":29323,"byte_end":29339,"line_start":800,"line_end":800,"column_start":21,"column_end":37,"is_primary":true,"text":[{"text":"        schema.push(NP_Parsed_Schema {","highlight_start":21,"highlight_end":37}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/geo.rs:800:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m800\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        schema.push(NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/geo.rs","byte_start":31048,"byte_end":31064,"line_start":845,"line_end":845,"column_start":29,"column_end":45,"is_primary":true,"text":[{"text":"                schema.push(NP_Parsed_Schema {","highlight_start":29,"highlight_end":45}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/geo.rs:845:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m845\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                schema.push(NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/geo.rs","byte_start":32135,"byte_end":32151,"line_start":870,"line_end":870,"column_start":29,"column_end":45,"is_primary":true,"text":[{"text":"                schema.push(NP_Parsed_Schema {","highlight_start":29,"highlight_end":45}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/geo.rs:870:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m870\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                schema.push(NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/geo.rs","byte_start":33226,"byte_end":33242,"line_start":895,"line_end":895,"column_start":29,"column_end":45,"is_primary":true,"text":[{"text":"                schema.push(NP_Parsed_Schema {","highlight_start":29,"highlight_end":45}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/geo.rs:895:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m895\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                schema.push(NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/geo.rs","byte_start":33919,"byte_end":33935,"line_start":914,"line_end":914,"column_start":25,"column_end":41,"is_primary":true,"text":[{"text":"            schema.push(NP_Parsed_Schema {","highlight_start":25,"highlight_end":41}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/geo.rs:914:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m914\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            schema.push(NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/geo.rs","byte_start":34560,"byte_end":34576,"line_start":929,"line_end":929,"column_start":29,"column_end":45,"is_primary":true,"text":[{"text":"                schema.push(NP_Parsed_Schema {","highlight_start":29,"highlight_end":45}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/geo.rs:929:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m929\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                schema.push(NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/geo.rs","byte_start":35203,"byte_end":35219,"line_start":941,"line_end":941,"column_start":29,"column_end":45,"is_primary":true,"text":[{"text":"                schema.push(NP_Parsed_Schema {","highlight_start":29,"highlight_end":45}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/geo.rs:941:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m941\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                schema.push(NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/geo.rs","byte_start":35849,"byte_end":35865,"line_start":953,"line_end":953,"column_start":29,"column_end":45,"is_primary":true,"text":[{"text":"                schema.push(NP_Parsed_Schema {","highlight_start":29,"highlight_end":45}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/geo.rs:953:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m953\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                schema.push(NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/dec.rs","byte_start":29927,"byte_end":29943,"line_start":952,"line_end":952,"column_start":21,"column_end":37,"is_primary":true,"text":[{"text":"        schema.push(NP_Parsed_Schema {","highlight_start":21,"highlight_end":37}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/dec.rs:952:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m952\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        schema.push(NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/dec.rs","byte_start":31752,"byte_end":31768,"line_start":1005,"line_end":1005,"column_start":21,"column_end":37,"is_primary":true,"text":[{"text":"        schema.push(NP_Parsed_Schema {","highlight_start":21,"highlight_end":37}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/dec.rs:1005:21\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1005\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        schema.push(NP_Parsed_Schema {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/dec.rs","byte_start":32541,"byte_end":32557,"line_start":1028,"line_end":1028,"column_start":21,"column_end":37,"is_primary":true,"text":[{"text":"        schema.push(NP_Parsed_Schema {","highlight_start":21,"highlight_end":37}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/dec.rs:1028:21\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1028\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        schema.push(NP_Parsed_Schema {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/ulid.rs","byte_start":8117,"byte_end":8133,"line_start":266,"line_end":266,"column_start":21,"column_end":37,"is_primary":true,"text":[{"text":"        schema.push(NP_Parsed_Schema {","highlight_start":21,"highlight_end":37}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/ulid.rs:266:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m266\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        schema.push(NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/ulid.rs","byte_start":8496,"byte_end":8512,"line_start":279,"line_end":279,"column_start":21,"column_end":37,"is_primary":true,"text":[{"text":"        schema.push(NP_Parsed_Schema {","highlight_start":21,"highlight_end":37}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/ulid.rs:279:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m279\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        schema.push(NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/uuid.rs","byte_start":7290,"byte_end":7306,"line_start":247,"line_end":247,"column_start":21,"column_end":37,"is_primary":true,"text":[{"text":"        schema.push(NP_Parsed_Schema {","highlight_start":21,"highlight_end":37}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/uuid.rs:247:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m247\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        schema.push(NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/uuid.rs","byte_start":7672,"byte_end":7688,"line_start":259,"line_end":259,"column_start":21,"column_end":37,"is_primary":true,"text":[{"text":"        schema.push(NP_Parsed_Schema {","highlight_start":21,"highlight_end":37}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/uuid.rs:259:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m259\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        schema.push(NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/option.rs","byte_start":9809,"byte_end":9825,"line_start":304,"line_end":304,"column_start":21,"column_end":37,"is_primary":true,"text":[{"text":"        schema.push(NP_Parsed_Schema { ","highlight_start":21,"highlight_end":37}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/option.rs:304:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m304\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        schema.push(NP_Parsed_Schema { \u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/option.rs","byte_start":15839,"byte_end":15855,"line_start":480,"line_end":480,"column_start":21,"column_end":37,"is_primary":true,"text":[{"text":"        schema.push(NP_Parsed_Schema { ","highlight_start":21,"highlight_end":37}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/option.rs:480:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m480\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        schema.push(NP_Parsed_Schema { \u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/option.rs","byte_start":17231,"byte_end":17247,"line_start":517,"line_end":517,"column_start":21,"column_end":37,"is_primary":true,"text":[{"text":"        schema.push(NP_Parsed_Schema {","highlight_start":21,"highlight_end":37}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/option.rs:517:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m517\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        schema.push(NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/date.rs","byte_start":8213,"byte_end":8229,"line_start":264,"line_end":264,"column_start":21,"column_end":37,"is_primary":true,"text":[{"text":"        schema.push(NP_Parsed_Schema {","highlight_start":21,"highlight_end":37}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/date.rs:264:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m264\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        schema.push(NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/date.rs","byte_start":9126,"byte_end":9142,"line_start":292,"line_end":292,"column_start":21,"column_end":37,"is_primary":true,"text":[{"text":"        schema.push(NP_Parsed_Schema {","highlight_start":21,"highlight_end":37}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/date.rs:292:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m292\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        schema.push(NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/date.rs","byte_start":9915,"byte_end":9931,"line_start":316,"line_end":316,"column_start":21,"column_end":37,"is_primary":true,"text":[{"text":"        schema.push(NP_Parsed_Schema {","highlight_start":21,"highlight_end":37}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/date.rs:316:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m316\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        schema.push(NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/portal.rs","byte_start":4799,"byte_end":4815,"line_start":140,"line_end":140,"column_start":25,"column_end":41,"is_primary":true,"text":[{"text":"            schema.push(NP_Parsed_Schema {","highlight_start":25,"highlight_end":41}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/portal.rs:140:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m140\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            schema.push(NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/portal.rs","byte_start":5776,"byte_end":5792,"line_start":161,"line_end":161,"column_start":29,"column_end":45,"is_primary":true,"text":[{"text":"                schema.push(NP_Parsed_Schema {","highlight_start":29,"highlight_end":45}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/portal.rs:161:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                schema.push(NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/pointer/portal.rs","byte_start":6890,"byte_end":6906,"line_start":186,"line_end":186,"column_start":21,"column_end":37,"is_primary":true,"text":[{"text":"        schema.push(NP_Parsed_Schema {","highlight_start":21,"highlight_end":37}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pointer/portal.rs:186:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m186\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        schema.push(NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/collection/struc.rs","byte_start":9039,"byte_end":9055,"line_start":247,"line_end":247,"column_start":21,"column_end":37,"is_primary":true,"text":[{"text":"        schema.push(NP_Parsed_Schema {","highlight_start":21,"highlight_end":37}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/collection/struc.rs:247:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m247\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        schema.push(NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/collection/struc.rs","byte_start":10525,"byte_end":10541,"line_start":284,"line_end":284,"column_start":44,"column_end":60,"is_primary":true,"text":[{"text":"        schema_parsed[table_schema_addr] = NP_Parsed_Schema {","highlight_start":44,"highlight_end":60}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/collection/struc.rs:284:44\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m284\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        schema_parsed[table_schema_addr] = NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/collection/struc.rs","byte_start":15448,"byte_end":15464,"line_start":413,"line_end":413,"column_start":21,"column_end":37,"is_primary":true,"text":[{"text":"        schema.push(NP_Parsed_Schema {","highlight_start":21,"highlight_end":37}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/collection/struc.rs:413:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m413\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        schema.push(NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/collection/struc.rs","byte_start":18035,"byte_end":18051,"line_start":475,"line_end":475,"column_start":48,"column_end":64,"is_primary":true,"text":[{"text":"            schema_parsed[schema_table_addr] = NP_Parsed_Schema {","highlight_start":48,"highlight_end":64}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/collection/struc.rs:475:48\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m475\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            schema_parsed[schema_table_addr] = NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/collection/struc.rs","byte_start":19765,"byte_end":19781,"line_start":520,"line_end":520,"column_start":21,"column_end":37,"is_primary":true,"text":[{"text":"        schema.push(NP_Parsed_Schema {","highlight_start":21,"highlight_end":37}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/collection/struc.rs:520:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m520\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        schema.push(NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/collection/struc.rs","byte_start":21445,"byte_end":21461,"line_start":561,"line_end":561,"column_start":44,"column_end":60,"is_primary":true,"text":[{"text":"        schema_parsed[schema_table_addr] = NP_Parsed_Schema {","highlight_start":44,"highlight_end":60}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/collection/struc.rs:561:44\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m561\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        schema_parsed[schema_table_addr] = NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/collection/map.rs","byte_start":10638,"byte_end":10654,"line_start":318,"line_end":318,"column_start":21,"column_end":37,"is_primary":true,"text":[{"text":"        schema.push(NP_Parsed_Schema {","highlight_start":21,"highlight_end":37}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/collection/map.rs:318:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m318\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        schema.push(NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/collection/map.rs","byte_start":12023,"byte_end":12039,"line_start":358,"line_end":358,"column_start":21,"column_end":37,"is_primary":true,"text":[{"text":"        schema.push(NP_Parsed_Schema {","highlight_start":21,"highlight_end":37}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/collection/map.rs:358:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m358\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        schema.push(NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/collection/map.rs","byte_start":13022,"byte_end":13038,"line_start":387,"line_end":387,"column_start":21,"column_end":37,"is_primary":true,"text":[{"text":"        schema.push(NP_Parsed_Schema {","highlight_start":21,"highlight_end":37}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/collection/map.rs:387:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m387\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        schema.push(NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/collection/list.rs","byte_start":18678,"byte_end":18694,"line_start":495,"line_end":495,"column_start":21,"column_end":37,"is_primary":true,"text":[{"text":"        schema.push(NP_Parsed_Schema {","highlight_start":21,"highlight_end":37}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/collection/list.rs:495:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m495\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        schema.push(NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/collection/list.rs","byte_start":20063,"byte_end":20079,"line_start":535,"line_end":535,"column_start":21,"column_end":37,"is_primary":true,"text":[{"text":"        schema.push(NP_Parsed_Schema {","highlight_start":21,"highlight_end":37}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/collection/list.rs:535:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m535\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        schema.push(NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/collection/list.rs","byte_start":21102,"byte_end":21118,"line_start":564,"line_end":564,"column_start":21,"column_end":37,"is_primary":true,"text":[{"text":"        schema.push(NP_Parsed_Schema {","highlight_start":21,"highlight_end":37}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/collection/list.rs:564:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m564\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        schema.push(NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/collection/tuple.rs","byte_start":10643,"byte_end":10659,"line_start":308,"line_end":308,"column_start":25,"column_end":41,"is_primary":true,"text":[{"text":"            schema.push(NP_Parsed_Schema {","highlight_start":25,"highlight_end":41}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/collection/tuple.rs:308:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m308\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            schema.push(NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/collection/tuple.rs","byte_start":12220,"byte_end":12236,"line_start":342,"line_end":342,"column_start":42,"column_end":58,"is_primary":true,"text":[{"text":"            working_schema[tuple_addr] = NP_Parsed_Schema {","highlight_start":42,"highlight_end":58}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/collection/tuple.rs:342:42\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m342\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            working_schema[tuple_addr] = NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/collection/tuple.rs","byte_start":13971,"byte_end":13987,"line_start":393,"line_end":393,"column_start":21,"column_end":37,"is_primary":true,"text":[{"text":"        schema.push(NP_Parsed_Schema {","highlight_start":21,"highlight_end":37}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/collection/tuple.rs:393:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m393\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        schema.push(NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/collection/tuple.rs","byte_start":15850,"byte_end":15866,"line_start":435,"line_end":435,"column_start":38,"column_end":54,"is_primary":true,"text":[{"text":"        working_schema[tuple_addr] = NP_Parsed_Schema {","highlight_start":38,"highlight_end":54}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/collection/tuple.rs:435:38\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m435\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        working_schema[tuple_addr] = NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/collection/tuple.rs","byte_start":17207,"byte_end":17223,"line_start":476,"line_end":476,"column_start":29,"column_end":45,"is_primary":true,"text":[{"text":"        working_schema.push(NP_Parsed_Schema {","highlight_start":29,"highlight_end":45}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/collection/tuple.rs:476:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m476\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        working_schema.push(NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/collection/tuple.rs","byte_start":18632,"byte_end":18648,"line_start":513,"line_end":513,"column_start":45,"column_end":61,"is_primary":true,"text":[{"text":"        working_schema[tuple_schema_addr] = NP_Parsed_Schema {","highlight_start":45,"highlight_end":61}],"label":"missing `all_props` and `generics`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing fields `all_props` and `generics` in initializer of `NP_Parsed_Schema`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/collection/tuple.rs:513:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m513\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        working_schema[tuple_schema_addr] = NP_Parsed_Schema {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `all_props` and `generics`\u001b[0m\n\n"}
{"message":"aborting due to 89 previous errors; 5 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 89 previous errors; 5 warnings emitted\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0063, E0432, E0433.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0063, E0432, E0433.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0063`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0063`.\u001b[0m\n"}
